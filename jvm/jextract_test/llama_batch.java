// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_batch {
 *     int32_t n_tokens;
 *     llama_token *token;
 *     float *embd;
 *     llama_pos *pos;
 *     int32_t *n_seq_id;
 *     llama_seq_id **seq_id;
 *     int8_t *logits;
 * }
 * }
 */
public class llama_batch {

    llama_batch() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_INT.withName("n_tokens"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_POINTER.withName("token"),
        llama_h.C_POINTER.withName("embd"),
        llama_h.C_POINTER.withName("pos"),
        llama_h.C_POINTER.withName("n_seq_id"),
        llama_h.C_POINTER.withName("seq_id"),
        llama_h.C_POINTER.withName("logits")
    ).withName("llama_batch");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt n_tokens$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_tokens"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t n_tokens
     * }
     */
    public static final OfInt n_tokens$layout() {
        return n_tokens$LAYOUT;
    }

    private static final long n_tokens$OFFSET = $LAYOUT.byteOffset(groupElement("n_tokens"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t n_tokens
     * }
     */
    public static final long n_tokens$offset() {
        return n_tokens$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t n_tokens
     * }
     */
    public static int n_tokens(MemorySegment struct) {
        return struct.get(n_tokens$LAYOUT, n_tokens$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t n_tokens
     * }
     */
    public static void n_tokens(MemorySegment struct, int fieldValue) {
        struct.set(n_tokens$LAYOUT, n_tokens$OFFSET, fieldValue);
    }

    private static final AddressLayout token$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("token"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * llama_token *token
     * }
     */
    public static final AddressLayout token$layout() {
        return token$LAYOUT;
    }

    private static final long token$OFFSET = $LAYOUT.byteOffset(groupElement("token"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * llama_token *token
     * }
     */
    public static final long token$offset() {
        return token$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * llama_token *token
     * }
     */
    public static MemorySegment token(MemorySegment struct) {
        return struct.get(token$LAYOUT, token$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * llama_token *token
     * }
     */
    public static void token(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(token$LAYOUT, token$OFFSET, fieldValue);
    }

    private static final AddressLayout embd$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("embd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float *embd
     * }
     */
    public static final AddressLayout embd$layout() {
        return embd$LAYOUT;
    }

    private static final long embd$OFFSET = $LAYOUT.byteOffset(groupElement("embd"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float *embd
     * }
     */
    public static final long embd$offset() {
        return embd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float *embd
     * }
     */
    public static MemorySegment embd(MemorySegment struct) {
        return struct.get(embd$LAYOUT, embd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float *embd
     * }
     */
    public static void embd(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(embd$LAYOUT, embd$OFFSET, fieldValue);
    }

    private static final AddressLayout pos$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pos"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * llama_pos *pos
     * }
     */
    public static final AddressLayout pos$layout() {
        return pos$LAYOUT;
    }

    private static final long pos$OFFSET = $LAYOUT.byteOffset(groupElement("pos"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * llama_pos *pos
     * }
     */
    public static final long pos$offset() {
        return pos$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * llama_pos *pos
     * }
     */
    public static MemorySegment pos(MemorySegment struct) {
        return struct.get(pos$LAYOUT, pos$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * llama_pos *pos
     * }
     */
    public static void pos(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pos$LAYOUT, pos$OFFSET, fieldValue);
    }

    private static final AddressLayout n_seq_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("n_seq_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t *n_seq_id
     * }
     */
    public static final AddressLayout n_seq_id$layout() {
        return n_seq_id$LAYOUT;
    }

    private static final long n_seq_id$OFFSET = $LAYOUT.byteOffset(groupElement("n_seq_id"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t *n_seq_id
     * }
     */
    public static final long n_seq_id$offset() {
        return n_seq_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t *n_seq_id
     * }
     */
    public static MemorySegment n_seq_id(MemorySegment struct) {
        return struct.get(n_seq_id$LAYOUT, n_seq_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t *n_seq_id
     * }
     */
    public static void n_seq_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(n_seq_id$LAYOUT, n_seq_id$OFFSET, fieldValue);
    }

    private static final AddressLayout seq_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("seq_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * llama_seq_id **seq_id
     * }
     */
    public static final AddressLayout seq_id$layout() {
        return seq_id$LAYOUT;
    }

    private static final long seq_id$OFFSET = $LAYOUT.byteOffset(groupElement("seq_id"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * llama_seq_id **seq_id
     * }
     */
    public static final long seq_id$offset() {
        return seq_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * llama_seq_id **seq_id
     * }
     */
    public static MemorySegment seq_id(MemorySegment struct) {
        return struct.get(seq_id$LAYOUT, seq_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * llama_seq_id **seq_id
     * }
     */
    public static void seq_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(seq_id$LAYOUT, seq_id$OFFSET, fieldValue);
    }

    private static final AddressLayout logits$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("logits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t *logits
     * }
     */
    public static final AddressLayout logits$layout() {
        return logits$LAYOUT;
    }

    private static final long logits$OFFSET = $LAYOUT.byteOffset(groupElement("logits"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t *logits
     * }
     */
    public static final long logits$offset() {
        return logits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t *logits
     * }
     */
    public static MemorySegment logits(MemorySegment struct) {
        return struct.get(logits$LAYOUT, logits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t *logits
     * }
     */
    public static void logits(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(logits$LAYOUT, logits$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

