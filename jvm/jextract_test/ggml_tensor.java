// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_tensor {
 *     enum ggml_type type;
 *     struct ggml_backend_buffer *buffer;
 *     int64_t ne[4];
 *     size_t nb[4];
 *     enum ggml_op op;
 *     int32_t op_params[16];
 *     int32_t flags;
 *     struct ggml_tensor *src[10];
 *     struct ggml_tensor *view_src;
 *     size_t view_offs;
 *     void *data;
 *     char name[64];
 *     void *extra;
 *     char padding[8];
 * }
 * }
 */
public class ggml_tensor {

    ggml_tensor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_POINTER.withName("buffer"),
        MemoryLayout.sequenceLayout(4, llama_h.C_LONG_LONG).withName("ne"),
        MemoryLayout.sequenceLayout(4, llama_h.C_LONG).withName("nb"),
        llama_h.C_INT.withName("op"),
        MemoryLayout.sequenceLayout(16, llama_h.C_INT).withName("op_params"),
        llama_h.C_INT.withName("flags"),
        MemoryLayout.sequenceLayout(10, llama_h.C_POINTER).withName("src"),
        llama_h.C_POINTER.withName("view_src"),
        llama_h.C_LONG.withName("view_offs"),
        llama_h.C_POINTER.withName("data"),
        MemoryLayout.sequenceLayout(64, llama_h.C_CHAR).withName("name"),
        llama_h.C_POINTER.withName("extra"),
        MemoryLayout.sequenceLayout(8, llama_h.C_CHAR).withName("padding")
    ).withName("ggml_tensor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ggml_type type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = $LAYOUT.byteOffset(groupElement("type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ggml_type type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_type type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_type type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_backend_buffer *buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = $LAYOUT.byteOffset(groupElement("buffer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_backend_buffer *buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_backend_buffer *buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_backend_buffer *buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final SequenceLayout ne$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ne"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static final SequenceLayout ne$layout() {
        return ne$LAYOUT;
    }

    private static final long ne$OFFSET = $LAYOUT.byteOffset(groupElement("ne"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static final long ne$offset() {
        return ne$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static MemorySegment ne(MemorySegment struct) {
        return struct.asSlice(ne$OFFSET, ne$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static void ne(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ne$OFFSET, ne$LAYOUT.byteSize());
    }

    private static long[] ne$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static long[] ne$dimensions() {
        return ne$DIMS;
    }
    private static final VarHandle ne$ELEM_HANDLE = ne$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static long ne(MemorySegment struct, long index0) {
        return (long)ne$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int64_t ne[4]
     * }
     */
    public static void ne(MemorySegment struct, long index0, long fieldValue) {
        ne$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout nb$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("nb"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static final SequenceLayout nb$layout() {
        return nb$LAYOUT;
    }

    private static final long nb$OFFSET = $LAYOUT.byteOffset(groupElement("nb"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static final long nb$offset() {
        return nb$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static MemorySegment nb(MemorySegment struct) {
        return struct.asSlice(nb$OFFSET, nb$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static void nb(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, nb$OFFSET, nb$LAYOUT.byteSize());
    }

    private static long[] nb$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static long[] nb$dimensions() {
        return nb$DIMS;
    }
    private static final VarHandle nb$ELEM_HANDLE = nb$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static long nb(MemorySegment struct, long index0) {
        return (long)nb$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * size_t nb[4]
     * }
     */
    public static void nb(MemorySegment struct, long index0, long fieldValue) {
        nb$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt op$LAYOUT = (OfInt)$LAYOUT.select(groupElement("op"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ggml_op op
     * }
     */
    public static final OfInt op$layout() {
        return op$LAYOUT;
    }

    private static final long op$OFFSET = $LAYOUT.byteOffset(groupElement("op"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ggml_op op
     * }
     */
    public static final long op$offset() {
        return op$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_op op
     * }
     */
    public static int op(MemorySegment struct) {
        return struct.get(op$LAYOUT, op$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_op op
     * }
     */
    public static void op(MemorySegment struct, int fieldValue) {
        struct.set(op$LAYOUT, op$OFFSET, fieldValue);
    }

    private static final SequenceLayout op_params$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("op_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static final SequenceLayout op_params$layout() {
        return op_params$LAYOUT;
    }

    private static final long op_params$OFFSET = $LAYOUT.byteOffset(groupElement("op_params"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static final long op_params$offset() {
        return op_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static MemorySegment op_params(MemorySegment struct) {
        return struct.asSlice(op_params$OFFSET, op_params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static void op_params(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, op_params$OFFSET, op_params$LAYOUT.byteSize());
    }

    private static long[] op_params$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static long[] op_params$dimensions() {
        return op_params$DIMS;
    }
    private static final VarHandle op_params$ELEM_HANDLE = op_params$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static int op_params(MemorySegment struct, long index0) {
        return (int)op_params$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int32_t op_params[16]
     * }
     */
    public static void op_params(MemorySegment struct, long index0, int fieldValue) {
        op_params$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = $LAYOUT.byteOffset(groupElement("flags"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final SequenceLayout src$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("src"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static final SequenceLayout src$layout() {
        return src$LAYOUT;
    }

    private static final long src$OFFSET = $LAYOUT.byteOffset(groupElement("src"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static final long src$offset() {
        return src$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static MemorySegment src(MemorySegment struct) {
        return struct.asSlice(src$OFFSET, src$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static void src(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, src$OFFSET, src$LAYOUT.byteSize());
    }

    private static long[] src$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static long[] src$dimensions() {
        return src$DIMS;
    }
    private static final VarHandle src$ELEM_HANDLE = src$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static MemorySegment src(MemorySegment struct, long index0) {
        return (MemorySegment)src$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *src[10]
     * }
     */
    public static void src(MemorySegment struct, long index0, MemorySegment fieldValue) {
        src$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout view_src$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("view_src"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_tensor *view_src
     * }
     */
    public static final AddressLayout view_src$layout() {
        return view_src$LAYOUT;
    }

    private static final long view_src$OFFSET = $LAYOUT.byteOffset(groupElement("view_src"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_tensor *view_src
     * }
     */
    public static final long view_src$offset() {
        return view_src$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *view_src
     * }
     */
    public static MemorySegment view_src(MemorySegment struct) {
        return struct.get(view_src$LAYOUT, view_src$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *view_src
     * }
     */
    public static void view_src(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(view_src$LAYOUT, view_src$OFFSET, fieldValue);
    }

    private static final OfLong view_offs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("view_offs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t view_offs
     * }
     */
    public static final OfLong view_offs$layout() {
        return view_offs$LAYOUT;
    }

    private static final long view_offs$OFFSET = $LAYOUT.byteOffset(groupElement("view_offs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t view_offs
     * }
     */
    public static final long view_offs$offset() {
        return view_offs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t view_offs
     * }
     */
    public static long view_offs(MemorySegment struct) {
        return struct.get(view_offs$LAYOUT, view_offs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t view_offs
     * }
     */
    public static void view_offs(MemorySegment struct, long fieldValue) {
        struct.set(view_offs$LAYOUT, view_offs$OFFSET, fieldValue);
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = $LAYOUT.byteOffset(groupElement("data"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    private static final SequenceLayout name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static final SequenceLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = $LAYOUT.byteOffset(groupElement("name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.asSlice(name$OFFSET, name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, name$OFFSET, name$LAYOUT.byteSize());
    }

    private static long[] name$DIMS = { 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static long[] name$dimensions() {
        return name$DIMS;
    }
    private static final VarHandle name$ELEM_HANDLE = name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static byte name(MemorySegment struct, long index0) {
        return (byte)name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char name[64]
     * }
     */
    public static void name(MemorySegment struct, long index0, byte fieldValue) {
        name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout extra$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("extra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *extra
     * }
     */
    public static final AddressLayout extra$layout() {
        return extra$LAYOUT;
    }

    private static final long extra$OFFSET = $LAYOUT.byteOffset(groupElement("extra"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *extra
     * }
     */
    public static final long extra$offset() {
        return extra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *extra
     * }
     */
    public static MemorySegment extra(MemorySegment struct) {
        return struct.get(extra$LAYOUT, extra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *extra
     * }
     */
    public static void extra(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(extra$LAYOUT, extra$OFFSET, fieldValue);
    }

    private static final SequenceLayout padding$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("padding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static final SequenceLayout padding$layout() {
        return padding$LAYOUT;
    }

    private static final long padding$OFFSET = $LAYOUT.byteOffset(groupElement("padding"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static final long padding$offset() {
        return padding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static MemorySegment padding(MemorySegment struct) {
        return struct.asSlice(padding$OFFSET, padding$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static void padding(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, padding$OFFSET, padding$LAYOUT.byteSize());
    }

    private static long[] padding$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static long[] padding$dimensions() {
        return padding$DIMS;
    }
    private static final VarHandle padding$ELEM_HANDLE = padding$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static byte padding(MemorySegment struct, long index0) {
        return (byte)padding$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char padding[8]
     * }
     */
    public static void padding(MemorySegment struct, long index0, byte fieldValue) {
        padding$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

