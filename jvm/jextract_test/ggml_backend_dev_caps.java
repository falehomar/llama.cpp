// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_backend_dev_caps {
 *     bool async;
 *     bool host_buffer;
 *     bool buffer_from_host_ptr;
 *     bool events;
 * }
 * }
 */
public class ggml_backend_dev_caps {

    ggml_backend_dev_caps() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_BOOL.withName("async"),
        llama_h.C_BOOL.withName("host_buffer"),
        llama_h.C_BOOL.withName("buffer_from_host_ptr"),
        llama_h.C_BOOL.withName("events")
    ).withName("ggml_backend_dev_caps");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfBoolean async$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("async"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool async
     * }
     */
    public static final OfBoolean async$layout() {
        return async$LAYOUT;
    }

    private static final long async$OFFSET = $LAYOUT.byteOffset(groupElement("async"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool async
     * }
     */
    public static final long async$offset() {
        return async$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool async
     * }
     */
    public static boolean async(MemorySegment struct) {
        return struct.get(async$LAYOUT, async$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool async
     * }
     */
    public static void async(MemorySegment struct, boolean fieldValue) {
        struct.set(async$LAYOUT, async$OFFSET, fieldValue);
    }

    private static final OfBoolean host_buffer$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("host_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool host_buffer
     * }
     */
    public static final OfBoolean host_buffer$layout() {
        return host_buffer$LAYOUT;
    }

    private static final long host_buffer$OFFSET = $LAYOUT.byteOffset(groupElement("host_buffer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool host_buffer
     * }
     */
    public static final long host_buffer$offset() {
        return host_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool host_buffer
     * }
     */
    public static boolean host_buffer(MemorySegment struct) {
        return struct.get(host_buffer$LAYOUT, host_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool host_buffer
     * }
     */
    public static void host_buffer(MemorySegment struct, boolean fieldValue) {
        struct.set(host_buffer$LAYOUT, host_buffer$OFFSET, fieldValue);
    }

    private static final OfBoolean buffer_from_host_ptr$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("buffer_from_host_ptr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool buffer_from_host_ptr
     * }
     */
    public static final OfBoolean buffer_from_host_ptr$layout() {
        return buffer_from_host_ptr$LAYOUT;
    }

    private static final long buffer_from_host_ptr$OFFSET = $LAYOUT.byteOffset(groupElement("buffer_from_host_ptr"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool buffer_from_host_ptr
     * }
     */
    public static final long buffer_from_host_ptr$offset() {
        return buffer_from_host_ptr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool buffer_from_host_ptr
     * }
     */
    public static boolean buffer_from_host_ptr(MemorySegment struct) {
        return struct.get(buffer_from_host_ptr$LAYOUT, buffer_from_host_ptr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool buffer_from_host_ptr
     * }
     */
    public static void buffer_from_host_ptr(MemorySegment struct, boolean fieldValue) {
        struct.set(buffer_from_host_ptr$LAYOUT, buffer_from_host_ptr$OFFSET, fieldValue);
    }

    private static final OfBoolean events$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("events"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool events
     * }
     */
    public static final OfBoolean events$layout() {
        return events$LAYOUT;
    }

    private static final long events$OFFSET = $LAYOUT.byteOffset(groupElement("events"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool events
     * }
     */
    public static final long events$offset() {
        return events$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool events
     * }
     */
    public static boolean events(MemorySegment struct) {
        return struct.get(events$LAYOUT, events$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool events
     * }
     */
    public static void events(MemorySegment struct, boolean fieldValue) {
        struct.set(events$LAYOUT, events$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

