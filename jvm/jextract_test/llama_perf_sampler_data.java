// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_perf_sampler_data {
 *     double t_sample_ms;
 *     int32_t n_sample;
 * }
 * }
 */
public class llama_perf_sampler_data {

    llama_perf_sampler_data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_DOUBLE.withName("t_sample_ms"),
        llama_h.C_INT.withName("n_sample"),
        MemoryLayout.paddingLayout(4)
    ).withName("llama_perf_sampler_data");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble t_sample_ms$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("t_sample_ms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double t_sample_ms
     * }
     */
    public static final OfDouble t_sample_ms$layout() {
        return t_sample_ms$LAYOUT;
    }

    private static final long t_sample_ms$OFFSET = $LAYOUT.byteOffset(groupElement("t_sample_ms"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double t_sample_ms
     * }
     */
    public static final long t_sample_ms$offset() {
        return t_sample_ms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double t_sample_ms
     * }
     */
    public static double t_sample_ms(MemorySegment struct) {
        return struct.get(t_sample_ms$LAYOUT, t_sample_ms$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double t_sample_ms
     * }
     */
    public static void t_sample_ms(MemorySegment struct, double fieldValue) {
        struct.set(t_sample_ms$LAYOUT, t_sample_ms$OFFSET, fieldValue);
    }

    private static final OfInt n_sample$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_sample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t n_sample
     * }
     */
    public static final OfInt n_sample$layout() {
        return n_sample$LAYOUT;
    }

    private static final long n_sample$OFFSET = $LAYOUT.byteOffset(groupElement("n_sample"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t n_sample
     * }
     */
    public static final long n_sample$offset() {
        return n_sample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t n_sample
     * }
     */
    public static int n_sample(MemorySegment struct) {
        return struct.get(n_sample$LAYOUT, n_sample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t n_sample
     * }
     */
    public static void n_sample(MemorySegment struct, int fieldValue) {
        struct.set(n_sample$LAYOUT, n_sample$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

