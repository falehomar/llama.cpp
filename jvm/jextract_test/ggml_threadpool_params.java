// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_threadpool_params {
 *     bool cpumask[512];
 *     int n_threads;
 *     enum ggml_sched_priority prio;
 *     uint32_t poll;
 *     bool strict_cpu;
 *     bool paused;
 * }
 * }
 */
public class ggml_threadpool_params {

    ggml_threadpool_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(512, llama_h.C_BOOL).withName("cpumask"),
        llama_h.C_INT.withName("n_threads"),
        llama_h.C_INT.withName("prio"),
        llama_h.C_INT.withName("poll"),
        llama_h.C_BOOL.withName("strict_cpu"),
        llama_h.C_BOOL.withName("paused"),
        MemoryLayout.paddingLayout(2)
    ).withName("ggml_threadpool_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout cpumask$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cpumask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static final SequenceLayout cpumask$layout() {
        return cpumask$LAYOUT;
    }

    private static final long cpumask$OFFSET = $LAYOUT.byteOffset(groupElement("cpumask"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static final long cpumask$offset() {
        return cpumask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static MemorySegment cpumask(MemorySegment struct) {
        return struct.asSlice(cpumask$OFFSET, cpumask$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static void cpumask(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cpumask$OFFSET, cpumask$LAYOUT.byteSize());
    }

    private static long[] cpumask$DIMS = { 512 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static long[] cpumask$dimensions() {
        return cpumask$DIMS;
    }
    private static final VarHandle cpumask$ELEM_HANDLE = cpumask$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static boolean cpumask(MemorySegment struct, long index0) {
        return (boolean)cpumask$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * bool cpumask[512]
     * }
     */
    public static void cpumask(MemorySegment struct, long index0, boolean fieldValue) {
        cpumask$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt n_threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static final OfInt n_threads$layout() {
        return n_threads$LAYOUT;
    }

    private static final long n_threads$OFFSET = $LAYOUT.byteOffset(groupElement("n_threads"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static final long n_threads$offset() {
        return n_threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static int n_threads(MemorySegment struct) {
        return struct.get(n_threads$LAYOUT, n_threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static void n_threads(MemorySegment struct, int fieldValue) {
        struct.set(n_threads$LAYOUT, n_threads$OFFSET, fieldValue);
    }

    private static final OfInt prio$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prio"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ggml_sched_priority prio
     * }
     */
    public static final OfInt prio$layout() {
        return prio$LAYOUT;
    }

    private static final long prio$OFFSET = $LAYOUT.byteOffset(groupElement("prio"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ggml_sched_priority prio
     * }
     */
    public static final long prio$offset() {
        return prio$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_sched_priority prio
     * }
     */
    public static int prio(MemorySegment struct) {
        return struct.get(prio$LAYOUT, prio$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_sched_priority prio
     * }
     */
    public static void prio(MemorySegment struct, int fieldValue) {
        struct.set(prio$LAYOUT, prio$OFFSET, fieldValue);
    }

    private static final OfInt poll$LAYOUT = (OfInt)$LAYOUT.select(groupElement("poll"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t poll
     * }
     */
    public static final OfInt poll$layout() {
        return poll$LAYOUT;
    }

    private static final long poll$OFFSET = $LAYOUT.byteOffset(groupElement("poll"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t poll
     * }
     */
    public static final long poll$offset() {
        return poll$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t poll
     * }
     */
    public static int poll(MemorySegment struct) {
        return struct.get(poll$LAYOUT, poll$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t poll
     * }
     */
    public static void poll(MemorySegment struct, int fieldValue) {
        struct.set(poll$LAYOUT, poll$OFFSET, fieldValue);
    }

    private static final OfBoolean strict_cpu$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("strict_cpu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool strict_cpu
     * }
     */
    public static final OfBoolean strict_cpu$layout() {
        return strict_cpu$LAYOUT;
    }

    private static final long strict_cpu$OFFSET = $LAYOUT.byteOffset(groupElement("strict_cpu"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool strict_cpu
     * }
     */
    public static final long strict_cpu$offset() {
        return strict_cpu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool strict_cpu
     * }
     */
    public static boolean strict_cpu(MemorySegment struct) {
        return struct.get(strict_cpu$LAYOUT, strict_cpu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool strict_cpu
     * }
     */
    public static void strict_cpu(MemorySegment struct, boolean fieldValue) {
        struct.set(strict_cpu$LAYOUT, strict_cpu$OFFSET, fieldValue);
    }

    private static final OfBoolean paused$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("paused"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool paused
     * }
     */
    public static final OfBoolean paused$layout() {
        return paused$LAYOUT;
    }

    private static final long paused$OFFSET = $LAYOUT.byteOffset(groupElement("paused"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool paused
     * }
     */
    public static final long paused$offset() {
        return paused$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool paused
     * }
     */
    public static boolean paused(MemorySegment struct) {
        return struct.get(paused$LAYOUT, paused$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool paused
     * }
     */
    public static void paused(MemorySegment struct, boolean fieldValue) {
        struct.set(paused$LAYOUT, paused$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

