// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_opt_params {
 *     ggml_backend_sched_t backend_sched;
 *     struct ggml_context *ctx_compute;
 *     struct ggml_tensor *inputs;
 *     struct ggml_tensor *outputs;
 *     enum ggml_opt_loss_type loss_type;
 *     enum ggml_opt_build_type build_type;
 *     int32_t opt_period;
 *     ggml_opt_get_optimizer_params get_opt_pars;
 *     void *get_opt_pars_ud;
 * }
 * }
 */
public class ggml_opt_params {

    ggml_opt_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_POINTER.withName("backend_sched"),
        llama_h.C_POINTER.withName("ctx_compute"),
        llama_h.C_POINTER.withName("inputs"),
        llama_h.C_POINTER.withName("outputs"),
        llama_h.C_INT.withName("loss_type"),
        llama_h.C_INT.withName("build_type"),
        llama_h.C_INT.withName("opt_period"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_POINTER.withName("get_opt_pars"),
        llama_h.C_POINTER.withName("get_opt_pars_ud")
    ).withName("ggml_opt_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout backend_sched$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("backend_sched"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_backend_sched_t backend_sched
     * }
     */
    public static final AddressLayout backend_sched$layout() {
        return backend_sched$LAYOUT;
    }

    private static final long backend_sched$OFFSET = $LAYOUT.byteOffset(groupElement("backend_sched"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_backend_sched_t backend_sched
     * }
     */
    public static final long backend_sched$offset() {
        return backend_sched$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_backend_sched_t backend_sched
     * }
     */
    public static MemorySegment backend_sched(MemorySegment struct) {
        return struct.get(backend_sched$LAYOUT, backend_sched$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_backend_sched_t backend_sched
     * }
     */
    public static void backend_sched(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(backend_sched$LAYOUT, backend_sched$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx_compute$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx_compute"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_compute
     * }
     */
    public static final AddressLayout ctx_compute$layout() {
        return ctx_compute$LAYOUT;
    }

    private static final long ctx_compute$OFFSET = $LAYOUT.byteOffset(groupElement("ctx_compute"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_compute
     * }
     */
    public static final long ctx_compute$offset() {
        return ctx_compute$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_compute
     * }
     */
    public static MemorySegment ctx_compute(MemorySegment struct) {
        return struct.get(ctx_compute$LAYOUT, ctx_compute$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_compute
     * }
     */
    public static void ctx_compute(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx_compute$LAYOUT, ctx_compute$OFFSET, fieldValue);
    }

    private static final AddressLayout inputs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("inputs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_tensor *inputs
     * }
     */
    public static final AddressLayout inputs$layout() {
        return inputs$LAYOUT;
    }

    private static final long inputs$OFFSET = $LAYOUT.byteOffset(groupElement("inputs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_tensor *inputs
     * }
     */
    public static final long inputs$offset() {
        return inputs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *inputs
     * }
     */
    public static MemorySegment inputs(MemorySegment struct) {
        return struct.get(inputs$LAYOUT, inputs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *inputs
     * }
     */
    public static void inputs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(inputs$LAYOUT, inputs$OFFSET, fieldValue);
    }

    private static final AddressLayout outputs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("outputs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_tensor *outputs
     * }
     */
    public static final AddressLayout outputs$layout() {
        return outputs$LAYOUT;
    }

    private static final long outputs$OFFSET = $LAYOUT.byteOffset(groupElement("outputs"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_tensor *outputs
     * }
     */
    public static final long outputs$offset() {
        return outputs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *outputs
     * }
     */
    public static MemorySegment outputs(MemorySegment struct) {
        return struct.get(outputs$LAYOUT, outputs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_tensor *outputs
     * }
     */
    public static void outputs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(outputs$LAYOUT, outputs$OFFSET, fieldValue);
    }

    private static final OfInt loss_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("loss_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ggml_opt_loss_type loss_type
     * }
     */
    public static final OfInt loss_type$layout() {
        return loss_type$LAYOUT;
    }

    private static final long loss_type$OFFSET = $LAYOUT.byteOffset(groupElement("loss_type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ggml_opt_loss_type loss_type
     * }
     */
    public static final long loss_type$offset() {
        return loss_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_opt_loss_type loss_type
     * }
     */
    public static int loss_type(MemorySegment struct) {
        return struct.get(loss_type$LAYOUT, loss_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_opt_loss_type loss_type
     * }
     */
    public static void loss_type(MemorySegment struct, int fieldValue) {
        struct.set(loss_type$LAYOUT, loss_type$OFFSET, fieldValue);
    }

    private static final OfInt build_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("build_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ggml_opt_build_type build_type
     * }
     */
    public static final OfInt build_type$layout() {
        return build_type$LAYOUT;
    }

    private static final long build_type$OFFSET = $LAYOUT.byteOffset(groupElement("build_type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ggml_opt_build_type build_type
     * }
     */
    public static final long build_type$offset() {
        return build_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_opt_build_type build_type
     * }
     */
    public static int build_type(MemorySegment struct) {
        return struct.get(build_type$LAYOUT, build_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_opt_build_type build_type
     * }
     */
    public static void build_type(MemorySegment struct, int fieldValue) {
        struct.set(build_type$LAYOUT, build_type$OFFSET, fieldValue);
    }

    private static final OfInt opt_period$LAYOUT = (OfInt)$LAYOUT.select(groupElement("opt_period"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t opt_period
     * }
     */
    public static final OfInt opt_period$layout() {
        return opt_period$LAYOUT;
    }

    private static final long opt_period$OFFSET = $LAYOUT.byteOffset(groupElement("opt_period"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t opt_period
     * }
     */
    public static final long opt_period$offset() {
        return opt_period$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t opt_period
     * }
     */
    public static int opt_period(MemorySegment struct) {
        return struct.get(opt_period$LAYOUT, opt_period$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t opt_period
     * }
     */
    public static void opt_period(MemorySegment struct, int fieldValue) {
        struct.set(opt_period$LAYOUT, opt_period$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public final static class get_opt_pars {

        private get_opt_pars() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ggml_opt_optimizer_params.layout(),
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(get_opt_pars.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_opt_pars.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, SegmentAllocator alloc, MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, alloc, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_opt_pars$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_opt_pars"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static final AddressLayout get_opt_pars$layout() {
        return get_opt_pars$LAYOUT;
    }

    private static final long get_opt_pars$OFFSET = $LAYOUT.byteOffset(groupElement("get_opt_pars"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static final long get_opt_pars$offset() {
        return get_opt_pars$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static MemorySegment get_opt_pars(MemorySegment struct) {
        return struct.get(get_opt_pars$LAYOUT, get_opt_pars$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static void get_opt_pars(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_opt_pars$LAYOUT, get_opt_pars$OFFSET, fieldValue);
    }

    private static final AddressLayout get_opt_pars_ud$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_opt_pars_ud"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static final AddressLayout get_opt_pars_ud$layout() {
        return get_opt_pars_ud$LAYOUT;
    }

    private static final long get_opt_pars_ud$OFFSET = $LAYOUT.byteOffset(groupElement("get_opt_pars_ud"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static final long get_opt_pars_ud$offset() {
        return get_opt_pars_ud$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static MemorySegment get_opt_pars_ud(MemorySegment struct) {
        return struct.get(get_opt_pars_ud$LAYOUT, get_opt_pars_ud$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static void get_opt_pars_ud(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_opt_pars_ud$LAYOUT, get_opt_pars_ud$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

