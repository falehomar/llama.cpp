// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_type_traits_cpu {
 *     ggml_from_float_t from_float;
 *     ggml_vec_dot_t vec_dot;
 *     enum ggml_type vec_dot_type;
 *     int64_t nrows;
 * }
 * }
 */
public class ggml_type_traits_cpu {

    ggml_type_traits_cpu() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_POINTER.withName("from_float"),
        llama_h.C_POINTER.withName("vec_dot"),
        llama_h.C_INT.withName("vec_dot_type"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_LONG_LONG.withName("nrows")
    ).withName("ggml_type_traits_cpu");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * ggml_from_float_t from_float
     * }
     */
    public final static class from_float {

        private from_float() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(from_float.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(from_float.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout from_float$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("from_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float
     * }
     */
    public static final AddressLayout from_float$layout() {
        return from_float$LAYOUT;
    }

    private static final long from_float$OFFSET = $LAYOUT.byteOffset(groupElement("from_float"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float
     * }
     */
    public static final long from_float$offset() {
        return from_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float
     * }
     */
    public static MemorySegment from_float(MemorySegment struct) {
        return struct.get(from_float$LAYOUT, from_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float
     * }
     */
    public static void from_float(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(from_float$LAYOUT, from_float$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ggml_vec_dot_t vec_dot
     * }
     */
    public final static class vec_dot {

        private vec_dot() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0, MemorySegment _x1, long _x2, MemorySegment _x3, long _x4, MemorySegment _x5, long _x6, int _x7);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(vec_dot.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(vec_dot.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, int _x0, MemorySegment _x1, long _x2, MemorySegment _x3, long _x4, MemorySegment _x5, long _x6, int _x7) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6, _x7);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout vec_dot$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vec_dot"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_vec_dot_t vec_dot
     * }
     */
    public static final AddressLayout vec_dot$layout() {
        return vec_dot$LAYOUT;
    }

    private static final long vec_dot$OFFSET = $LAYOUT.byteOffset(groupElement("vec_dot"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_vec_dot_t vec_dot
     * }
     */
    public static final long vec_dot$offset() {
        return vec_dot$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_vec_dot_t vec_dot
     * }
     */
    public static MemorySegment vec_dot(MemorySegment struct) {
        return struct.get(vec_dot$LAYOUT, vec_dot$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_vec_dot_t vec_dot
     * }
     */
    public static void vec_dot(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vec_dot$LAYOUT, vec_dot$OFFSET, fieldValue);
    }

    private static final OfInt vec_dot_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vec_dot_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum ggml_type vec_dot_type
     * }
     */
    public static final OfInt vec_dot_type$layout() {
        return vec_dot_type$LAYOUT;
    }

    private static final long vec_dot_type$OFFSET = $LAYOUT.byteOffset(groupElement("vec_dot_type"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum ggml_type vec_dot_type
     * }
     */
    public static final long vec_dot_type$offset() {
        return vec_dot_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum ggml_type vec_dot_type
     * }
     */
    public static int vec_dot_type(MemorySegment struct) {
        return struct.get(vec_dot_type$LAYOUT, vec_dot_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum ggml_type vec_dot_type
     * }
     */
    public static void vec_dot_type(MemorySegment struct, int fieldValue) {
        struct.set(vec_dot_type$LAYOUT, vec_dot_type$OFFSET, fieldValue);
    }

    private static final OfLong nrows$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nrows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t nrows
     * }
     */
    public static final OfLong nrows$layout() {
        return nrows$LAYOUT;
    }

    private static final long nrows$OFFSET = $LAYOUT.byteOffset(groupElement("nrows"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t nrows
     * }
     */
    public static final long nrows$offset() {
        return nrows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t nrows
     * }
     */
    public static long nrows(MemorySegment struct) {
        return struct.get(nrows$LAYOUT, nrows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t nrows
     * }
     */
    public static void nrows(MemorySegment struct, long fieldValue) {
        struct.set(nrows$LAYOUT, nrows$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

