// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_opt_params {
 *     uint32_t n_ctx_train;
 *     llama_opt_param_filter param_filter;
 *     void *param_filter_ud;
 *     ggml_opt_get_optimizer_params get_opt_pars;
 *     void *get_opt_pars_ud;
 * }
 * }
 */
public class llama_opt_params {

    llama_opt_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_INT.withName("n_ctx_train"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_POINTER.withName("param_filter"),
        llama_h.C_POINTER.withName("param_filter_ud"),
        llama_h.C_POINTER.withName("get_opt_pars"),
        llama_h.C_POINTER.withName("get_opt_pars_ud")
    ).withName("llama_opt_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt n_ctx_train$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_ctx_train"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t n_ctx_train
     * }
     */
    public static final OfInt n_ctx_train$layout() {
        return n_ctx_train$LAYOUT;
    }

    private static final long n_ctx_train$OFFSET = $LAYOUT.byteOffset(groupElement("n_ctx_train"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t n_ctx_train
     * }
     */
    public static final long n_ctx_train$offset() {
        return n_ctx_train$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t n_ctx_train
     * }
     */
    public static int n_ctx_train(MemorySegment struct) {
        return struct.get(n_ctx_train$LAYOUT, n_ctx_train$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t n_ctx_train
     * }
     */
    public static void n_ctx_train(MemorySegment struct, int fieldValue) {
        struct.set(n_ctx_train$LAYOUT, n_ctx_train$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * llama_opt_param_filter param_filter
     * }
     */
    public final static class param_filter {

        private param_filter() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(param_filter.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(param_filter.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout param_filter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("param_filter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * llama_opt_param_filter param_filter
     * }
     */
    public static final AddressLayout param_filter$layout() {
        return param_filter$LAYOUT;
    }

    private static final long param_filter$OFFSET = $LAYOUT.byteOffset(groupElement("param_filter"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * llama_opt_param_filter param_filter
     * }
     */
    public static final long param_filter$offset() {
        return param_filter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * llama_opt_param_filter param_filter
     * }
     */
    public static MemorySegment param_filter(MemorySegment struct) {
        return struct.get(param_filter$LAYOUT, param_filter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * llama_opt_param_filter param_filter
     * }
     */
    public static void param_filter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(param_filter$LAYOUT, param_filter$OFFSET, fieldValue);
    }

    private static final AddressLayout param_filter_ud$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("param_filter_ud"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *param_filter_ud
     * }
     */
    public static final AddressLayout param_filter_ud$layout() {
        return param_filter_ud$LAYOUT;
    }

    private static final long param_filter_ud$OFFSET = $LAYOUT.byteOffset(groupElement("param_filter_ud"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *param_filter_ud
     * }
     */
    public static final long param_filter_ud$offset() {
        return param_filter_ud$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *param_filter_ud
     * }
     */
    public static MemorySegment param_filter_ud(MemorySegment struct) {
        return struct.get(param_filter_ud$LAYOUT, param_filter_ud$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *param_filter_ud
     * }
     */
    public static void param_filter_ud(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(param_filter_ud$LAYOUT, param_filter_ud$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public final static class get_opt_pars {

        private get_opt_pars() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            ggml_opt_optimizer_params.layout(),
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(get_opt_pars.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_opt_pars.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, SegmentAllocator alloc, MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, alloc, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_opt_pars$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_opt_pars"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static final AddressLayout get_opt_pars$layout() {
        return get_opt_pars$LAYOUT;
    }

    private static final long get_opt_pars$OFFSET = $LAYOUT.byteOffset(groupElement("get_opt_pars"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static final long get_opt_pars$offset() {
        return get_opt_pars$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static MemorySegment get_opt_pars(MemorySegment struct) {
        return struct.get(get_opt_pars$LAYOUT, get_opt_pars$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_opt_get_optimizer_params get_opt_pars
     * }
     */
    public static void get_opt_pars(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_opt_pars$LAYOUT, get_opt_pars$OFFSET, fieldValue);
    }

    private static final AddressLayout get_opt_pars_ud$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_opt_pars_ud"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static final AddressLayout get_opt_pars_ud$layout() {
        return get_opt_pars_ud$LAYOUT;
    }

    private static final long get_opt_pars_ud$OFFSET = $LAYOUT.byteOffset(groupElement("get_opt_pars_ud"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static final long get_opt_pars_ud$offset() {
        return get_opt_pars_ud$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static MemorySegment get_opt_pars_ud(MemorySegment struct) {
        return struct.get(get_opt_pars_ud$LAYOUT, get_opt_pars_ud$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *get_opt_pars_ud
     * }
     */
    public static void get_opt_pars_ud(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_opt_pars_ud$LAYOUT, get_opt_pars_ud$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

