// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_backend_graph_copy {
 *     ggml_backend_buffer_t buffer;
 *     struct ggml_context *ctx_allocated;
 *     struct ggml_context *ctx_unallocated;
 *     struct ggml_cgraph *graph;
 * }
 * }
 */
public class ggml_backend_graph_copy {

    ggml_backend_graph_copy() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_POINTER.withName("buffer"),
        llama_h.C_POINTER.withName("ctx_allocated"),
        llama_h.C_POINTER.withName("ctx_unallocated"),
        llama_h.C_POINTER.withName("graph")
    ).withName("ggml_backend_graph_copy");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_backend_buffer_t buffer
     * }
     */
    public static final AddressLayout buffer$layout() {
        return buffer$LAYOUT;
    }

    private static final long buffer$OFFSET = $LAYOUT.byteOffset(groupElement("buffer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_backend_buffer_t buffer
     * }
     */
    public static final long buffer$offset() {
        return buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_backend_buffer_t buffer
     * }
     */
    public static MemorySegment buffer(MemorySegment struct) {
        return struct.get(buffer$LAYOUT, buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_backend_buffer_t buffer
     * }
     */
    public static void buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(buffer$LAYOUT, buffer$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx_allocated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx_allocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_allocated
     * }
     */
    public static final AddressLayout ctx_allocated$layout() {
        return ctx_allocated$LAYOUT;
    }

    private static final long ctx_allocated$OFFSET = $LAYOUT.byteOffset(groupElement("ctx_allocated"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_allocated
     * }
     */
    public static final long ctx_allocated$offset() {
        return ctx_allocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_allocated
     * }
     */
    public static MemorySegment ctx_allocated(MemorySegment struct) {
        return struct.get(ctx_allocated$LAYOUT, ctx_allocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_allocated
     * }
     */
    public static void ctx_allocated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx_allocated$LAYOUT, ctx_allocated$OFFSET, fieldValue);
    }

    private static final AddressLayout ctx_unallocated$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ctx_unallocated"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_unallocated
     * }
     */
    public static final AddressLayout ctx_unallocated$layout() {
        return ctx_unallocated$LAYOUT;
    }

    private static final long ctx_unallocated$OFFSET = $LAYOUT.byteOffset(groupElement("ctx_unallocated"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_unallocated
     * }
     */
    public static final long ctx_unallocated$offset() {
        return ctx_unallocated$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_unallocated
     * }
     */
    public static MemorySegment ctx_unallocated(MemorySegment struct) {
        return struct.get(ctx_unallocated$LAYOUT, ctx_unallocated$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_context *ctx_unallocated
     * }
     */
    public static void ctx_unallocated(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ctx_unallocated$LAYOUT, ctx_unallocated$OFFSET, fieldValue);
    }

    private static final AddressLayout graph$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("graph"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_cgraph *graph
     * }
     */
    public static final AddressLayout graph$layout() {
        return graph$LAYOUT;
    }

    private static final long graph$OFFSET = $LAYOUT.byteOffset(groupElement("graph"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_cgraph *graph
     * }
     */
    public static final long graph$offset() {
        return graph$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_cgraph *graph
     * }
     */
    public static MemorySegment graph(MemorySegment struct) {
        return struct.get(graph$LAYOUT, graph$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_cgraph *graph
     * }
     */
    public static void graph(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(graph$LAYOUT, graph$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

