// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

class llama_h_1 extends llama_h$shared {

    llama_h_1() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    private static final int __bool_true_false_are_defined = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return __bool_true_false_are_defined;
    }
    private static final int true_ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define true 1
     * }
     */
    public static int true_() {
        return true_;
    }
    private static final int false_ = (int)0L;
    /**
     * {@snippet lang=c :
     * #define false 0
     * }
     */
    public static int false_() {
        return false_;
    }
    private static final int __WORDSIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return __WORDSIZE;
    }
    private static final int __has_safe_buffers = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __has_safe_buffers 1
     * }
     */
    public static int __has_safe_buffers() {
        return __has_safe_buffers;
    }
    private static final int __DARWIN_ONLY_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return __DARWIN_ONLY_64_BIT_INO_T;
    }
    private static final int __DARWIN_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return __DARWIN_ONLY_UNIX_CONFORMANCE;
    }
    private static final int __DARWIN_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_ONLY_VERS_1050 1
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return __DARWIN_ONLY_VERS_1050;
    }
    private static final int __DARWIN_UNIX03 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return __DARWIN_UNIX03;
    }
    private static final int __DARWIN_64_BIT_INO_T = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return __DARWIN_64_BIT_INO_T;
    }
    private static final int __DARWIN_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return __DARWIN_VERS_1050;
    }
    private static final int __DARWIN_NON_CANCELABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return __DARWIN_NON_CANCELABLE;
    }
    private static final int __STDC_WANT_LIB_EXT1__ = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return __STDC_WANT_LIB_EXT1__;
    }
    private static final int __DARWIN_NO_LONG_LONG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return __DARWIN_NO_LONG_LONG;
    }
    private static final int _DARWIN_FEATURE_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return _DARWIN_FEATURE_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_64_BIT_INODE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_64_BIT_INODE() {
        return _DARWIN_FEATURE_ONLY_64_BIT_INODE;
    }
    private static final int _DARWIN_FEATURE_ONLY_VERS_1050 = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_VERS_1050 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_VERS_1050() {
        return _DARWIN_FEATURE_ONLY_VERS_1050;
    }
    private static final int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
    }
    private static final int _DARWIN_FEATURE_UNIX_CONFORMANCE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return _DARWIN_FEATURE_UNIX_CONFORMANCE;
    }
    private static final int __has_ptrcheck = (int)0L;
    /**
     * {@snippet lang=c :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return __has_ptrcheck;
    }
    private static final int USE_CLANG_TYPES = (int)0L;
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_TYPES 0
     * }
     */
    public static int USE_CLANG_TYPES() {
        return USE_CLANG_TYPES;
    }
    private static final int __PTHREAD_SIZE__ = (int)8176L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return __PTHREAD_SIZE__;
    }
    private static final int __PTHREAD_ATTR_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return __PTHREAD_ATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEXATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return __PTHREAD_MUTEXATTR_SIZE__;
    }
    private static final int __PTHREAD_MUTEX_SIZE__ = (int)56L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return __PTHREAD_MUTEX_SIZE__;
    }
    private static final int __PTHREAD_CONDATTR_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return __PTHREAD_CONDATTR_SIZE__;
    }
    private static final int __PTHREAD_COND_SIZE__ = (int)40L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return __PTHREAD_COND_SIZE__;
    }
    private static final int __PTHREAD_ONCE_SIZE__ = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return __PTHREAD_ONCE_SIZE__;
    }
    private static final int __PTHREAD_RWLOCK_SIZE__ = (int)192L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return __PTHREAD_RWLOCK_SIZE__;
    }
    private static final int __PTHREAD_RWLOCKATTR_SIZE__ = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return __PTHREAD_RWLOCKATTR_SIZE__;
    }
    private static final int INT8_MAX = (int)127L;
    /**
     * {@snippet lang=c :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return INT8_MAX;
    }
    private static final int INT16_MAX = (int)32767L;
    /**
     * {@snippet lang=c :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return INT16_MAX;
    }
    private static final int INT32_MAX = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return INT32_MAX;
    }
    private static final int UINT8_MAX = (int)255L;
    /**
     * {@snippet lang=c :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return UINT8_MAX;
    }
    private static final int UINT16_MAX = (int)65535L;
    /**
     * {@snippet lang=c :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return UINT16_MAX;
    }
    private static final int __API_TO_BE_DEPRECATED = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return __API_TO_BE_DEPRECATED;
    }
    private static final int __API_TO_BE_DEPRECATED_MACOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return __API_TO_BE_DEPRECATED_MACOS;
    }
    private static final int __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_MACOSAPPLICATIONEXTENSION;
    }
    private static final int __API_TO_BE_DEPRECATED_IOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return __API_TO_BE_DEPRECATED_IOS;
    }
    private static final int __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_IOSAPPLICATIONEXTENSION;
    }
    private static final int __API_TO_BE_DEPRECATED_MACCATALYST = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return __API_TO_BE_DEPRECATED_MACCATALYST;
    }
    private static final int __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_MACCATALYSTAPPLICATIONEXTENSION;
    }
    private static final int __API_TO_BE_DEPRECATED_WATCHOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return __API_TO_BE_DEPRECATED_WATCHOS;
    }
    private static final int __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_WATCHOSAPPLICATIONEXTENSION;
    }
    private static final int __API_TO_BE_DEPRECATED_TVOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return __API_TO_BE_DEPRECATED_TVOS;
    }
    private static final int __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_TVOSAPPLICATIONEXTENSION;
    }
    private static final int __API_TO_BE_DEPRECATED_DRIVERKIT = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return __API_TO_BE_DEPRECATED_DRIVERKIT;
    }
    private static final int __API_TO_BE_DEPRECATED_VISIONOS = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_VISIONOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOS() {
        return __API_TO_BE_DEPRECATED_VISIONOS;
    }
    private static final int __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION() {
        return __API_TO_BE_DEPRECATED_VISIONOSAPPLICATIONEXTENSION;
    }
    private static final int __API_TO_BE_DEPRECATED_KERNELKIT = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __API_TO_BE_DEPRECATED_KERNELKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_KERNELKIT() {
        return __API_TO_BE_DEPRECATED_KERNELKIT;
    }
    private static final int __MAC_10_0 = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return __MAC_10_0;
    }
    private static final int __MAC_10_1 = (int)1010L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return __MAC_10_1;
    }
    private static final int __MAC_10_2 = (int)1020L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return __MAC_10_2;
    }
    private static final int __MAC_10_3 = (int)1030L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return __MAC_10_3;
    }
    private static final int __MAC_10_4 = (int)1040L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return __MAC_10_4;
    }
    private static final int __MAC_10_5 = (int)1050L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return __MAC_10_5;
    }
    private static final int __MAC_10_6 = (int)1060L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return __MAC_10_6;
    }
    private static final int __MAC_10_7 = (int)1070L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return __MAC_10_7;
    }
    private static final int __MAC_10_8 = (int)1080L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return __MAC_10_8;
    }
    private static final int __MAC_10_9 = (int)1090L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return __MAC_10_9;
    }
    private static final int __MAC_10_10 = (int)101000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return __MAC_10_10;
    }
    private static final int __MAC_10_10_2 = (int)101002L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return __MAC_10_10_2;
    }
    private static final int __MAC_10_10_3 = (int)101003L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return __MAC_10_10_3;
    }
    private static final int __MAC_10_11 = (int)101100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return __MAC_10_11;
    }
    private static final int __MAC_10_11_2 = (int)101102L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return __MAC_10_11_2;
    }
    private static final int __MAC_10_11_3 = (int)101103L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return __MAC_10_11_3;
    }
    private static final int __MAC_10_11_4 = (int)101104L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return __MAC_10_11_4;
    }
    private static final int __MAC_10_12 = (int)101200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return __MAC_10_12;
    }
    private static final int __MAC_10_12_1 = (int)101201L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return __MAC_10_12_1;
    }
    private static final int __MAC_10_12_2 = (int)101202L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return __MAC_10_12_2;
    }
    private static final int __MAC_10_12_4 = (int)101204L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return __MAC_10_12_4;
    }
    private static final int __MAC_10_13 = (int)101300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return __MAC_10_13;
    }
    private static final int __MAC_10_13_1 = (int)101301L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return __MAC_10_13_1;
    }
    private static final int __MAC_10_13_2 = (int)101302L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return __MAC_10_13_2;
    }
    private static final int __MAC_10_13_4 = (int)101304L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return __MAC_10_13_4;
    }
    private static final int __MAC_10_14 = (int)101400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return __MAC_10_14;
    }
    private static final int __MAC_10_14_1 = (int)101401L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return __MAC_10_14_1;
    }
    private static final int __MAC_10_14_4 = (int)101404L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return __MAC_10_14_4;
    }
    private static final int __MAC_10_14_5 = (int)101405L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_5 101405
     * }
     */
    public static int __MAC_10_14_5() {
        return __MAC_10_14_5;
    }
    private static final int __MAC_10_14_6 = (int)101406L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return __MAC_10_14_6;
    }
    private static final int __MAC_10_15 = (int)101500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return __MAC_10_15;
    }
    private static final int __MAC_10_15_1 = (int)101501L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return __MAC_10_15_1;
    }
    private static final int __MAC_10_15_4 = (int)101504L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return __MAC_10_15_4;
    }
    private static final int __MAC_10_16 = (int)101600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return __MAC_10_16;
    }
    private static final int __MAC_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return __MAC_11_0;
    }
    private static final int __MAC_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return __MAC_11_1;
    }
    private static final int __MAC_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return __MAC_11_3;
    }
    private static final int __MAC_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return __MAC_11_4;
    }
    private static final int __MAC_11_5 = (int)110500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return __MAC_11_5;
    }
    private static final int __MAC_11_6 = (int)110600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return __MAC_11_6;
    }
    private static final int __MAC_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return __MAC_12_0;
    }
    private static final int __MAC_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return __MAC_12_1;
    }
    private static final int __MAC_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return __MAC_12_2;
    }
    private static final int __MAC_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return __MAC_12_3;
    }
    private static final int __MAC_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_4 120400
     * }
     */
    public static int __MAC_12_4() {
        return __MAC_12_4;
    }
    private static final int __MAC_12_5 = (int)120500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_5 120500
     * }
     */
    public static int __MAC_12_5() {
        return __MAC_12_5;
    }
    private static final int __MAC_12_6 = (int)120600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_6 120600
     * }
     */
    public static int __MAC_12_6() {
        return __MAC_12_6;
    }
    private static final int __MAC_12_7 = (int)120700L;
    /**
     * {@snippet lang=c :
     * #define __MAC_12_7 120700
     * }
     */
    public static int __MAC_12_7() {
        return __MAC_12_7;
    }
    private static final int __MAC_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return __MAC_13_0;
    }
    private static final int __MAC_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return __MAC_13_1;
    }
    private static final int __MAC_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return __MAC_13_2;
    }
    private static final int __MAC_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return __MAC_13_3;
    }
    private static final int __MAC_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_4 130400
     * }
     */
    public static int __MAC_13_4() {
        return __MAC_13_4;
    }
    private static final int __MAC_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_5 130500
     * }
     */
    public static int __MAC_13_5() {
        return __MAC_13_5;
    }
    private static final int __MAC_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_6 130600
     * }
     */
    public static int __MAC_13_6() {
        return __MAC_13_6;
    }
    private static final int __MAC_13_7 = (int)130700L;
    /**
     * {@snippet lang=c :
     * #define __MAC_13_7 130700
     * }
     */
    public static int __MAC_13_7() {
        return __MAC_13_7;
    }
    private static final int __MAC_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_0 140000
     * }
     */
    public static int __MAC_14_0() {
        return __MAC_14_0;
    }
    private static final int __MAC_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_1 140100
     * }
     */
    public static int __MAC_14_1() {
        return __MAC_14_1;
    }
    private static final int __MAC_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_2 140200
     * }
     */
    public static int __MAC_14_2() {
        return __MAC_14_2;
    }
    private static final int __MAC_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_3 140300
     * }
     */
    public static int __MAC_14_3() {
        return __MAC_14_3;
    }
    private static final int __MAC_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_4 140400
     * }
     */
    public static int __MAC_14_4() {
        return __MAC_14_4;
    }
    private static final int __MAC_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_5 140500
     * }
     */
    public static int __MAC_14_5() {
        return __MAC_14_5;
    }
    private static final int __MAC_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_6 140600
     * }
     */
    public static int __MAC_14_6() {
        return __MAC_14_6;
    }
    private static final int __MAC_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __MAC_14_7 140700
     * }
     */
    public static int __MAC_14_7() {
        return __MAC_14_7;
    }
    private static final int __MAC_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __MAC_15_0 150000
     * }
     */
    public static int __MAC_15_0() {
        return __MAC_15_0;
    }
    private static final int __MAC_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __MAC_15_1 150100
     * }
     */
    public static int __MAC_15_1() {
        return __MAC_15_1;
    }
    private static final int __MAC_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __MAC_15_2 150200
     * }
     */
    public static int __MAC_15_2() {
        return __MAC_15_2;
    }
    private static final int __MAC_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __MAC_15_3 150300
     * }
     */
    public static int __MAC_15_3() {
        return __MAC_15_3;
    }
    private static final int __MAC_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __MAC_15_4 150400
     * }
     */
    public static int __MAC_15_4() {
        return __MAC_15_4;
    }
    private static final int __IPHONE_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return __IPHONE_2_0;
    }
    private static final int __IPHONE_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return __IPHONE_2_1;
    }
    private static final int __IPHONE_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return __IPHONE_2_2;
    }
    private static final int __IPHONE_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return __IPHONE_3_0;
    }
    private static final int __IPHONE_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return __IPHONE_3_1;
    }
    private static final int __IPHONE_3_2 = (int)30200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return __IPHONE_3_2;
    }
    private static final int __IPHONE_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return __IPHONE_4_0;
    }
    private static final int __IPHONE_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return __IPHONE_4_1;
    }
    private static final int __IPHONE_4_2 = (int)40200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return __IPHONE_4_2;
    }
    private static final int __IPHONE_4_3 = (int)40300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return __IPHONE_4_3;
    }
    private static final int __IPHONE_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return __IPHONE_5_0;
    }
    private static final int __IPHONE_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return __IPHONE_5_1;
    }
    private static final int __IPHONE_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return __IPHONE_6_0;
    }
    private static final int __IPHONE_6_1 = (int)60100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return __IPHONE_6_1;
    }
    private static final int __IPHONE_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return __IPHONE_7_0;
    }
    private static final int __IPHONE_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return __IPHONE_7_1;
    }
    private static final int __IPHONE_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return __IPHONE_8_0;
    }
    private static final int __IPHONE_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return __IPHONE_8_1;
    }
    private static final int __IPHONE_8_2 = (int)80200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return __IPHONE_8_2;
    }
    private static final int __IPHONE_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return __IPHONE_8_3;
    }
    private static final int __IPHONE_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return __IPHONE_8_4;
    }
    private static final int __IPHONE_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return __IPHONE_9_0;
    }
    private static final int __IPHONE_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return __IPHONE_9_1;
    }
    private static final int __IPHONE_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return __IPHONE_9_2;
    }
    private static final int __IPHONE_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return __IPHONE_9_3;
    }
    private static final int __IPHONE_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return __IPHONE_10_0;
    }
    private static final int __IPHONE_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return __IPHONE_10_1;
    }
    private static final int __IPHONE_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return __IPHONE_10_2;
    }
    private static final int __IPHONE_10_3 = (int)100300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return __IPHONE_10_3;
    }
    private static final int __IPHONE_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return __IPHONE_11_0;
    }
    private static final int __IPHONE_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return __IPHONE_11_1;
    }
    private static final int __IPHONE_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return __IPHONE_11_2;
    }
    private static final int __IPHONE_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return __IPHONE_11_3;
    }
    private static final int __IPHONE_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return __IPHONE_11_4;
    }
    private static final int __IPHONE_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return __IPHONE_12_0;
    }
    private static final int __IPHONE_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return __IPHONE_12_1;
    }
    private static final int __IPHONE_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return __IPHONE_12_2;
    }
    private static final int __IPHONE_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return __IPHONE_12_3;
    }
    private static final int __IPHONE_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return __IPHONE_12_4;
    }
    private static final int __IPHONE_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return __IPHONE_13_0;
    }
    private static final int __IPHONE_13_1 = (int)130100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return __IPHONE_13_1;
    }
    private static final int __IPHONE_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return __IPHONE_13_2;
    }
    private static final int __IPHONE_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return __IPHONE_13_3;
    }
    private static final int __IPHONE_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return __IPHONE_13_4;
    }
    private static final int __IPHONE_13_5 = (int)130500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return __IPHONE_13_5;
    }
    private static final int __IPHONE_13_6 = (int)130600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return __IPHONE_13_6;
    }
    private static final int __IPHONE_13_7 = (int)130700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return __IPHONE_13_7;
    }
    private static final int __IPHONE_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return __IPHONE_14_0;
    }
    private static final int __IPHONE_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return __IPHONE_14_1;
    }
    private static final int __IPHONE_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return __IPHONE_14_2;
    }
    private static final int __IPHONE_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return __IPHONE_14_3;
    }
    private static final int __IPHONE_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return __IPHONE_14_5;
    }
    private static final int __IPHONE_14_4 = (int)140400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_4 140400
     * }
     */
    public static int __IPHONE_14_4() {
        return __IPHONE_14_4;
    }
    private static final int __IPHONE_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return __IPHONE_14_6;
    }
    private static final int __IPHONE_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return __IPHONE_14_7;
    }
    private static final int __IPHONE_14_8 = (int)140800L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return __IPHONE_14_8;
    }
    private static final int __IPHONE_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return __IPHONE_15_0;
    }
    private static final int __IPHONE_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return __IPHONE_15_1;
    }
    private static final int __IPHONE_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return __IPHONE_15_2;
    }
    private static final int __IPHONE_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return __IPHONE_15_3;
    }
    private static final int __IPHONE_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return __IPHONE_15_4;
    }
    private static final int __IPHONE_15_5 = (int)150500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_5 150500
     * }
     */
    public static int __IPHONE_15_5() {
        return __IPHONE_15_5;
    }
    private static final int __IPHONE_15_6 = (int)150600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_6 150600
     * }
     */
    public static int __IPHONE_15_6() {
        return __IPHONE_15_6;
    }
    private static final int __IPHONE_15_7 = (int)150700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_7 150700
     * }
     */
    public static int __IPHONE_15_7() {
        return __IPHONE_15_7;
    }
    private static final int __IPHONE_15_8 = (int)150800L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_15_8 150800
     * }
     */
    public static int __IPHONE_15_8() {
        return __IPHONE_15_8;
    }
    private static final int __IPHONE_16_0 = (int)160000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return __IPHONE_16_0;
    }
    private static final int __IPHONE_16_1 = (int)160100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return __IPHONE_16_1;
    }
    private static final int __IPHONE_16_2 = (int)160200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return __IPHONE_16_2;
    }
    private static final int __IPHONE_16_3 = (int)160300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return __IPHONE_16_3;
    }
    private static final int __IPHONE_16_4 = (int)160400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return __IPHONE_16_4;
    }
    private static final int __IPHONE_16_5 = (int)160500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_5 160500
     * }
     */
    public static int __IPHONE_16_5() {
        return __IPHONE_16_5;
    }
    private static final int __IPHONE_16_6 = (int)160600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_6 160600
     * }
     */
    public static int __IPHONE_16_6() {
        return __IPHONE_16_6;
    }
    private static final int __IPHONE_16_7 = (int)160700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_16_7 160700
     * }
     */
    public static int __IPHONE_16_7() {
        return __IPHONE_16_7;
    }
    private static final int __IPHONE_17_0 = (int)170000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_0 170000
     * }
     */
    public static int __IPHONE_17_0() {
        return __IPHONE_17_0;
    }
    private static final int __IPHONE_17_1 = (int)170100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_1 170100
     * }
     */
    public static int __IPHONE_17_1() {
        return __IPHONE_17_1;
    }
    private static final int __IPHONE_17_2 = (int)170200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_2 170200
     * }
     */
    public static int __IPHONE_17_2() {
        return __IPHONE_17_2;
    }
    private static final int __IPHONE_17_3 = (int)170300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_3 170300
     * }
     */
    public static int __IPHONE_17_3() {
        return __IPHONE_17_3;
    }
    private static final int __IPHONE_17_4 = (int)170400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_4 170400
     * }
     */
    public static int __IPHONE_17_4() {
        return __IPHONE_17_4;
    }
    private static final int __IPHONE_17_5 = (int)170500L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_5 170500
     * }
     */
    public static int __IPHONE_17_5() {
        return __IPHONE_17_5;
    }
    private static final int __IPHONE_17_6 = (int)170600L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_6 170600
     * }
     */
    public static int __IPHONE_17_6() {
        return __IPHONE_17_6;
    }
    private static final int __IPHONE_17_7 = (int)170700L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_17_7 170700
     * }
     */
    public static int __IPHONE_17_7() {
        return __IPHONE_17_7;
    }
    private static final int __IPHONE_18_0 = (int)180000L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_0 180000
     * }
     */
    public static int __IPHONE_18_0() {
        return __IPHONE_18_0;
    }
    private static final int __IPHONE_18_1 = (int)180100L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_1 180100
     * }
     */
    public static int __IPHONE_18_1() {
        return __IPHONE_18_1;
    }
    private static final int __IPHONE_18_2 = (int)180200L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_2 180200
     * }
     */
    public static int __IPHONE_18_2() {
        return __IPHONE_18_2;
    }
    private static final int __IPHONE_18_3 = (int)180300L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_3 180300
     * }
     */
    public static int __IPHONE_18_3() {
        return __IPHONE_18_3;
    }
    private static final int __IPHONE_18_4 = (int)180400L;
    /**
     * {@snippet lang=c :
     * #define __IPHONE_18_4 180400
     * }
     */
    public static int __IPHONE_18_4() {
        return __IPHONE_18_4;
    }
    private static final int __WATCHOS_1_0 = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return __WATCHOS_1_0;
    }
    private static final int __WATCHOS_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return __WATCHOS_2_0;
    }
    private static final int __WATCHOS_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return __WATCHOS_2_1;
    }
    private static final int __WATCHOS_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return __WATCHOS_2_2;
    }
    private static final int __WATCHOS_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return __WATCHOS_3_0;
    }
    private static final int __WATCHOS_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return __WATCHOS_3_1;
    }
    private static final int __WATCHOS_3_1_1 = (int)30101L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return __WATCHOS_3_1_1;
    }
    private static final int __WATCHOS_3_2 = (int)30200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return __WATCHOS_3_2;
    }
    private static final int __WATCHOS_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return __WATCHOS_4_0;
    }
    private static final int __WATCHOS_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return __WATCHOS_4_1;
    }
    private static final int __WATCHOS_4_2 = (int)40200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return __WATCHOS_4_2;
    }
    private static final int __WATCHOS_4_3 = (int)40300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return __WATCHOS_4_3;
    }
    private static final int __WATCHOS_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return __WATCHOS_5_0;
    }
    private static final int __WATCHOS_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return __WATCHOS_5_1;
    }
    private static final int __WATCHOS_5_2 = (int)50200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return __WATCHOS_5_2;
    }
    private static final int __WATCHOS_5_3 = (int)50300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return __WATCHOS_5_3;
    }
    private static final int __WATCHOS_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return __WATCHOS_6_0;
    }
    private static final int __WATCHOS_6_1 = (int)60100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return __WATCHOS_6_1;
    }
    private static final int __WATCHOS_6_2 = (int)60200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return __WATCHOS_6_2;
    }
    private static final int __WATCHOS_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return __WATCHOS_7_0;
    }
    private static final int __WATCHOS_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return __WATCHOS_7_1;
    }
    private static final int __WATCHOS_7_2 = (int)70200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return __WATCHOS_7_2;
    }
    private static final int __WATCHOS_7_3 = (int)70300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return __WATCHOS_7_3;
    }
    private static final int __WATCHOS_7_4 = (int)70400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return __WATCHOS_7_4;
    }
    private static final int __WATCHOS_7_5 = (int)70500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return __WATCHOS_7_5;
    }
    private static final int __WATCHOS_7_6 = (int)70600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return __WATCHOS_7_6;
    }
    private static final int __WATCHOS_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return __WATCHOS_8_0;
    }
    private static final int __WATCHOS_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return __WATCHOS_8_1;
    }
    private static final int __WATCHOS_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return __WATCHOS_8_3;
    }
    private static final int __WATCHOS_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return __WATCHOS_8_4;
    }
    private static final int __WATCHOS_8_5 = (int)80500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return __WATCHOS_8_5;
    }
    private static final int __WATCHOS_8_6 = (int)80600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_6 80600
     * }
     */
    public static int __WATCHOS_8_6() {
        return __WATCHOS_8_6;
    }
    private static final int __WATCHOS_8_7 = (int)80700L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_7 80700
     * }
     */
    public static int __WATCHOS_8_7() {
        return __WATCHOS_8_7;
    }
    private static final int __WATCHOS_8_8 = (int)80800L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_8_8 80800
     * }
     */
    public static int __WATCHOS_8_8() {
        return __WATCHOS_8_8;
    }
    private static final int __WATCHOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return __WATCHOS_9_0;
    }
    private static final int __WATCHOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return __WATCHOS_9_1;
    }
    private static final int __WATCHOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return __WATCHOS_9_2;
    }
    private static final int __WATCHOS_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return __WATCHOS_9_3;
    }
    private static final int __WATCHOS_9_4 = (int)90400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return __WATCHOS_9_4;
    }
    private static final int __WATCHOS_9_5 = (int)90500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_5 90500
     * }
     */
    public static int __WATCHOS_9_5() {
        return __WATCHOS_9_5;
    }
    private static final int __WATCHOS_9_6 = (int)90600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_9_6 90600
     * }
     */
    public static int __WATCHOS_9_6() {
        return __WATCHOS_9_6;
    }
    private static final int __WATCHOS_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_0 100000
     * }
     */
    public static int __WATCHOS_10_0() {
        return __WATCHOS_10_0;
    }
    private static final int __WATCHOS_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_1 100100
     * }
     */
    public static int __WATCHOS_10_1() {
        return __WATCHOS_10_1;
    }
    private static final int __WATCHOS_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_2 100200
     * }
     */
    public static int __WATCHOS_10_2() {
        return __WATCHOS_10_2;
    }
    private static final int __WATCHOS_10_3 = (int)100300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_3 100300
     * }
     */
    public static int __WATCHOS_10_3() {
        return __WATCHOS_10_3;
    }
    private static final int __WATCHOS_10_4 = (int)100400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_4 100400
     * }
     */
    public static int __WATCHOS_10_4() {
        return __WATCHOS_10_4;
    }
    private static final int __WATCHOS_10_5 = (int)100500L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_5 100500
     * }
     */
    public static int __WATCHOS_10_5() {
        return __WATCHOS_10_5;
    }
    private static final int __WATCHOS_10_6 = (int)100600L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_6 100600
     * }
     */
    public static int __WATCHOS_10_6() {
        return __WATCHOS_10_6;
    }
    private static final int __WATCHOS_10_7 = (int)100700L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_10_7 100700
     * }
     */
    public static int __WATCHOS_10_7() {
        return __WATCHOS_10_7;
    }
    private static final int __WATCHOS_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_0 110000
     * }
     */
    public static int __WATCHOS_11_0() {
        return __WATCHOS_11_0;
    }
    private static final int __WATCHOS_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_1 110100
     * }
     */
    public static int __WATCHOS_11_1() {
        return __WATCHOS_11_1;
    }
    private static final int __WATCHOS_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_2 110200
     * }
     */
    public static int __WATCHOS_11_2() {
        return __WATCHOS_11_2;
    }
    private static final int __WATCHOS_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_3 110300
     * }
     */
    public static int __WATCHOS_11_3() {
        return __WATCHOS_11_3;
    }
    private static final int __WATCHOS_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __WATCHOS_11_4 110400
     * }
     */
    public static int __WATCHOS_11_4() {
        return __WATCHOS_11_4;
    }
    private static final int __TVOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return __TVOS_9_0;
    }
    private static final int __TVOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return __TVOS_9_1;
    }
    private static final int __TVOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return __TVOS_9_2;
    }
    private static final int __TVOS_10_0 = (int)100000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return __TVOS_10_0;
    }
    private static final int __TVOS_10_0_1 = (int)100001L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return __TVOS_10_0_1;
    }
    private static final int __TVOS_10_1 = (int)100100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return __TVOS_10_1;
    }
    private static final int __TVOS_10_2 = (int)100200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return __TVOS_10_2;
    }
    private static final int __TVOS_11_0 = (int)110000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return __TVOS_11_0;
    }
    private static final int __TVOS_11_1 = (int)110100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return __TVOS_11_1;
    }
    private static final int __TVOS_11_2 = (int)110200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return __TVOS_11_2;
    }
    private static final int __TVOS_11_3 = (int)110300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return __TVOS_11_3;
    }
    private static final int __TVOS_11_4 = (int)110400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return __TVOS_11_4;
    }
    private static final int __TVOS_12_0 = (int)120000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return __TVOS_12_0;
    }
    private static final int __TVOS_12_1 = (int)120100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return __TVOS_12_1;
    }
    private static final int __TVOS_12_2 = (int)120200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return __TVOS_12_2;
    }
    private static final int __TVOS_12_3 = (int)120300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return __TVOS_12_3;
    }
    private static final int __TVOS_12_4 = (int)120400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return __TVOS_12_4;
    }
    private static final int __TVOS_13_0 = (int)130000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return __TVOS_13_0;
    }
    private static final int __TVOS_13_2 = (int)130200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return __TVOS_13_2;
    }
    private static final int __TVOS_13_3 = (int)130300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return __TVOS_13_3;
    }
    private static final int __TVOS_13_4 = (int)130400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return __TVOS_13_4;
    }
    private static final int __TVOS_14_0 = (int)140000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return __TVOS_14_0;
    }
    private static final int __TVOS_14_1 = (int)140100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return __TVOS_14_1;
    }
    private static final int __TVOS_14_2 = (int)140200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return __TVOS_14_2;
    }
    private static final int __TVOS_14_3 = (int)140300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return __TVOS_14_3;
    }
    private static final int __TVOS_14_5 = (int)140500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return __TVOS_14_5;
    }
    private static final int __TVOS_14_6 = (int)140600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return __TVOS_14_6;
    }
    private static final int __TVOS_14_7 = (int)140700L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return __TVOS_14_7;
    }
    private static final int __TVOS_15_0 = (int)150000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return __TVOS_15_0;
    }
    private static final int __TVOS_15_1 = (int)150100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return __TVOS_15_1;
    }
    private static final int __TVOS_15_2 = (int)150200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return __TVOS_15_2;
    }
    private static final int __TVOS_15_3 = (int)150300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return __TVOS_15_3;
    }
    private static final int __TVOS_15_4 = (int)150400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return __TVOS_15_4;
    }
    private static final int __TVOS_15_5 = (int)150500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_5 150500
     * }
     */
    public static int __TVOS_15_5() {
        return __TVOS_15_5;
    }
    private static final int __TVOS_15_6 = (int)150600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_15_6 150600
     * }
     */
    public static int __TVOS_15_6() {
        return __TVOS_15_6;
    }
    private static final int __TVOS_16_0 = (int)160000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return __TVOS_16_0;
    }
    private static final int __TVOS_16_1 = (int)160100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return __TVOS_16_1;
    }
    private static final int __TVOS_16_2 = (int)160200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return __TVOS_16_2;
    }
    private static final int __TVOS_16_3 = (int)160300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return __TVOS_16_3;
    }
    private static final int __TVOS_16_4 = (int)160400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return __TVOS_16_4;
    }
    private static final int __TVOS_16_5 = (int)160500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_5 160500
     * }
     */
    public static int __TVOS_16_5() {
        return __TVOS_16_5;
    }
    private static final int __TVOS_16_6 = (int)160600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_16_6 160600
     * }
     */
    public static int __TVOS_16_6() {
        return __TVOS_16_6;
    }
    private static final int __TVOS_17_0 = (int)170000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_0 170000
     * }
     */
    public static int __TVOS_17_0() {
        return __TVOS_17_0;
    }
    private static final int __TVOS_17_1 = (int)170100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_1 170100
     * }
     */
    public static int __TVOS_17_1() {
        return __TVOS_17_1;
    }
    private static final int __TVOS_17_2 = (int)170200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_2 170200
     * }
     */
    public static int __TVOS_17_2() {
        return __TVOS_17_2;
    }
    private static final int __TVOS_17_3 = (int)170300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_3 170300
     * }
     */
    public static int __TVOS_17_3() {
        return __TVOS_17_3;
    }
    private static final int __TVOS_17_4 = (int)170400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_4 170400
     * }
     */
    public static int __TVOS_17_4() {
        return __TVOS_17_4;
    }
    private static final int __TVOS_17_5 = (int)170500L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_5 170500
     * }
     */
    public static int __TVOS_17_5() {
        return __TVOS_17_5;
    }
    private static final int __TVOS_17_6 = (int)170600L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_17_6 170600
     * }
     */
    public static int __TVOS_17_6() {
        return __TVOS_17_6;
    }
    private static final int __TVOS_18_0 = (int)180000L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_0 180000
     * }
     */
    public static int __TVOS_18_0() {
        return __TVOS_18_0;
    }
    private static final int __TVOS_18_1 = (int)180100L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_1 180100
     * }
     */
    public static int __TVOS_18_1() {
        return __TVOS_18_1;
    }
    private static final int __TVOS_18_2 = (int)180200L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_2 180200
     * }
     */
    public static int __TVOS_18_2() {
        return __TVOS_18_2;
    }
    private static final int __TVOS_18_3 = (int)180300L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_3 180300
     * }
     */
    public static int __TVOS_18_3() {
        return __TVOS_18_3;
    }
    private static final int __TVOS_18_4 = (int)180400L;
    /**
     * {@snippet lang=c :
     * #define __TVOS_18_4 180400
     * }
     */
    public static int __TVOS_18_4() {
        return __TVOS_18_4;
    }
    private static final int __BRIDGEOS_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_2_0 20000
     * }
     */
    public static int __BRIDGEOS_2_0() {
        return __BRIDGEOS_2_0;
    }
    private static final int __BRIDGEOS_3_0 = (int)30000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_0 30000
     * }
     */
    public static int __BRIDGEOS_3_0() {
        return __BRIDGEOS_3_0;
    }
    private static final int __BRIDGEOS_3_1 = (int)30100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_1 30100
     * }
     */
    public static int __BRIDGEOS_3_1() {
        return __BRIDGEOS_3_1;
    }
    private static final int __BRIDGEOS_3_4 = (int)30400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_3_4 30400
     * }
     */
    public static int __BRIDGEOS_3_4() {
        return __BRIDGEOS_3_4;
    }
    private static final int __BRIDGEOS_4_0 = (int)40000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_4_0 40000
     * }
     */
    public static int __BRIDGEOS_4_0() {
        return __BRIDGEOS_4_0;
    }
    private static final int __BRIDGEOS_4_1 = (int)40100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_4_1 40100
     * }
     */
    public static int __BRIDGEOS_4_1() {
        return __BRIDGEOS_4_1;
    }
    private static final int __BRIDGEOS_5_0 = (int)50000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_0 50000
     * }
     */
    public static int __BRIDGEOS_5_0() {
        return __BRIDGEOS_5_0;
    }
    private static final int __BRIDGEOS_5_1 = (int)50100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_1 50100
     * }
     */
    public static int __BRIDGEOS_5_1() {
        return __BRIDGEOS_5_1;
    }
    private static final int __BRIDGEOS_5_3 = (int)50300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_5_3 50300
     * }
     */
    public static int __BRIDGEOS_5_3() {
        return __BRIDGEOS_5_3;
    }
    private static final int __BRIDGEOS_6_0 = (int)60000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_0 60000
     * }
     */
    public static int __BRIDGEOS_6_0() {
        return __BRIDGEOS_6_0;
    }
    private static final int __BRIDGEOS_6_2 = (int)60200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_2 60200
     * }
     */
    public static int __BRIDGEOS_6_2() {
        return __BRIDGEOS_6_2;
    }
    private static final int __BRIDGEOS_6_4 = (int)60400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_4 60400
     * }
     */
    public static int __BRIDGEOS_6_4() {
        return __BRIDGEOS_6_4;
    }
    private static final int __BRIDGEOS_6_5 = (int)60500L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_5 60500
     * }
     */
    public static int __BRIDGEOS_6_5() {
        return __BRIDGEOS_6_5;
    }
    private static final int __BRIDGEOS_6_6 = (int)60600L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_6_6 60600
     * }
     */
    public static int __BRIDGEOS_6_6() {
        return __BRIDGEOS_6_6;
    }
    private static final int __BRIDGEOS_7_0 = (int)70000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_0 70000
     * }
     */
    public static int __BRIDGEOS_7_0() {
        return __BRIDGEOS_7_0;
    }
    private static final int __BRIDGEOS_7_1 = (int)70100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_1 70100
     * }
     */
    public static int __BRIDGEOS_7_1() {
        return __BRIDGEOS_7_1;
    }
    private static final int __BRIDGEOS_7_2 = (int)70200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_2 70200
     * }
     */
    public static int __BRIDGEOS_7_2() {
        return __BRIDGEOS_7_2;
    }
    private static final int __BRIDGEOS_7_3 = (int)70300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_3 70300
     * }
     */
    public static int __BRIDGEOS_7_3() {
        return __BRIDGEOS_7_3;
    }
    private static final int __BRIDGEOS_7_4 = (int)70400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_4 70400
     * }
     */
    public static int __BRIDGEOS_7_4() {
        return __BRIDGEOS_7_4;
    }
    private static final int __BRIDGEOS_7_6 = (int)70600L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_7_6 70600
     * }
     */
    public static int __BRIDGEOS_7_6() {
        return __BRIDGEOS_7_6;
    }
    private static final int __BRIDGEOS_8_0 = (int)80000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_0 80000
     * }
     */
    public static int __BRIDGEOS_8_0() {
        return __BRIDGEOS_8_0;
    }
    private static final int __BRIDGEOS_8_1 = (int)80100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_1 80100
     * }
     */
    public static int __BRIDGEOS_8_1() {
        return __BRIDGEOS_8_1;
    }
    private static final int __BRIDGEOS_8_2 = (int)80200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_2 80200
     * }
     */
    public static int __BRIDGEOS_8_2() {
        return __BRIDGEOS_8_2;
    }
    private static final int __BRIDGEOS_8_3 = (int)80300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_3 80300
     * }
     */
    public static int __BRIDGEOS_8_3() {
        return __BRIDGEOS_8_3;
    }
    private static final int __BRIDGEOS_8_4 = (int)80400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_4 80400
     * }
     */
    public static int __BRIDGEOS_8_4() {
        return __BRIDGEOS_8_4;
    }
    private static final int __BRIDGEOS_8_5 = (int)80500L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_5 80500
     * }
     */
    public static int __BRIDGEOS_8_5() {
        return __BRIDGEOS_8_5;
    }
    private static final int __BRIDGEOS_8_6 = (int)80600L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_8_6 80600
     * }
     */
    public static int __BRIDGEOS_8_6() {
        return __BRIDGEOS_8_6;
    }
    private static final int __BRIDGEOS_9_0 = (int)90000L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_0 90000
     * }
     */
    public static int __BRIDGEOS_9_0() {
        return __BRIDGEOS_9_0;
    }
    private static final int __BRIDGEOS_9_1 = (int)90100L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_1 90100
     * }
     */
    public static int __BRIDGEOS_9_1() {
        return __BRIDGEOS_9_1;
    }
    private static final int __BRIDGEOS_9_2 = (int)90200L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_2 90200
     * }
     */
    public static int __BRIDGEOS_9_2() {
        return __BRIDGEOS_9_2;
    }
    private static final int __BRIDGEOS_9_3 = (int)90300L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_3 90300
     * }
     */
    public static int __BRIDGEOS_9_3() {
        return __BRIDGEOS_9_3;
    }
    private static final int __BRIDGEOS_9_4 = (int)90400L;
    /**
     * {@snippet lang=c :
     * #define __BRIDGEOS_9_4 90400
     * }
     */
    public static int __BRIDGEOS_9_4() {
        return __BRIDGEOS_9_4;
    }
    private static final int __DRIVERKIT_19_0 = (int)190000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return __DRIVERKIT_19_0;
    }
    private static final int __DRIVERKIT_20_0 = (int)200000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return __DRIVERKIT_20_0;
    }
    private static final int __DRIVERKIT_21_0 = (int)210000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return __DRIVERKIT_21_0;
    }
    private static final int __DRIVERKIT_22_0 = (int)220000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_0 220000
     * }
     */
    public static int __DRIVERKIT_22_0() {
        return __DRIVERKIT_22_0;
    }
    private static final int __DRIVERKIT_22_4 = (int)220400L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_4 220400
     * }
     */
    public static int __DRIVERKIT_22_4() {
        return __DRIVERKIT_22_4;
    }
    private static final int __DRIVERKIT_22_5 = (int)220500L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_5 220500
     * }
     */
    public static int __DRIVERKIT_22_5() {
        return __DRIVERKIT_22_5;
    }
    private static final int __DRIVERKIT_22_6 = (int)220600L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_22_6 220600
     * }
     */
    public static int __DRIVERKIT_22_6() {
        return __DRIVERKIT_22_6;
    }
    private static final int __DRIVERKIT_23_0 = (int)230000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_0 230000
     * }
     */
    public static int __DRIVERKIT_23_0() {
        return __DRIVERKIT_23_0;
    }
    private static final int __DRIVERKIT_23_1 = (int)230100L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_1 230100
     * }
     */
    public static int __DRIVERKIT_23_1() {
        return __DRIVERKIT_23_1;
    }
    private static final int __DRIVERKIT_23_2 = (int)230200L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_2 230200
     * }
     */
    public static int __DRIVERKIT_23_2() {
        return __DRIVERKIT_23_2;
    }
    private static final int __DRIVERKIT_23_3 = (int)230300L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_3 230300
     * }
     */
    public static int __DRIVERKIT_23_3() {
        return __DRIVERKIT_23_3;
    }
    private static final int __DRIVERKIT_23_4 = (int)230400L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_4 230400
     * }
     */
    public static int __DRIVERKIT_23_4() {
        return __DRIVERKIT_23_4;
    }
    private static final int __DRIVERKIT_23_5 = (int)230500L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_5 230500
     * }
     */
    public static int __DRIVERKIT_23_5() {
        return __DRIVERKIT_23_5;
    }
    private static final int __DRIVERKIT_23_6 = (int)230600L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_23_6 230600
     * }
     */
    public static int __DRIVERKIT_23_6() {
        return __DRIVERKIT_23_6;
    }
    private static final int __DRIVERKIT_24_0 = (int)240000L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_0 240000
     * }
     */
    public static int __DRIVERKIT_24_0() {
        return __DRIVERKIT_24_0;
    }
    private static final int __DRIVERKIT_24_1 = (int)240100L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_1 240100
     * }
     */
    public static int __DRIVERKIT_24_1() {
        return __DRIVERKIT_24_1;
    }
    private static final int __DRIVERKIT_24_2 = (int)240200L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_2 240200
     * }
     */
    public static int __DRIVERKIT_24_2() {
        return __DRIVERKIT_24_2;
    }
    private static final int __DRIVERKIT_24_3 = (int)240300L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_3 240300
     * }
     */
    public static int __DRIVERKIT_24_3() {
        return __DRIVERKIT_24_3;
    }
    private static final int __DRIVERKIT_24_4 = (int)240400L;
    /**
     * {@snippet lang=c :
     * #define __DRIVERKIT_24_4 240400
     * }
     */
    public static int __DRIVERKIT_24_4() {
        return __DRIVERKIT_24_4;
    }
    private static final int __VISIONOS_1_0 = (int)10000L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_0 10000
     * }
     */
    public static int __VISIONOS_1_0() {
        return __VISIONOS_1_0;
    }
    private static final int __VISIONOS_1_1 = (int)10100L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_1 10100
     * }
     */
    public static int __VISIONOS_1_1() {
        return __VISIONOS_1_1;
    }
    private static final int __VISIONOS_1_2 = (int)10200L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_2 10200
     * }
     */
    public static int __VISIONOS_1_2() {
        return __VISIONOS_1_2;
    }
    private static final int __VISIONOS_1_3 = (int)10300L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_1_3 10300
     * }
     */
    public static int __VISIONOS_1_3() {
        return __VISIONOS_1_3;
    }
    private static final int __VISIONOS_2_0 = (int)20000L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_0 20000
     * }
     */
    public static int __VISIONOS_2_0() {
        return __VISIONOS_2_0;
    }
    private static final int __VISIONOS_2_1 = (int)20100L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_1 20100
     * }
     */
    public static int __VISIONOS_2_1() {
        return __VISIONOS_2_1;
    }
    private static final int __VISIONOS_2_2 = (int)20200L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_2 20200
     * }
     */
    public static int __VISIONOS_2_2() {
        return __VISIONOS_2_2;
    }
    private static final int __VISIONOS_2_3 = (int)20300L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_3 20300
     * }
     */
    public static int __VISIONOS_2_3() {
        return __VISIONOS_2_3;
    }
    private static final int __VISIONOS_2_4 = (int)20400L;
    /**
     * {@snippet lang=c :
     * #define __VISIONOS_2_4 20400
     * }
     */
    public static int __VISIONOS_2_4() {
        return __VISIONOS_2_4;
    }
    private static final int __ENABLE_LEGACY_MAC_AVAILABILITY = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return __ENABLE_LEGACY_MAC_AVAILABILITY;
    }
    private static final int _FORTIFY_SOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _FORTIFY_SOURCE 2
     * }
     */
    public static int _FORTIFY_SOURCE() {
        return _FORTIFY_SOURCE;
    }
    private static final int USE_CLANG_STDARG = (int)0L;
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_STDARG 0
     * }
     */
    public static int USE_CLANG_STDARG() {
        return USE_CLANG_STDARG;
    }
    private static final int USE_CLANG_STDDEF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define USE_CLANG_STDDEF 0
     * }
     */
    public static int USE_CLANG_STDDEF() {
        return USE_CLANG_STDDEF;
    }
    private static final int RENAME_SECLUDE = (int)1L;
    /**
     * {@snippet lang=c :
     * #define RENAME_SECLUDE 1
     * }
     */
    public static int RENAME_SECLUDE() {
        return RENAME_SECLUDE;
    }
    private static final int RENAME_SWAP = (int)2L;
    /**
     * {@snippet lang=c :
     * #define RENAME_SWAP 2
     * }
     */
    public static int RENAME_SWAP() {
        return RENAME_SWAP;
    }
    private static final int RENAME_EXCL = (int)4L;
    /**
     * {@snippet lang=c :
     * #define RENAME_EXCL 4
     * }
     */
    public static int RENAME_EXCL() {
        return RENAME_EXCL;
    }
    private static final int RENAME_RESERVED1 = (int)8L;
    /**
     * {@snippet lang=c :
     * #define RENAME_RESERVED1 8
     * }
     */
    public static int RENAME_RESERVED1() {
        return RENAME_RESERVED1;
    }
    private static final int RENAME_NOFOLLOW_ANY = (int)16L;
    /**
     * {@snippet lang=c :
     * #define RENAME_NOFOLLOW_ANY 16
     * }
     */
    public static int RENAME_NOFOLLOW_ANY() {
        return RENAME_NOFOLLOW_ANY;
    }
    private static final int SEEK_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return SEEK_SET;
    }
    private static final int SEEK_CUR = (int)1L;
    /**
     * {@snippet lang=c :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return SEEK_CUR;
    }
    private static final int SEEK_END = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return SEEK_END;
    }
    private static final int SEEK_HOLE = (int)3L;
    /**
     * {@snippet lang=c :
     * #define SEEK_HOLE 3
     * }
     */
    public static int SEEK_HOLE() {
        return SEEK_HOLE;
    }
    private static final int SEEK_DATA = (int)4L;
    /**
     * {@snippet lang=c :
     * #define SEEK_DATA 4
     * }
     */
    public static int SEEK_DATA() {
        return SEEK_DATA;
    }
    private static final int __SLBF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define __SLBF 1
     * }
     */
    public static int __SLBF() {
        return __SLBF;
    }
    private static final int __SNBF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define __SNBF 2
     * }
     */
    public static int __SNBF() {
        return __SNBF;
    }
    private static final int __SRD = (int)4L;
    /**
     * {@snippet lang=c :
     * #define __SRD 4
     * }
     */
    public static int __SRD() {
        return __SRD;
    }
    private static final int __SWR = (int)8L;
    /**
     * {@snippet lang=c :
     * #define __SWR 8
     * }
     */
    public static int __SWR() {
        return __SWR;
    }
    private static final int __SRW = (int)16L;
    /**
     * {@snippet lang=c :
     * #define __SRW 16
     * }
     */
    public static int __SRW() {
        return __SRW;
    }
    private static final int __SEOF = (int)32L;
    /**
     * {@snippet lang=c :
     * #define __SEOF 32
     * }
     */
    public static int __SEOF() {
        return __SEOF;
    }
    private static final int __SERR = (int)64L;
    /**
     * {@snippet lang=c :
     * #define __SERR 64
     * }
     */
    public static int __SERR() {
        return __SERR;
    }
    private static final int __SMBF = (int)128L;
    /**
     * {@snippet lang=c :
     * #define __SMBF 128
     * }
     */
    public static int __SMBF() {
        return __SMBF;
    }
    private static final int __SAPP = (int)256L;
    /**
     * {@snippet lang=c :
     * #define __SAPP 256
     * }
     */
    public static int __SAPP() {
        return __SAPP;
    }
    private static final int __SSTR = (int)512L;
    /**
     * {@snippet lang=c :
     * #define __SSTR 512
     * }
     */
    public static int __SSTR() {
        return __SSTR;
    }
    private static final int __SOPT = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define __SOPT 1024
     * }
     */
    public static int __SOPT() {
        return __SOPT;
    }
    private static final int __SNPT = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define __SNPT 2048
     * }
     */
    public static int __SNPT() {
        return __SNPT;
    }
    private static final int __SOFF = (int)4096L;
    /**
     * {@snippet lang=c :
     * #define __SOFF 4096
     * }
     */
    public static int __SOFF() {
        return __SOFF;
    }
    private static final int __SMOD = (int)8192L;
    /**
     * {@snippet lang=c :
     * #define __SMOD 8192
     * }
     */
    public static int __SMOD() {
        return __SMOD;
    }
    private static final int __SALC = (int)16384L;
    /**
     * {@snippet lang=c :
     * #define __SALC 16384
     * }
     */
    public static int __SALC() {
        return __SALC;
    }
    private static final int __SIGN = (int)32768L;
    /**
     * {@snippet lang=c :
     * #define __SIGN 32768
     * }
     */
    public static int __SIGN() {
        return __SIGN;
    }
    private static final int _IOFBF = (int)0L;
    /**
     * {@snippet lang=c :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return _IOFBF;
    }
    private static final int _IOLBF = (int)1L;
    /**
     * {@snippet lang=c :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return _IOLBF;
    }
    private static final int _IONBF = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return _IONBF;
    }
    private static final int BUFSIZ = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define BUFSIZ 1024
     * }
     */
    public static int BUFSIZ() {
        return BUFSIZ;
    }
    private static final int FOPEN_MAX = (int)20L;
    /**
     * {@snippet lang=c :
     * #define FOPEN_MAX 20
     * }
     */
    public static int FOPEN_MAX() {
        return FOPEN_MAX;
    }
    private static final int FILENAME_MAX = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define FILENAME_MAX 1024
     * }
     */
    public static int FILENAME_MAX() {
        return FILENAME_MAX;
    }
    private static final int L_tmpnam = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define L_tmpnam 1024
     * }
     */
    public static int L_tmpnam() {
        return L_tmpnam;
    }
    private static final int TMP_MAX = (int)308915776L;
    /**
     * {@snippet lang=c :
     * #define TMP_MAX 308915776
     * }
     */
    public static int TMP_MAX() {
        return TMP_MAX;
    }
    private static final int L_ctermid = (int)1024L;
    /**
     * {@snippet lang=c :
     * #define L_ctermid 1024
     * }
     */
    public static int L_ctermid() {
        return L_ctermid;
    }
    private static final int _USE_FORTIFY_LEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define _USE_FORTIFY_LEVEL 2
     * }
     */
    public static int _USE_FORTIFY_LEVEL() {
        return _USE_FORTIFY_LEVEL;
    }
    private static final int GGML_FILE_MAGIC = (int)1734831468L;
    /**
     * {@snippet lang=c :
     * #define GGML_FILE_MAGIC 1734831468
     * }
     */
    public static int GGML_FILE_MAGIC() {
        return GGML_FILE_MAGIC;
    }
    private static final int GGML_FILE_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GGML_FILE_VERSION 2
     * }
     */
    public static int GGML_FILE_VERSION() {
        return GGML_FILE_VERSION;
    }
    private static final int GGML_QNT_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GGML_QNT_VERSION 2
     * }
     */
    public static int GGML_QNT_VERSION() {
        return GGML_QNT_VERSION;
    }
    private static final int GGML_QNT_VERSION_FACTOR = (int)1000L;
    /**
     * {@snippet lang=c :
     * #define GGML_QNT_VERSION_FACTOR 1000
     * }
     */
    public static int GGML_QNT_VERSION_FACTOR() {
        return GGML_QNT_VERSION_FACTOR;
    }
    private static final int GGML_MAX_DIMS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_DIMS 4
     * }
     */
    public static int GGML_MAX_DIMS() {
        return GGML_MAX_DIMS;
    }
    private static final int GGML_MAX_PARAMS = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_PARAMS 2048
     * }
     */
    public static int GGML_MAX_PARAMS() {
        return GGML_MAX_PARAMS;
    }
    private static final int GGML_MAX_SRC = (int)10L;
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_SRC 10
     * }
     */
    public static int GGML_MAX_SRC() {
        return GGML_MAX_SRC;
    }
    private static final int GGML_MAX_N_THREADS = (int)512L;
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_N_THREADS 512
     * }
     */
    public static int GGML_MAX_N_THREADS() {
        return GGML_MAX_N_THREADS;
    }
    private static final int GGML_MAX_OP_PARAMS = (int)64L;
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_OP_PARAMS 64
     * }
     */
    public static int GGML_MAX_OP_PARAMS() {
        return GGML_MAX_OP_PARAMS;
    }
    private static final int GGML_MAX_NAME = (int)64L;
    /**
     * {@snippet lang=c :
     * #define GGML_MAX_NAME 64
     * }
     */
    public static int GGML_MAX_NAME() {
        return GGML_MAX_NAME;
    }
    private static final int GGML_DEFAULT_N_THREADS = (int)4L;
    /**
     * {@snippet lang=c :
     * #define GGML_DEFAULT_N_THREADS 4
     * }
     */
    public static int GGML_DEFAULT_N_THREADS() {
        return GGML_DEFAULT_N_THREADS;
    }
    private static final int GGML_DEFAULT_GRAPH_SIZE = (int)2048L;
    /**
     * {@snippet lang=c :
     * #define GGML_DEFAULT_GRAPH_SIZE 2048
     * }
     */
    public static int GGML_DEFAULT_GRAPH_SIZE() {
        return GGML_DEFAULT_GRAPH_SIZE;
    }
    private static final int GGML_MEM_ALIGN = (int)16L;
    /**
     * {@snippet lang=c :
     * #define GGML_MEM_ALIGN 16
     * }
     */
    public static int GGML_MEM_ALIGN() {
        return GGML_MEM_ALIGN;
    }
    private static final int GGML_EXIT_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * #define GGML_EXIT_SUCCESS 0
     * }
     */
    public static int GGML_EXIT_SUCCESS() {
        return GGML_EXIT_SUCCESS;
    }
    private static final int GGML_EXIT_ABORTED = (int)1L;
    /**
     * {@snippet lang=c :
     * #define GGML_EXIT_ABORTED 1
     * }
     */
    public static int GGML_EXIT_ABORTED() {
        return GGML_EXIT_ABORTED;
    }
    private static final int GGML_ROPE_TYPE_NEOX = (int)2L;
    /**
     * {@snippet lang=c :
     * #define GGML_ROPE_TYPE_NEOX 2
     * }
     */
    public static int GGML_ROPE_TYPE_NEOX() {
        return GGML_ROPE_TYPE_NEOX;
    }
    private static final int GGML_ROPE_TYPE_MROPE = (int)8L;
    /**
     * {@snippet lang=c :
     * #define GGML_ROPE_TYPE_MROPE 8
     * }
     */
    public static int GGML_ROPE_TYPE_MROPE() {
        return GGML_ROPE_TYPE_MROPE;
    }
    private static final int GGML_ROPE_TYPE_VISION = (int)24L;
    /**
     * {@snippet lang=c :
     * #define GGML_ROPE_TYPE_VISION 24
     * }
     */
    public static int GGML_ROPE_TYPE_VISION() {
        return GGML_ROPE_TYPE_VISION;
    }
    private static final int GGML_KQ_MASK_PAD = (int)64L;
    /**
     * {@snippet lang=c :
     * #define GGML_KQ_MASK_PAD 64
     * }
     */
    public static int GGML_KQ_MASK_PAD() {
        return GGML_KQ_MASK_PAD;
    }
    private static final int LLAMA_SESSION_VERSION = (int)9L;
    /**
     * {@snippet lang=c :
     * #define LLAMA_SESSION_VERSION 9
     * }
     */
    public static int LLAMA_SESSION_VERSION() {
        return LLAMA_SESSION_VERSION;
    }
    private static final int LLAMA_STATE_SEQ_VERSION = (int)2L;
    /**
     * {@snippet lang=c :
     * #define LLAMA_STATE_SEQ_VERSION 2
     * }
     */
    public static int LLAMA_STATE_SEQ_VERSION() {
        return LLAMA_STATE_SEQ_VERSION;
    }
    /**
     * {@snippet lang=c :
     * typedef long ptrdiff_t
     * }
     */
    public static final OfLong ptrdiff_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long size_t
     * }
     */
    public static final OfLong size_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int wchar_t
     * }
     */
    public static final OfInt wchar_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef signed char int8_t
     * }
     */
    public static final OfByte int8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short int16_t
     * }
     */
    public static final OfShort int16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int int32_t
     * }
     */
    public static final OfInt int32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long int64_t
     * }
     */
    public static final OfLong int64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned char uint8_t
     * }
     */
    public static final OfByte uint8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short uint16_t
     * }
     */
    public static final OfShort uint16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint32_t
     * }
     */
    public static final OfInt uint32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long uint64_t
     * }
     */
    public static final OfLong uint64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_least8_t
     * }
     */
    public static final OfByte int_least8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_least16_t
     * }
     */
    public static final OfShort int_least16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_least32_t
     * }
     */
    public static final OfInt int_least32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_least64_t
     * }
     */
    public static final OfLong int_least64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_least8_t
     * }
     */
    public static final OfByte uint_least8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_least16_t
     * }
     */
    public static final OfShort uint_least16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_least32_t
     * }
     */
    public static final OfInt uint_least32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_least64_t
     * }
     */
    public static final OfLong uint_least64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int8_t int_fast8_t
     * }
     */
    public static final OfByte int_fast8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef int16_t int_fast16_t
     * }
     */
    public static final OfShort int_fast16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int32_t int_fast32_t
     * }
     */
    public static final OfInt int_fast32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int64_t int_fast64_t
     * }
     */
    public static final OfLong int_fast64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef uint8_t uint_fast8_t
     * }
     */
    public static final OfByte uint_fast8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef uint16_t uint_fast16_t
     * }
     */
    public static final OfShort uint_fast16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef uint32_t uint_fast32_t
     * }
     */
    public static final OfInt uint_fast32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef uint64_t uint_fast64_t
     * }
     */
    public static final OfLong uint_fast64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef signed char __int8_t
     * }
     */
    public static final OfByte __int8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __uint8_t
     * }
     */
    public static final OfByte __uint8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __int16_t
     * }
     */
    public static final OfShort __int16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __uint16_t
     * }
     */
    public static final OfShort __uint16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __int32_t
     * }
     */
    public static final OfInt __int32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __uint32_t
     * }
     */
    public static final OfInt __uint32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __int64_t
     * }
     */
    public static final OfLong __int64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __uint64_t
     * }
     */
    public static final OfLong __uint64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_intptr_t
     * }
     */
    public static final OfLong __darwin_intptr_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_natural_t
     * }
     */
    public static final OfInt __darwin_natural_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_ct_rune_t
     * }
     */
    public static final OfInt __darwin_ct_rune_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ptrdiff_t
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_size_t
     * }
     */
    public static final OfLong __darwin_size_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __builtin_va_list __darwin_va_list
     * }
     */
    public static final AddressLayout __darwin_va_list = llama_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wchar_t
     * }
     */
    public static final OfInt __darwin_wchar_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_wchar_t __darwin_rune_t
     * }
     */
    public static final OfInt __darwin_rune_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wint_t
     * }
     */
    public static final OfInt __darwin_wint_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_clock_t
     * }
     */
    public static final OfLong __darwin_clock_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_socklen_t
     * }
     */
    public static final OfInt __darwin_socklen_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_ssize_t
     * }
     */
    public static final OfLong __darwin_ssize_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __darwin_time_t
     * }
     */
    public static final OfLong __darwin_time_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_blkcnt_t
     * }
     */
    public static final OfLong __darwin_blkcnt_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_blksize_t
     * }
     */
    public static final OfInt __darwin_blksize_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_dev_t
     * }
     */
    public static final OfInt __darwin_dev_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsblkcnt_t
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __darwin_fsfilcnt_t
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_gid_t
     * }
     */
    public static final OfInt __darwin_gid_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_id_t
     * }
     */
    public static final OfInt __darwin_id_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t __darwin_ino64_t
     * }
     */
    public static final OfLong __darwin_ino64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_ino64_t __darwin_ino_t
     * }
     */
    public static final OfLong __darwin_ino_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_natural_t __darwin_mach_port_name_t
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __darwin_mach_port_name_t __darwin_mach_port_t
     * }
     */
    public static final OfInt __darwin_mach_port_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t __darwin_mode_t
     * }
     */
    public static final OfShort __darwin_mode_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t __darwin_off_t
     * }
     */
    public static final OfLong __darwin_off_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_pid_t
     * }
     */
    public static final OfInt __darwin_pid_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_sigset_t
     * }
     */
    public static final OfInt __darwin_sigset_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t __darwin_suseconds_t
     * }
     */
    public static final OfInt __darwin_suseconds_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_uid_t
     * }
     */
    public static final OfInt __darwin_uid_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_useconds_t
     * }
     */
    public static final OfInt __darwin_useconds_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __darwin_pthread_key_t
     * }
     */
    public static final OfLong __darwin_pthread_key_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct _opaque_pthread_t {
     *     long __sig;
     *     struct __darwin_pthread_handler_rec *__cleanup_stack;
     *     char __opaque[8176];
     * } *__darwin_pthread_t
     * }
     */
    public static final AddressLayout __darwin_pthread_t = llama_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __darwin_intptr_t intptr_t
     * }
     */
    public static final OfLong intptr_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintptr_t
     * }
     */
    public static final OfLong uintptr_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long intmax_t
     * }
     */
    public static final OfLong intmax_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long uintmax_t
     * }
     */
    public static final OfLong uintmax_t = llama_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_nl_item
     * }
     */
    public static final OfInt __darwin_nl_item = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __darwin_wctrans_t
     * }
     */
    public static final OfInt __darwin_wctrans_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t __darwin_wctype_t
     * }
     */
    public static final OfInt __darwin_wctype_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned char u_int8_t
     * }
     */
    public static final OfByte u_int8_t = llama_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned short u_int16_t
     * }
     */
    public static final OfShort u_int16_t = llama_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int u_int32_t
     * }
     */
    public static final OfInt u_int32_t = llama_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long u_int64_t
     * }
     */
    public static final OfLong u_int64_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t register_t
     * }
     */
    public static final OfLong register_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_addr_t
     * }
     */
    public static final OfLong user_addr_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_size_t
     * }
     */
    public static final OfLong user_size_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_ssize_t
     * }
     */
    public static final OfLong user_ssize_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_long_t
     * }
     */
    public static final OfLong user_long_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t user_ulong_t
     * }
     */
    public static final OfLong user_ulong_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_time_t
     * }
     */
    public static final OfLong user_time_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int64_t user_off_t
     * }
     */
    public static final OfLong user_off_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef u_int64_t syscall_arg_t
     * }
     */
    public static final OfLong syscall_arg_t = llama_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __darwin_va_list va_list
     * }
     */
    public static final AddressLayout va_list = llama_h.C_POINTER;

    private static class renameat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("renameat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static FunctionDescriptor renameat$descriptor() {
        return renameat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static MethodHandle renameat$handle() {
        return renameat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static MemorySegment renameat$address() {
        return renameat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renameat(int, const char *, int, const char *)
     * }
     */
    public static int renameat(int x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = renameat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameat", x0, x1, x2, x3);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renamex_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("renamex_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static FunctionDescriptor renamex_np$descriptor() {
        return renamex_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static MethodHandle renamex_np$handle() {
        return renamex_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static MemorySegment renamex_np$address() {
        return renamex_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renamex_np(const char *, const char *, unsigned int)
     * }
     */
    public static int renamex_np(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = renamex_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renamex_np", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class renameatx_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("renameatx_np");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static FunctionDescriptor renameatx_np$descriptor() {
        return renameatx_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static MethodHandle renameatx_np$handle() {
        return renameatx_np.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static MemorySegment renameatx_np$address() {
        return renameatx_np.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int renameatx_np(int, const char *, int, const char *, unsigned int)
     * }
     */
    public static int renameatx_np(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = renameatx_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("renameatx_np", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int printf(const char *restrict, ...)
     * }
     */
    public static class printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int printf(const char *restrict, ...)
         * }
         */
        public static printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("printf", x0, x1);
                }
                return (int) spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_off_t fpos_t
     * }
     */
    public static final OfLong fpos_t = llama_h.C_LONG_LONG;

    private static class __stdinp$constants {
        public static final AddressLayout LAYOUT = llama_h.C_POINTER;
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("__stdinp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static AddressLayout __stdinp$layout() {
        return __stdinp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static MemorySegment __stdinp$segment() {
        return __stdinp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static MemorySegment __stdinp() {
        return __stdinp$constants.SEGMENT.get(__stdinp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdinp
     * }
     */
    public static void __stdinp(MemorySegment varValue) {
        __stdinp$constants.SEGMENT.set(__stdinp$constants.LAYOUT, 0L, varValue);
    }

    private static class __stdoutp$constants {
        public static final AddressLayout LAYOUT = llama_h.C_POINTER;
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("__stdoutp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static AddressLayout __stdoutp$layout() {
        return __stdoutp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static MemorySegment __stdoutp$segment() {
        return __stdoutp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static MemorySegment __stdoutp() {
        return __stdoutp$constants.SEGMENT.get(__stdoutp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stdoutp
     * }
     */
    public static void __stdoutp(MemorySegment varValue) {
        __stdoutp$constants.SEGMENT.set(__stdoutp$constants.LAYOUT, 0L, varValue);
    }

    private static class __stderrp$constants {
        public static final AddressLayout LAYOUT = llama_h.C_POINTER;
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("__stderrp").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static AddressLayout __stderrp$layout() {
        return __stderrp$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static MemorySegment __stderrp$segment() {
        return __stderrp$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static MemorySegment __stderrp() {
        return __stderrp$constants.SEGMENT.get(__stderrp$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern FILE *__stderrp
     * }
     */
    public static void __stderrp(MemorySegment varValue) {
        __stderrp$constants.SEGMENT.set(__stderrp$constants.LAYOUT, 0L, varValue);
    }

    private static class clearerr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("clearerr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static FunctionDescriptor clearerr$descriptor() {
        return clearerr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static MethodHandle clearerr$handle() {
        return clearerr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static MemorySegment clearerr$address() {
        return clearerr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void clearerr(FILE *)
     * }
     */
    public static void clearerr(MemorySegment x0) {
        var mh$ = clearerr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearerr", x0);
            }
            mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static FunctionDescriptor fclose$descriptor() {
        return fclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static MethodHandle fclose$handle() {
        return fclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static MemorySegment fclose$address() {
        return fclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fclose(FILE *)
     * }
     */
    public static int fclose(MemorySegment x0) {
        var mh$ = fclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fclose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class feof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("feof");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static FunctionDescriptor feof$descriptor() {
        return feof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static MethodHandle feof$handle() {
        return feof.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static MemorySegment feof$address() {
        return feof.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int feof(FILE *)
     * }
     */
    public static int feof(MemorySegment x0) {
        var mh$ = feof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("feof", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ferror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ferror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static FunctionDescriptor ferror$descriptor() {
        return ferror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static MethodHandle ferror$handle() {
        return ferror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static MemorySegment ferror$address() {
        return ferror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ferror(FILE *)
     * }
     */
    public static int ferror(MemorySegment x0) {
        var mh$ = ferror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ferror", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fflush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fflush");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static FunctionDescriptor fflush$descriptor() {
        return fflush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static MethodHandle fflush$handle() {
        return fflush.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static MemorySegment fflush$address() {
        return fflush.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fflush(FILE *)
     * }
     */
    public static int fflush(MemorySegment x0) {
        var mh$ = fflush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fflush", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fgetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static FunctionDescriptor fgetc$descriptor() {
        return fgetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static MethodHandle fgetc$handle() {
        return fgetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static MemorySegment fgetc$address() {
        return fgetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetc(FILE *)
     * }
     */
    public static int fgetc(MemorySegment x0) {
        var mh$ = fgetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetc", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fgetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static FunctionDescriptor fgetpos$descriptor() {
        return fgetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static MethodHandle fgetpos$handle() {
        return fgetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static MemorySegment fgetpos$address() {
        return fgetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fgetpos(FILE *restrict, fpos_t *)
     * }
     */
    public static int fgetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetpos", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fgets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int __size, FILE *)
     * }
     */
    public static FunctionDescriptor fgets$descriptor() {
        return fgets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int __size, FILE *)
     * }
     */
    public static MethodHandle fgets$handle() {
        return fgets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgets(char *restrict, int __size, FILE *)
     * }
     */
    public static MemorySegment fgets$address() {
        return fgets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgets(char *restrict, int __size, FILE *)
     * }
     */
    public static MemorySegment fgets(MemorySegment x0, int __size, MemorySegment x2) {
        var mh$ = fgets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgets", x0, __size, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, __size, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode) asm("_fopen")
     * }
     */
    public static FunctionDescriptor fopen$descriptor() {
        return fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode) asm("_fopen")
     * }
     */
    public static MethodHandle fopen$handle() {
        return fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode) asm("_fopen")
     * }
     */
    public static MemorySegment fopen$address() {
        return fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fopen(const char *restrict __filename, const char *restrict __mode) asm("_fopen")
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __mode) {
        var mh$ = fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fopen", __filename, __mode);
            }
            return (MemorySegment)mh$.invokeExact(__filename, __mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fprintf(FILE *restrict, const char *restrict, ...)
     * }
     */
    public static class fprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fprintf(FILE *restrict, const char *restrict, ...)
         * }
         */
        public static fprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fprintf", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fputc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fputc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static FunctionDescriptor fputc$descriptor() {
        return fputc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static MethodHandle fputc$handle() {
        return fputc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static MemorySegment fputc$address() {
        return fputc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputc(int, FILE *)
     * }
     */
    public static int fputc(int x0, MemorySegment x1) {
        var mh$ = fputc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fputs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fputs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict) asm("_fputs")
     * }
     */
    public static FunctionDescriptor fputs$descriptor() {
        return fputs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict) asm("_fputs")
     * }
     */
    public static MethodHandle fputs$handle() {
        return fputs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict) asm("_fputs")
     * }
     */
    public static MemorySegment fputs$address() {
        return fputs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fputs(const char *restrict, FILE *restrict) asm("_fputs")
     * }
     */
    public static int fputs(MemorySegment x0, MemorySegment x1) {
        var mh$ = fputs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fputs", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fread {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fread");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor fread$descriptor() {
        return fread.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MethodHandle fread$handle() {
        return fread.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static MemorySegment fread$address() {
        return fread.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long fread(void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream)
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fread.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fread", __ptr, __size, __nitems, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class freopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("freopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict) asm("_freopen")
     * }
     */
    public static FunctionDescriptor freopen$descriptor() {
        return freopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict) asm("_freopen")
     * }
     */
    public static MethodHandle freopen$handle() {
        return freopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict) asm("_freopen")
     * }
     */
    public static MemorySegment freopen$address() {
        return freopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *freopen(const char *restrict, const char *restrict, FILE *restrict) asm("_freopen")
     * }
     */
    public static MemorySegment freopen(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = freopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("freopen", x0, x1, x2);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int fscanf(FILE *restrict, const char *restrict, ...)
     * }
     */
    public static class fscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private fscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int fscanf(FILE *restrict, const char *restrict, ...)
         * }
         */
        public static fscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new fscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("fscanf", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class fseek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fseek");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static FunctionDescriptor fseek$descriptor() {
        return fseek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static MethodHandle fseek$handle() {
        return fseek.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static MemorySegment fseek$address() {
        return fseek.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseek(FILE *, long, int)
     * }
     */
    public static int fseek(MemorySegment x0, long x1, int x2) {
        var mh$ = fseek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseek", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fsetpos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fsetpos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static FunctionDescriptor fsetpos$descriptor() {
        return fsetpos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static MethodHandle fsetpos$handle() {
        return fsetpos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static MemorySegment fsetpos$address() {
        return fsetpos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fsetpos(FILE *, const fpos_t *)
     * }
     */
    public static int fsetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fsetpos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fsetpos", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ftell");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static FunctionDescriptor ftell$descriptor() {
        return ftell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static MethodHandle ftell$handle() {
        return ftell.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static MemorySegment ftell$address() {
        return ftell.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long ftell(FILE *)
     * }
     */
    public static long ftell(MemorySegment x0) {
        var mh$ = ftell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftell", x0);
            }
            return (long)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fwrite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fwrite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream) asm("_fwrite")
     * }
     */
    public static FunctionDescriptor fwrite$descriptor() {
        return fwrite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream) asm("_fwrite")
     * }
     */
    public static MethodHandle fwrite$handle() {
        return fwrite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream) asm("_fwrite")
     * }
     */
    public static MemorySegment fwrite$address() {
        return fwrite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned long fwrite(const void *restrict __ptr, size_t __size, size_t __nitems, FILE *restrict __stream) asm("_fwrite")
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fwrite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fwrite", __ptr, __size, __nitems, __stream);
            }
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static FunctionDescriptor getc$descriptor() {
        return getc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static MethodHandle getc$handle() {
        return getc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static MemorySegment getc$address() {
        return getc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc(FILE *)
     * }
     */
    public static int getc(MemorySegment x0) {
        var mh$ = getc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar(void)
     * }
     */
    public static FunctionDescriptor getchar$descriptor() {
        return getchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar(void)
     * }
     */
    public static MethodHandle getchar$handle() {
        return getchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar(void)
     * }
     */
    public static MemorySegment getchar$address() {
        return getchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar(void)
     * }
     */
    public static int getchar() {
        var mh$ = getchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar");
            }
            return (int)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("gets");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static FunctionDescriptor gets$descriptor() {
        return gets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MethodHandle gets$handle() {
        return gets.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MemorySegment gets$address() {
        return gets.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *gets(char *)
     * }
     */
    public static MemorySegment gets(MemorySegment x0) {
        var mh$ = gets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class perror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("perror");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static FunctionDescriptor perror$descriptor() {
        return perror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static MethodHandle perror$handle() {
        return perror.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static MemorySegment perror$address() {
        return perror.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void perror(const char *)
     * }
     */
    public static void perror(MemorySegment x0) {
        var mh$ = perror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("perror", x0);
            }
            mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("putc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static FunctionDescriptor putc$descriptor() {
        return putc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static MethodHandle putc$handle() {
        return putc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static MemorySegment putc$address() {
        return putc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc(int, FILE *)
     * }
     */
    public static int putc(int x0, MemorySegment x1) {
        var mh$ = putc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("putchar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static FunctionDescriptor putchar$descriptor() {
        return putchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static MethodHandle putchar$handle() {
        return putchar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static MemorySegment putchar$address() {
        return putchar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar(int)
     * }
     */
    public static int putchar(int x0) {
        var mh$ = putchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class puts {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("puts");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static FunctionDescriptor puts$descriptor() {
        return puts.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static MethodHandle puts$handle() {
        return puts.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static MemorySegment puts$address() {
        return puts.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int puts(const char *)
     * }
     */
    public static int puts(MemorySegment x0) {
        var mh$ = puts.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("puts", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("remove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static FunctionDescriptor remove$descriptor() {
        return remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static MethodHandle remove$handle() {
        return remove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static MemorySegment remove$address() {
        return remove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int remove(const char *)
     * }
     */
    public static int remove(MemorySegment x0) {
        var mh$ = remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("remove", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("rename");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static FunctionDescriptor rename$descriptor() {
        return rename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static MethodHandle rename$handle() {
        return rename.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static MemorySegment rename$address() {
        return rename.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int rename(const char *__old, const char *__new)
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rename", __old, __new);
            }
            return (int)mh$.invokeExact(__old, __new);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("rewind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static FunctionDescriptor rewind$descriptor() {
        return rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static MethodHandle rewind$handle() {
        return rewind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static MemorySegment rewind$address() {
        return rewind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void rewind(FILE *)
     * }
     */
    public static void rewind(MemorySegment x0) {
        var mh$ = rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewind", x0);
            }
            mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int scanf(const char *restrict, ...)
     * }
     */
    public static class scanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("scanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private scanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int scanf(const char *restrict, ...)
         * }
         */
        public static scanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new scanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("scanf", x0, x1);
                }
                return (int) spreader.invokeExact(x0, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class setbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("setbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static FunctionDescriptor setbuf$descriptor() {
        return setbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static MethodHandle setbuf$handle() {
        return setbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static MemorySegment setbuf$address() {
        return setbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuf(FILE *restrict, char *restrict)
     * }
     */
    public static void setbuf(MemorySegment x0, MemorySegment x1) {
        var mh$ = setbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuf", x0, x1);
            }
            mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setvbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("setvbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t __size)
     * }
     */
    public static FunctionDescriptor setvbuf$descriptor() {
        return setvbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t __size)
     * }
     */
    public static MethodHandle setvbuf$handle() {
        return setvbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t __size)
     * }
     */
    public static MemorySegment setvbuf$address() {
        return setvbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setvbuf(FILE *restrict, char *restrict, int, size_t __size)
     * }
     */
    public static int setvbuf(MemorySegment x0, MemorySegment x1, int x2, long __size) {
        var mh$ = setvbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setvbuf", x0, x1, x2, __size);
            }
            return (int)mh$.invokeExact(x0, x1, x2, __size);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sprintf(char *restrict, const char *restrict, ...)
     * }
     */
    public static class sprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("sprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sprintf(char *restrict, const char *restrict, ...)
         * }
         */
        public static sprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sprintf", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int sscanf(const char *restrict, const char *restrict, ...)
     * }
     */
    public static class sscanf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("sscanf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private sscanf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int sscanf(const char *restrict, const char *restrict, ...)
         * }
         */
        public static sscanf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new sscanf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("sscanf", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class tmpfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("tmpfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *tmpfile(void)
     * }
     */
    public static FunctionDescriptor tmpfile$descriptor() {
        return tmpfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *tmpfile(void)
     * }
     */
    public static MethodHandle tmpfile$handle() {
        return tmpfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *tmpfile(void)
     * }
     */
    public static MemorySegment tmpfile$address() {
        return tmpfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *tmpfile(void)
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpfile");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tmpnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("tmpnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static FunctionDescriptor tmpnam$descriptor() {
        return tmpnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MethodHandle tmpnam$handle() {
        return tmpnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MemorySegment tmpnam$address() {
        return tmpnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tmpnam(char *)
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tmpnam", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ungetc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ungetc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static FunctionDescriptor ungetc$descriptor() {
        return ungetc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static MethodHandle ungetc$handle() {
        return ungetc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static MemorySegment ungetc$address() {
        return ungetc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ungetc(int, FILE *)
     * }
     */
    public static int ungetc(int x0, MemorySegment x1) {
        var mh$ = ungetc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ungetc", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vfprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vfprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vfprintf$descriptor() {
        return vfprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vfprintf$handle() {
        return vfprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vfprintf$address() {
        return vfprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vfprintf(FILE *restrict, const char *restrict, va_list)
     * }
     */
    public static int vfprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vfprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vprintf$descriptor() {
        return vprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static MethodHandle vprintf$handle() {
        return vprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static MemorySegment vprintf$address() {
        return vprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vprintf(const char *restrict, va_list)
     * }
     */
    public static int vprintf(MemorySegment x0, MemorySegment x1) {
        var mh$ = vprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vprintf", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vsprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vsprintf$descriptor() {
        return vsprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vsprintf$handle() {
        return vsprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vsprintf$address() {
        return vsprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsprintf(char *restrict, const char *restrict, va_list)
     * }
     */
    public static int vsprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vsprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ctermid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ctermid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static FunctionDescriptor ctermid$descriptor() {
        return ctermid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MethodHandle ctermid$handle() {
        return ctermid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MemorySegment ctermid$address() {
        return ctermid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ctermid(char *)
     * }
     */
    public static MemorySegment ctermid(MemorySegment x0) {
        var mh$ = ctermid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fdopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *) asm("_fdopen")
     * }
     */
    public static FunctionDescriptor fdopen$descriptor() {
        return fdopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *) asm("_fdopen")
     * }
     */
    public static MethodHandle fdopen$handle() {
        return fdopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *) asm("_fdopen")
     * }
     */
    public static MemorySegment fdopen$address() {
        return fdopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fdopen(int, const char *) asm("_fdopen")
     * }
     */
    public static MemorySegment fdopen(int x0, MemorySegment x1) {
        var mh$ = fdopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fileno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fileno");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static FunctionDescriptor fileno$descriptor() {
        return fileno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static MethodHandle fileno$handle() {
        return fileno.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static MemorySegment fileno$address() {
        return fileno.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fileno(FILE *)
     * }
     */
    public static int fileno(MemorySegment x0) {
        var mh$ = fileno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fileno", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pclose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("pclose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static FunctionDescriptor pclose$descriptor() {
        return pclose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static MethodHandle pclose$handle() {
        return pclose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static MemorySegment pclose$address() {
        return pclose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int pclose(FILE *)
     * }
     */
    public static int pclose(MemorySegment x0) {
        var mh$ = pclose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pclose", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class popen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("popen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *) asm("_popen")
     * }
     */
    public static FunctionDescriptor popen$descriptor() {
        return popen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *) asm("_popen")
     * }
     */
    public static MethodHandle popen$handle() {
        return popen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *) asm("_popen")
     * }
     */
    public static MemorySegment popen$address() {
        return popen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *popen(const char *, const char *) asm("_popen")
     * }
     */
    public static MemorySegment popen(MemorySegment x0, MemorySegment x1) {
        var mh$ = popen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("popen", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __srget {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__srget");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static FunctionDescriptor __srget$descriptor() {
        return __srget.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static MethodHandle __srget$handle() {
        return __srget.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static MemorySegment __srget$address() {
        return __srget.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __srget(FILE *)
     * }
     */
    public static int __srget(MemorySegment x0) {
        var mh$ = __srget.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__srget", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __svfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__svfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static FunctionDescriptor __svfscanf$descriptor() {
        return __svfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static MethodHandle __svfscanf$handle() {
        return __svfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static MemorySegment __svfscanf$address() {
        return __svfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __svfscanf(FILE *, const char *, va_list)
     * }
     */
    public static int __svfscanf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __svfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__svfscanf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __swbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__swbuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static FunctionDescriptor __swbuf$descriptor() {
        return __swbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static MethodHandle __swbuf$handle() {
        return __swbuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static MemorySegment __swbuf$address() {
        return __swbuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int __swbuf(int, FILE *)
     * }
     */
    public static int __swbuf(int x0, MemorySegment x1) {
        var mh$ = __swbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__swbuf", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class flockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("flockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static FunctionDescriptor flockfile$descriptor() {
        return flockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static MethodHandle flockfile$handle() {
        return flockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static MemorySegment flockfile$address() {
        return flockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void flockfile(FILE *)
     * }
     */
    public static void flockfile(MemorySegment x0) {
        var mh$ = flockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("flockfile", x0);
            }
            mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftrylockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ftrylockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static FunctionDescriptor ftrylockfile$descriptor() {
        return ftrylockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static MethodHandle ftrylockfile$handle() {
        return ftrylockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static MemorySegment ftrylockfile$address() {
        return ftrylockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int ftrylockfile(FILE *)
     * }
     */
    public static int ftrylockfile(MemorySegment x0) {
        var mh$ = ftrylockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftrylockfile", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funlockfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("funlockfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static FunctionDescriptor funlockfile$descriptor() {
        return funlockfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static MethodHandle funlockfile$handle() {
        return funlockfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static MemorySegment funlockfile$address() {
        return funlockfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void funlockfile(FILE *)
     * }
     */
    public static void funlockfile(MemorySegment x0) {
        var mh$ = funlockfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funlockfile", x0);
            }
            mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static FunctionDescriptor getc_unlocked$descriptor() {
        return getc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static MethodHandle getc_unlocked$handle() {
        return getc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static MemorySegment getc_unlocked$address() {
        return getc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getc_unlocked(FILE *)
     * }
     */
    public static int getc_unlocked(MemorySegment x0) {
        var mh$ = getc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getc_unlocked", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getchar_unlocked(void)
     * }
     */
    public static FunctionDescriptor getchar_unlocked$descriptor() {
        return getchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getchar_unlocked(void)
     * }
     */
    public static MethodHandle getchar_unlocked$handle() {
        return getchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getchar_unlocked(void)
     * }
     */
    public static MemorySegment getchar_unlocked$address() {
        return getchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getchar_unlocked(void)
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getchar_unlocked");
            }
            return (int)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putc_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("putc_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static FunctionDescriptor putc_unlocked$descriptor() {
        return putc_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static MethodHandle putc_unlocked$handle() {
        return putc_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static MemorySegment putc_unlocked$address() {
        return putc_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putc_unlocked(int, FILE *)
     * }
     */
    public static int putc_unlocked(int x0, MemorySegment x1) {
        var mh$ = putc_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putc_unlocked", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putchar_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("putchar_unlocked");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static FunctionDescriptor putchar_unlocked$descriptor() {
        return putchar_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static MethodHandle putchar_unlocked$handle() {
        return putchar_unlocked.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static MemorySegment putchar_unlocked$address() {
        return putchar_unlocked.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putchar_unlocked(int)
     * }
     */
    public static int putchar_unlocked(int x0) {
        var mh$ = putchar_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putchar_unlocked", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static FunctionDescriptor getw$descriptor() {
        return getw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static MethodHandle getw$handle() {
        return getw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static MemorySegment getw$address() {
        return getw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int getw(FILE *)
     * }
     */
    public static int getw(MemorySegment x0) {
        var mh$ = getw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getw", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("putw");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static FunctionDescriptor putw$descriptor() {
        return putw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static MethodHandle putw$handle() {
        return putw.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static MemorySegment putw$address() {
        return putw.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int putw(int, FILE *)
     * }
     */
    public static int putw(int x0, MemorySegment x1) {
        var mh$ = putw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putw", x0, x1);
            }
            return (int)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class tempnam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("tempnam");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix) asm("_tempnam")
     * }
     */
    public static FunctionDescriptor tempnam$descriptor() {
        return tempnam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix) asm("_tempnam")
     * }
     */
    public static MethodHandle tempnam$handle() {
        return tempnam.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix) asm("_tempnam")
     * }
     */
    public static MemorySegment tempnam$address() {
        return tempnam.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *tempnam(const char *__dir, const char *__prefix) asm("_tempnam")
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __prefix) {
        var mh$ = tempnam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("tempnam", __dir, __prefix);
            }
            return (MemorySegment)mh$.invokeExact(__dir, __prefix);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_off_t off_t
     * }
     */
    public static final OfLong off_t = llama_h.C_LONG_LONG;

    private static class fseeko {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fseeko");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static FunctionDescriptor fseeko$descriptor() {
        return fseeko.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static MethodHandle fseeko$handle() {
        return fseeko.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static MemorySegment fseeko$address() {
        return fseeko.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fseeko(FILE *__stream, off_t __offset, int __whence)
     * }
     */
    public static int fseeko(MemorySegment __stream, long __offset, int __whence) {
        var mh$ = fseeko.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fseeko", __stream, __offset, __whence);
            }
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ftello {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ftello");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static FunctionDescriptor ftello$descriptor() {
        return ftello.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static MethodHandle ftello$handle() {
        return ftello.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static MemorySegment ftello$address() {
        return ftello.ADDR;
    }

    /**
     * {@snippet lang=c :
     * off_t ftello(FILE *__stream)
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ftello", __stream);
            }
            return (long)mh$.invokeExact(__stream);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int snprintf(char *restrict __str, size_t __size, const char *restrict __format, ...)
     * }
     */
    public static class snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_LONG,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int snprintf(char *restrict __str, size_t __size, const char *restrict __format, ...)
         * }
         */
        public static snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment __str, long __size, MemorySegment __format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("snprintf", __str, __size, __format, x3);
                }
                return (int) spreader.invokeExact(__str, __size, __format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vfscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vfscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vfscanf$descriptor() {
        return vfscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vfscanf$handle() {
        return vfscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vfscanf$address() {
        return vfscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vfscanf(FILE *restrict __stream, const char *restrict __format, va_list)
     * }
     */
    public static int vfscanf(MemorySegment __stream, MemorySegment __format, MemorySegment x2) {
        var mh$ = vfscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vfscanf", __stream, __format, x2);
            }
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vscanf$descriptor() {
        return vscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vscanf$handle() {
        return vscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vscanf$address() {
        return vscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vscanf(const char *restrict __format, va_list)
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment x1) {
        var mh$ = vscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vscanf", __format, x1);
            }
            return (int)mh$.invokeExact(__format, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsnprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vsnprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vsnprintf$descriptor() {
        return vsnprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vsnprintf$handle() {
        return vsnprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vsnprintf$address() {
        return vsnprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsnprintf(char *restrict __str, size_t __size, const char *restrict __format, va_list)
     * }
     */
    public static int vsnprintf(MemorySegment __str, long __size, MemorySegment __format, MemorySegment x3) {
        var mh$ = vsnprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsnprintf", __str, __size, __format, x3);
            }
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vsscanf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vsscanf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static FunctionDescriptor vsscanf$descriptor() {
        return vsscanf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static MethodHandle vsscanf$handle() {
        return vsscanf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static MemorySegment vsscanf$address() {
        return vsscanf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vsscanf(const char *restrict __str, const char *restrict __format, va_list)
     * }
     */
    public static int vsscanf(MemorySegment __str, MemorySegment __format, MemorySegment x2) {
        var mh$ = vsscanf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vsscanf", __str, __format, x2);
            }
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __darwin_ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = llama_h.C_LONG;

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int dprintf(int, const char *restrict, ...)
     * }
     */
    public static class dprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_INT,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("dprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private dprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int dprintf(int, const char *restrict, ...)
         * }
         */
        public static dprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new dprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(int x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("dprintf", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class vdprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vdprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vdprintf$descriptor() {
        return vdprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vdprintf$handle() {
        return vdprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vdprintf$address() {
        return vdprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vdprintf(int, const char *restrict, va_list)
     * }
     */
    public static int vdprintf(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vdprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vdprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdelim {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getdelim");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getdelim$descriptor() {
        return getdelim.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getdelim$handle() {
        return getdelim.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getdelim$address() {
        return getdelim.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t getdelim(char **restrict __linep, size_t *restrict __linecapp, int __delimiter, FILE *restrict __stream)
     * }
     */
    public static long getdelim(MemorySegment __linep, MemorySegment __linecapp, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdelim", __linep, __linecapp, __delimiter, __stream);
            }
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("getline");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static FunctionDescriptor getline$descriptor() {
        return getline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static MethodHandle getline$handle() {
        return getline.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static MemorySegment getline$address() {
        return getline.ADDR;
    }

    /**
     * {@snippet lang=c :
     * ssize_t getline(char **restrict __linep, size_t *restrict __linecapp, FILE *restrict __stream)
     * }
     */
    public static long getline(MemorySegment __linep, MemorySegment __linecapp, MemorySegment __stream) {
        var mh$ = getline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getline", __linep, __linecapp, __stream);
            }
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmemopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fmemopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static FunctionDescriptor fmemopen$descriptor() {
        return fmemopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MethodHandle fmemopen$handle() {
        return fmemopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MemorySegment fmemopen$address() {
        return fmemopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *fmemopen(void *restrict __buf, size_t __size, const char *restrict __mode)
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __buf, long __size, MemorySegment __mode) {
        var mh$ = fmemopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmemopen", __buf, __size, __mode);
            }
            return (MemorySegment)mh$.invokeExact(__buf, __size, __mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class open_memstream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("open_memstream");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static FunctionDescriptor open_memstream$descriptor() {
        return open_memstream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MethodHandle open_memstream$handle() {
        return open_memstream.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MemorySegment open_memstream$address() {
        return open_memstream.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *open_memstream(char **__bufp, size_t *__sizep)
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufp, MemorySegment __sizep) {
        var mh$ = open_memstream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("open_memstream", __bufp, __sizep);
            }
            return (MemorySegment)mh$.invokeExact(__bufp, __sizep);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sys_nerr$constants {
        public static final OfInt LAYOUT = llama_h.C_INT;
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("sys_nerr").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static OfInt sys_nerr$layout() {
        return sys_nerr$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static MemorySegment sys_nerr$segment() {
        return sys_nerr$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static int sys_nerr() {
        return sys_nerr$constants.SEGMENT.get(sys_nerr$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const int sys_nerr
     * }
     */
    public static void sys_nerr(int varValue) {
        sys_nerr$constants.SEGMENT.set(sys_nerr$constants.LAYOUT, 0L, varValue);
    }

    private static class sys_errlist$constants {
        public static final SequenceLayout LAYOUT = MemoryLayout.sequenceLayout(0, llama_h.C_POINTER);
        public static final MemorySegment SEGMENT = SYMBOL_LOOKUP.findOrThrow("sys_errlist").reinterpret(LAYOUT.byteSize());
    public static final VarHandle HANDLE = LAYOUT.varHandle();

        public static final long[] DIMS = {  };
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static SequenceLayout sys_errlist$layout() {
        return sys_errlist$constants.LAYOUT;
    }

    /**
     * Dimensions for array variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static long[] sys_errlist$dimensions() {
        return sys_errlist$constants.DIMS;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static MemorySegment sys_errlist() {
        return sys_errlist$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const char *const sys_errlist[]
     * }
     */
    public static void sys_errlist(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, sys_errlist$constants.SEGMENT, 0L, sys_errlist$constants.LAYOUT.byteSize());
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * int asprintf(char **restrict, const char *restrict, ...)
     * }
     */
    public static class asprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("asprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private asprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * int asprintf(char **restrict, const char *restrict, ...)
         * }
         */
        public static asprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new asprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, MemorySegment x1, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("asprintf", x0, x1, x2);
                }
                return (int) spreader.invokeExact(x0, x1, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class ctermid_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ctermid_r");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static FunctionDescriptor ctermid_r$descriptor() {
        return ctermid_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MethodHandle ctermid_r$handle() {
        return ctermid_r.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MemorySegment ctermid_r$address() {
        return ctermid_r.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *ctermid_r(char *)
     * }
     */
    public static MemorySegment ctermid_r(MemorySegment x0) {
        var mh$ = ctermid_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ctermid_r", x0);
            }
            return (MemorySegment)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fgetln {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fgetln");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *__len)
     * }
     */
    public static FunctionDescriptor fgetln$descriptor() {
        return fgetln.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *__len)
     * }
     */
    public static MethodHandle fgetln$handle() {
        return fgetln.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *__len)
     * }
     */
    public static MemorySegment fgetln$address() {
        return fgetln.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *fgetln(FILE *, size_t *__len)
     * }
     */
    public static MemorySegment fgetln(MemorySegment x0, MemorySegment __len) {
        var mh$ = fgetln.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fgetln", x0, __len);
            }
            return (MemorySegment)mh$.invokeExact(x0, __len);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fmtcheck {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fmtcheck");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static FunctionDescriptor fmtcheck$descriptor() {
        return fmtcheck.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MethodHandle fmtcheck$handle() {
        return fmtcheck.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MemorySegment fmtcheck$address() {
        return fmtcheck.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *fmtcheck(const char *, const char *)
     * }
     */
    public static MemorySegment fmtcheck(MemorySegment x0, MemorySegment x1) {
        var mh$ = fmtcheck.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fmtcheck", x0, x1);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fpurge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("fpurge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static FunctionDescriptor fpurge$descriptor() {
        return fpurge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static MethodHandle fpurge$handle() {
        return fpurge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static MemorySegment fpurge$address() {
        return fpurge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int fpurge(FILE *)
     * }
     */
    public static int fpurge(MemorySegment x0) {
        var mh$ = fpurge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fpurge", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setbuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("setbuffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int __size)
     * }
     */
    public static FunctionDescriptor setbuffer$descriptor() {
        return setbuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int __size)
     * }
     */
    public static MethodHandle setbuffer$handle() {
        return setbuffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int __size)
     * }
     */
    public static MemorySegment setbuffer$address() {
        return setbuffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void setbuffer(FILE *, char *, int __size)
     * }
     */
    public static void setbuffer(MemorySegment x0, MemorySegment x1, int __size) {
        var mh$ = setbuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setbuffer", x0, x1, __size);
            }
            mh$.invokeExact(x0, x1, __size);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setlinebuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("setlinebuf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static FunctionDescriptor setlinebuf$descriptor() {
        return setlinebuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static MethodHandle setlinebuf$handle() {
        return setlinebuf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static MemorySegment setlinebuf$address() {
        return setlinebuf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int setlinebuf(FILE *)
     * }
     */
    public static int setlinebuf(MemorySegment x0) {
        var mh$ = setlinebuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setlinebuf", x0);
            }
            return (int)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vasprintf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("vasprintf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor vasprintf$descriptor() {
        return vasprintf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static MethodHandle vasprintf$handle() {
        return vasprintf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static MemorySegment vasprintf$address() {
        return vasprintf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int vasprintf(char **restrict, const char *restrict, va_list)
     * }
     */
    public static int vasprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vasprintf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vasprintf", x0, x1, x2);
            }
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class funopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("funopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static FunctionDescriptor funopen$descriptor() {
        return funopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MethodHandle funopen$handle() {
        return funopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MemorySegment funopen$address() {
        return funopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *funopen(const void *, int (* _Nullable)(void *, char *, int), int (* _Nullable)(void *, const char *, int), fpos_t (* _Nullable)(void *, fpos_t, int), int (* _Nullable)(void *))
     * }
     */
    public static MemorySegment funopen(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = funopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("funopen", x0, x1, x2, x3, x4);
            }
            return (MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __sprintf_chk(char *restrict, int, size_t, const char *restrict, ...)
     * }
     */
    public static class __sprintf_chk {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_INT,
                llama_h.C_LONG,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__sprintf_chk");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __sprintf_chk(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __sprintf_chk(char *restrict, int, size_t, const char *restrict, ...)
         * }
         */
        public static __sprintf_chk makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __sprintf_chk(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, int x1, long x2, MemorySegment x3, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__sprintf_chk", x0, x1, x2, x3, x4);
                }
                return (int) spreader.invokeExact(x0, x1, x2, x3, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern int __snprintf_chk(char *restrict, size_t __maxlen, int, size_t, const char *restrict, ...)
     * }
     */
    public static class __snprintf_chk {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_INT,
                llama_h.C_POINTER,
                llama_h.C_LONG,
                llama_h.C_INT,
                llama_h.C_LONG,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__snprintf_chk");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private __snprintf_chk(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern int __snprintf_chk(char *restrict, size_t __maxlen, int, size_t, const char *restrict, ...)
         * }
         */
        public static __snprintf_chk makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new __snprintf_chk(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment x0, long __maxlen, int x2, long x3, MemorySegment x4, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("__snprintf_chk", x0, __maxlen, x2, x3, x4, x5);
                }
                return (int) spreader.invokeExact(x0, __maxlen, x2, x3, x4, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class __vsprintf_chk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__vsprintf_chk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor __vsprintf_chk$descriptor() {
        return __vsprintf_chk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MethodHandle __vsprintf_chk$handle() {
        return __vsprintf_chk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MemorySegment __vsprintf_chk$address() {
        return __vsprintf_chk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __vsprintf_chk(char *restrict, int, size_t, const char *restrict, va_list)
     * }
     */
    public static int __vsprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = __vsprintf_chk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__vsprintf_chk", x0, x1, x2, x3, x4);
            }
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __vsnprintf_chk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_INT,
            llama_h.C_LONG,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("__vsnprintf_chk");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t __maxlen, int, size_t, const char *restrict, va_list)
     * }
     */
    public static FunctionDescriptor __vsnprintf_chk$descriptor() {
        return __vsnprintf_chk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t __maxlen, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MethodHandle __vsnprintf_chk$handle() {
        return __vsnprintf_chk.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t __maxlen, int, size_t, const char *restrict, va_list)
     * }
     */
    public static MemorySegment __vsnprintf_chk$address() {
        return __vsnprintf_chk.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int __vsnprintf_chk(char *restrict, size_t __maxlen, int, size_t, const char *restrict, va_list)
     * }
     */
    public static int __vsnprintf_chk(MemorySegment x0, long __maxlen, int x2, long x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = __vsnprintf_chk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__vsnprintf_chk", x0, __maxlen, x2, x3, x4, x5);
            }
            return (int)mh$.invokeExact(x0, __maxlen, x2, x3, x4, x5);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * _Noreturn extern void ggml_abort(const char *file, int line, const char *fmt, ...)
     * }
     */
    public static class ggml_abort {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                llama_h.C_POINTER,
                llama_h.C_INT,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_abort");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ggml_abort(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * _Noreturn extern void ggml_abort(const char *file, int line, const char *fmt, ...)
         * }
         */
        public static ggml_abort makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ggml_abort(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment file, int line, MemorySegment fmt, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ggml_abort", file, line, fmt, x3);
                }
                 spreader.invokeExact(file, line, fmt, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int GGML_STATUS_ALLOC_FAILED = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_ALLOC_FAILED = -2
     * }
     */
    public static int GGML_STATUS_ALLOC_FAILED() {
        return GGML_STATUS_ALLOC_FAILED;
    }
    private static final int GGML_STATUS_FAILED = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_FAILED = -1
     * }
     */
    public static int GGML_STATUS_FAILED() {
        return GGML_STATUS_FAILED;
    }
    private static final int GGML_STATUS_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_SUCCESS = 0
     * }
     */
    public static int GGML_STATUS_SUCCESS() {
        return GGML_STATUS_SUCCESS;
    }
    private static final int GGML_STATUS_ABORTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_status.GGML_STATUS_ABORTED = 1
     * }
     */
    public static int GGML_STATUS_ABORTED() {
        return GGML_STATUS_ABORTED;
    }

    private static class ggml_status_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_status_to_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_status_to_string(enum ggml_status status)
     * }
     */
    public static FunctionDescriptor ggml_status_to_string$descriptor() {
        return ggml_status_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_status_to_string(enum ggml_status status)
     * }
     */
    public static MethodHandle ggml_status_to_string$handle() {
        return ggml_status_to_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_status_to_string(enum ggml_status status)
     * }
     */
    public static MemorySegment ggml_status_to_string$address() {
        return ggml_status_to_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_status_to_string(enum ggml_status status)
     * }
     */
    public static MemorySegment ggml_status_to_string(int status) {
        var mh$ = ggml_status_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_status_to_string", status);
            }
            return (MemorySegment)mh$.invokeExact(status);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef uint16_t ggml_fp16_t
     * }
     */
    public static final OfShort ggml_fp16_t = llama_h.C_SHORT;

    private static class ggml_fp16_to_fp32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_FLOAT,
            llama_h.C_SHORT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp16_to_fp32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ggml_fp16_to_fp32(ggml_fp16_t)
     * }
     */
    public static FunctionDescriptor ggml_fp16_to_fp32$descriptor() {
        return ggml_fp16_to_fp32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ggml_fp16_to_fp32(ggml_fp16_t)
     * }
     */
    public static MethodHandle ggml_fp16_to_fp32$handle() {
        return ggml_fp16_to_fp32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ggml_fp16_to_fp32(ggml_fp16_t)
     * }
     */
    public static MemorySegment ggml_fp16_to_fp32$address() {
        return ggml_fp16_to_fp32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ggml_fp16_to_fp32(ggml_fp16_t)
     * }
     */
    public static float ggml_fp16_to_fp32(short x0) {
        var mh$ = ggml_fp16_to_fp32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp16_to_fp32", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fp32_to_fp16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_SHORT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp32_to_fp16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ggml_fp16_t ggml_fp32_to_fp16(float)
     * }
     */
    public static FunctionDescriptor ggml_fp32_to_fp16$descriptor() {
        return ggml_fp32_to_fp16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ggml_fp16_t ggml_fp32_to_fp16(float)
     * }
     */
    public static MethodHandle ggml_fp32_to_fp16$handle() {
        return ggml_fp32_to_fp16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ggml_fp16_t ggml_fp32_to_fp16(float)
     * }
     */
    public static MemorySegment ggml_fp32_to_fp16$address() {
        return ggml_fp32_to_fp16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ggml_fp16_t ggml_fp32_to_fp16(float)
     * }
     */
    public static short ggml_fp32_to_fp16(float x0) {
        var mh$ = ggml_fp32_to_fp16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp32_to_fp16", x0);
            }
            return (short)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fp16_to_fp32_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp16_to_fp32_row");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_fp16_to_fp32_row(const ggml_fp16_t *, float *, int64_t)
     * }
     */
    public static FunctionDescriptor ggml_fp16_to_fp32_row$descriptor() {
        return ggml_fp16_to_fp32_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_fp16_to_fp32_row(const ggml_fp16_t *, float *, int64_t)
     * }
     */
    public static MethodHandle ggml_fp16_to_fp32_row$handle() {
        return ggml_fp16_to_fp32_row.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_fp16_to_fp32_row(const ggml_fp16_t *, float *, int64_t)
     * }
     */
    public static MemorySegment ggml_fp16_to_fp32_row$address() {
        return ggml_fp16_to_fp32_row.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_fp16_to_fp32_row(const ggml_fp16_t *, float *, int64_t)
     * }
     */
    public static void ggml_fp16_to_fp32_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp16_to_fp32_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp16_to_fp32_row", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fp32_to_fp16_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp32_to_fp16_row");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_fp16_row(const float *, ggml_fp16_t *, int64_t)
     * }
     */
    public static FunctionDescriptor ggml_fp32_to_fp16_row$descriptor() {
        return ggml_fp32_to_fp16_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_fp16_row(const float *, ggml_fp16_t *, int64_t)
     * }
     */
    public static MethodHandle ggml_fp32_to_fp16_row$handle() {
        return ggml_fp32_to_fp16_row.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_fp16_row(const float *, ggml_fp16_t *, int64_t)
     * }
     */
    public static MemorySegment ggml_fp32_to_fp16_row$address() {
        return ggml_fp32_to_fp16_row.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_fp32_to_fp16_row(const float *, ggml_fp16_t *, int64_t)
     * }
     */
    public static void ggml_fp32_to_fp16_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_fp16_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp32_to_fp16_row", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fp32_to_bf16 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ggml_bf16_t.layout(),
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp32_to_bf16");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ggml_bf16_t ggml_fp32_to_bf16(float)
     * }
     */
    public static FunctionDescriptor ggml_fp32_to_bf16$descriptor() {
        return ggml_fp32_to_bf16.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ggml_bf16_t ggml_fp32_to_bf16(float)
     * }
     */
    public static MethodHandle ggml_fp32_to_bf16$handle() {
        return ggml_fp32_to_bf16.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern ggml_bf16_t ggml_fp32_to_bf16(float)
     * }
     */
    public static MemorySegment ggml_fp32_to_bf16$address() {
        return ggml_fp32_to_bf16.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern ggml_bf16_t ggml_fp32_to_bf16(float)
     * }
     */
    public static MemorySegment ggml_fp32_to_bf16(SegmentAllocator allocator, float x0) {
        var mh$ = ggml_fp32_to_bf16.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp32_to_bf16", allocator, x0);
            }
            return (MemorySegment)mh$.invokeExact(allocator, x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_bf16_to_fp32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_FLOAT,
            ggml_bf16_t.layout()
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_bf16_to_fp32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float ggml_bf16_to_fp32(ggml_bf16_t)
     * }
     */
    public static FunctionDescriptor ggml_bf16_to_fp32$descriptor() {
        return ggml_bf16_to_fp32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float ggml_bf16_to_fp32(ggml_bf16_t)
     * }
     */
    public static MethodHandle ggml_bf16_to_fp32$handle() {
        return ggml_bf16_to_fp32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float ggml_bf16_to_fp32(ggml_bf16_t)
     * }
     */
    public static MemorySegment ggml_bf16_to_fp32$address() {
        return ggml_bf16_to_fp32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float ggml_bf16_to_fp32(ggml_bf16_t)
     * }
     */
    public static float ggml_bf16_to_fp32(MemorySegment x0) {
        var mh$ = ggml_bf16_to_fp32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_bf16_to_fp32", x0);
            }
            return (float)mh$.invokeExact(x0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_bf16_to_fp32_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_bf16_to_fp32_row");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_bf16_to_fp32_row(const ggml_bf16_t *, float *, int64_t)
     * }
     */
    public static FunctionDescriptor ggml_bf16_to_fp32_row$descriptor() {
        return ggml_bf16_to_fp32_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_bf16_to_fp32_row(const ggml_bf16_t *, float *, int64_t)
     * }
     */
    public static MethodHandle ggml_bf16_to_fp32_row$handle() {
        return ggml_bf16_to_fp32_row.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_bf16_to_fp32_row(const ggml_bf16_t *, float *, int64_t)
     * }
     */
    public static MemorySegment ggml_bf16_to_fp32_row$address() {
        return ggml_bf16_to_fp32_row.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_bf16_to_fp32_row(const ggml_bf16_t *, float *, int64_t)
     * }
     */
    public static void ggml_bf16_to_fp32_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_bf16_to_fp32_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_bf16_to_fp32_row", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fp32_to_bf16_row_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp32_to_bf16_row_ref");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row_ref(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static FunctionDescriptor ggml_fp32_to_bf16_row_ref$descriptor() {
        return ggml_fp32_to_bf16_row_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row_ref(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static MethodHandle ggml_fp32_to_bf16_row_ref$handle() {
        return ggml_fp32_to_bf16_row_ref.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row_ref(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static MemorySegment ggml_fp32_to_bf16_row_ref$address() {
        return ggml_fp32_to_bf16_row_ref.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row_ref(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static void ggml_fp32_to_bf16_row_ref(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_bf16_row_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp32_to_bf16_row_ref", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fp32_to_bf16_row {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fp32_to_bf16_row");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static FunctionDescriptor ggml_fp32_to_bf16_row$descriptor() {
        return ggml_fp32_to_bf16_row.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static MethodHandle ggml_fp32_to_bf16_row$handle() {
        return ggml_fp32_to_bf16_row.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static MemorySegment ggml_fp32_to_bf16_row$address() {
        return ggml_fp32_to_bf16_row.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_fp32_to_bf16_row(const float *, ggml_bf16_t *, int64_t)
     * }
     */
    public static void ggml_fp32_to_bf16_row(MemorySegment x0, MemorySegment x1, long x2) {
        var mh$ = ggml_fp32_to_bf16_row.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fp32_to_bf16_row", x0, x1, x2);
            }
            mh$.invokeExact(x0, x1, x2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GGML_TYPE_F32 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_F32 = 0
     * }
     */
    public static int GGML_TYPE_F32() {
        return GGML_TYPE_F32;
    }
    private static final int GGML_TYPE_F16 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_F16 = 1
     * }
     */
    public static int GGML_TYPE_F16() {
        return GGML_TYPE_F16;
    }
    private static final int GGML_TYPE_Q4_0 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q4_0 = 2
     * }
     */
    public static int GGML_TYPE_Q4_0() {
        return GGML_TYPE_Q4_0;
    }
    private static final int GGML_TYPE_Q4_1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q4_1 = 3
     * }
     */
    public static int GGML_TYPE_Q4_1() {
        return GGML_TYPE_Q4_1;
    }
    private static final int GGML_TYPE_Q5_0 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q5_0 = 6
     * }
     */
    public static int GGML_TYPE_Q5_0() {
        return GGML_TYPE_Q5_0;
    }
    private static final int GGML_TYPE_Q5_1 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q5_1 = 7
     * }
     */
    public static int GGML_TYPE_Q5_1() {
        return GGML_TYPE_Q5_1;
    }
    private static final int GGML_TYPE_Q8_0 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q8_0 = 8
     * }
     */
    public static int GGML_TYPE_Q8_0() {
        return GGML_TYPE_Q8_0;
    }
    private static final int GGML_TYPE_Q8_1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q8_1 = 9
     * }
     */
    public static int GGML_TYPE_Q8_1() {
        return GGML_TYPE_Q8_1;
    }
    private static final int GGML_TYPE_Q2_K = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q2_K = 10
     * }
     */
    public static int GGML_TYPE_Q2_K() {
        return GGML_TYPE_Q2_K;
    }
    private static final int GGML_TYPE_Q3_K = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q3_K = 11
     * }
     */
    public static int GGML_TYPE_Q3_K() {
        return GGML_TYPE_Q3_K;
    }
    private static final int GGML_TYPE_Q4_K = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q4_K = 12
     * }
     */
    public static int GGML_TYPE_Q4_K() {
        return GGML_TYPE_Q4_K;
    }
    private static final int GGML_TYPE_Q5_K = (int)13L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q5_K = 13
     * }
     */
    public static int GGML_TYPE_Q5_K() {
        return GGML_TYPE_Q5_K;
    }
    private static final int GGML_TYPE_Q6_K = (int)14L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q6_K = 14
     * }
     */
    public static int GGML_TYPE_Q6_K() {
        return GGML_TYPE_Q6_K;
    }
    private static final int GGML_TYPE_Q8_K = (int)15L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_Q8_K = 15
     * }
     */
    public static int GGML_TYPE_Q8_K() {
        return GGML_TYPE_Q8_K;
    }
    private static final int GGML_TYPE_IQ2_XXS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ2_XXS = 16
     * }
     */
    public static int GGML_TYPE_IQ2_XXS() {
        return GGML_TYPE_IQ2_XXS;
    }
    private static final int GGML_TYPE_IQ2_XS = (int)17L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ2_XS = 17
     * }
     */
    public static int GGML_TYPE_IQ2_XS() {
        return GGML_TYPE_IQ2_XS;
    }
    private static final int GGML_TYPE_IQ3_XXS = (int)18L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ3_XXS = 18
     * }
     */
    public static int GGML_TYPE_IQ3_XXS() {
        return GGML_TYPE_IQ3_XXS;
    }
    private static final int GGML_TYPE_IQ1_S = (int)19L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ1_S = 19
     * }
     */
    public static int GGML_TYPE_IQ1_S() {
        return GGML_TYPE_IQ1_S;
    }
    private static final int GGML_TYPE_IQ4_NL = (int)20L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ4_NL = 20
     * }
     */
    public static int GGML_TYPE_IQ4_NL() {
        return GGML_TYPE_IQ4_NL;
    }
    private static final int GGML_TYPE_IQ3_S = (int)21L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ3_S = 21
     * }
     */
    public static int GGML_TYPE_IQ3_S() {
        return GGML_TYPE_IQ3_S;
    }
    private static final int GGML_TYPE_IQ2_S = (int)22L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ2_S = 22
     * }
     */
    public static int GGML_TYPE_IQ2_S() {
        return GGML_TYPE_IQ2_S;
    }
    private static final int GGML_TYPE_IQ4_XS = (int)23L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ4_XS = 23
     * }
     */
    public static int GGML_TYPE_IQ4_XS() {
        return GGML_TYPE_IQ4_XS;
    }
    private static final int GGML_TYPE_I8 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I8 = 24
     * }
     */
    public static int GGML_TYPE_I8() {
        return GGML_TYPE_I8;
    }
    private static final int GGML_TYPE_I16 = (int)25L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I16 = 25
     * }
     */
    public static int GGML_TYPE_I16() {
        return GGML_TYPE_I16;
    }
    private static final int GGML_TYPE_I32 = (int)26L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I32 = 26
     * }
     */
    public static int GGML_TYPE_I32() {
        return GGML_TYPE_I32;
    }
    private static final int GGML_TYPE_I64 = (int)27L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_I64 = 27
     * }
     */
    public static int GGML_TYPE_I64() {
        return GGML_TYPE_I64;
    }
    private static final int GGML_TYPE_F64 = (int)28L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_F64 = 28
     * }
     */
    public static int GGML_TYPE_F64() {
        return GGML_TYPE_F64;
    }
    private static final int GGML_TYPE_IQ1_M = (int)29L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_IQ1_M = 29
     * }
     */
    public static int GGML_TYPE_IQ1_M() {
        return GGML_TYPE_IQ1_M;
    }
    private static final int GGML_TYPE_BF16 = (int)30L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_BF16 = 30
     * }
     */
    public static int GGML_TYPE_BF16() {
        return GGML_TYPE_BF16;
    }
    private static final int GGML_TYPE_TQ1_0 = (int)34L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_TQ1_0 = 34
     * }
     */
    public static int GGML_TYPE_TQ1_0() {
        return GGML_TYPE_TQ1_0;
    }
    private static final int GGML_TYPE_TQ2_0 = (int)35L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_TQ2_0 = 35
     * }
     */
    public static int GGML_TYPE_TQ2_0() {
        return GGML_TYPE_TQ2_0;
    }
    private static final int GGML_TYPE_COUNT = (int)39L;
    /**
     * {@snippet lang=c :
     * enum ggml_type.GGML_TYPE_COUNT = 39
     * }
     */
    public static int GGML_TYPE_COUNT() {
        return GGML_TYPE_COUNT;
    }
    private static final int GGML_PREC_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_prec.GGML_PREC_DEFAULT = 0
     * }
     */
    public static int GGML_PREC_DEFAULT() {
        return GGML_PREC_DEFAULT;
    }
    private static final int GGML_PREC_F32 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ggml_prec.GGML_PREC_F32 = 10
     * }
     */
    public static int GGML_PREC_F32() {
        return GGML_PREC_F32;
    }
    private static final int GGML_FTYPE_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_UNKNOWN = -1
     * }
     */
    public static int GGML_FTYPE_UNKNOWN() {
        return GGML_FTYPE_UNKNOWN;
    }
    private static final int GGML_FTYPE_ALL_F32 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_ALL_F32 = 0
     * }
     */
    public static int GGML_FTYPE_ALL_F32() {
        return GGML_FTYPE_ALL_F32;
    }
    private static final int GGML_FTYPE_MOSTLY_F16 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_F16 = 1
     * }
     */
    public static int GGML_FTYPE_MOSTLY_F16() {
        return GGML_FTYPE_MOSTLY_F16;
    }
    private static final int GGML_FTYPE_MOSTLY_Q4_0 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_0 = 2
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_0() {
        return GGML_FTYPE_MOSTLY_Q4_0;
    }
    private static final int GGML_FTYPE_MOSTLY_Q4_1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_1 = 3
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_1() {
        return GGML_FTYPE_MOSTLY_Q4_1;
    }
    private static final int GGML_FTYPE_MOSTLY_Q4_1_SOME_F16 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_1_SOME_F16() {
        return GGML_FTYPE_MOSTLY_Q4_1_SOME_F16;
    }
    private static final int GGML_FTYPE_MOSTLY_Q8_0 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q8_0 = 7
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q8_0() {
        return GGML_FTYPE_MOSTLY_Q8_0;
    }
    private static final int GGML_FTYPE_MOSTLY_Q5_0 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_0 = 8
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_0() {
        return GGML_FTYPE_MOSTLY_Q5_0;
    }
    private static final int GGML_FTYPE_MOSTLY_Q5_1 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_1 = 9
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_1() {
        return GGML_FTYPE_MOSTLY_Q5_1;
    }
    private static final int GGML_FTYPE_MOSTLY_Q2_K = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q2_K = 10
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q2_K() {
        return GGML_FTYPE_MOSTLY_Q2_K;
    }
    private static final int GGML_FTYPE_MOSTLY_Q3_K = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q3_K = 11
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q3_K() {
        return GGML_FTYPE_MOSTLY_Q3_K;
    }
    private static final int GGML_FTYPE_MOSTLY_Q4_K = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q4_K = 12
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q4_K() {
        return GGML_FTYPE_MOSTLY_Q4_K;
    }
    private static final int GGML_FTYPE_MOSTLY_Q5_K = (int)13L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q5_K = 13
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q5_K() {
        return GGML_FTYPE_MOSTLY_Q5_K;
    }
    private static final int GGML_FTYPE_MOSTLY_Q6_K = (int)14L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_Q6_K = 14
     * }
     */
    public static int GGML_FTYPE_MOSTLY_Q6_K() {
        return GGML_FTYPE_MOSTLY_Q6_K;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ2_XXS = (int)15L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_XXS = 15
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_XXS() {
        return GGML_FTYPE_MOSTLY_IQ2_XXS;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ2_XS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_XS = 16
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_XS() {
        return GGML_FTYPE_MOSTLY_IQ2_XS;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ3_XXS = (int)17L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ3_XXS = 17
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ3_XXS() {
        return GGML_FTYPE_MOSTLY_IQ3_XXS;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ1_S = (int)18L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ1_S = 18
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ1_S() {
        return GGML_FTYPE_MOSTLY_IQ1_S;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ4_NL = (int)19L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ4_NL = 19
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ4_NL() {
        return GGML_FTYPE_MOSTLY_IQ4_NL;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ3_S = (int)20L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ3_S = 20
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ3_S() {
        return GGML_FTYPE_MOSTLY_IQ3_S;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ2_S = (int)21L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ2_S = 21
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ2_S() {
        return GGML_FTYPE_MOSTLY_IQ2_S;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ4_XS = (int)22L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ4_XS = 22
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ4_XS() {
        return GGML_FTYPE_MOSTLY_IQ4_XS;
    }
    private static final int GGML_FTYPE_MOSTLY_IQ1_M = (int)23L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_IQ1_M = 23
     * }
     */
    public static int GGML_FTYPE_MOSTLY_IQ1_M() {
        return GGML_FTYPE_MOSTLY_IQ1_M;
    }
    private static final int GGML_FTYPE_MOSTLY_BF16 = (int)24L;
    /**
     * {@snippet lang=c :
     * enum ggml_ftype.GGML_FTYPE_MOSTLY_BF16 = 24
     * }
     */
    public static int GGML_FTYPE_MOSTLY_BF16() {
        return GGML_FTYPE_MOSTLY_BF16;
    }
    private static final int GGML_OP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_NONE = 0
     * }
     */
    public static int GGML_OP_NONE() {
        return GGML_OP_NONE;
    }
    private static final int GGML_OP_DUP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DUP = 1
     * }
     */
    public static int GGML_OP_DUP() {
        return GGML_OP_DUP;
    }
    private static final int GGML_OP_ADD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ADD = 2
     * }
     */
    public static int GGML_OP_ADD() {
        return GGML_OP_ADD;
    }
    private static final int GGML_OP_ADD1 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ADD1 = 3
     * }
     */
    public static int GGML_OP_ADD1() {
        return GGML_OP_ADD1;
    }
    private static final int GGML_OP_ACC = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ACC = 4
     * }
     */
    public static int GGML_OP_ACC() {
        return GGML_OP_ACC;
    }
    private static final int GGML_OP_SUB = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SUB = 5
     * }
     */
    public static int GGML_OP_SUB() {
        return GGML_OP_SUB;
    }
    private static final int GGML_OP_MUL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MUL = 6
     * }
     */
    public static int GGML_OP_MUL() {
        return GGML_OP_MUL;
    }
    private static final int GGML_OP_DIV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIV = 7
     * }
     */
    public static int GGML_OP_DIV() {
        return GGML_OP_DIV;
    }
    private static final int GGML_OP_SQR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SQR = 8
     * }
     */
    public static int GGML_OP_SQR() {
        return GGML_OP_SQR;
    }
    private static final int GGML_OP_SQRT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SQRT = 9
     * }
     */
    public static int GGML_OP_SQRT() {
        return GGML_OP_SQRT;
    }
    private static final int GGML_OP_LOG = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_LOG = 10
     * }
     */
    public static int GGML_OP_LOG() {
        return GGML_OP_LOG;
    }
    private static final int GGML_OP_SIN = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SIN = 11
     * }
     */
    public static int GGML_OP_SIN() {
        return GGML_OP_SIN;
    }
    private static final int GGML_OP_COS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_COS = 12
     * }
     */
    public static int GGML_OP_COS() {
        return GGML_OP_COS;
    }
    private static final int GGML_OP_SUM = (int)13L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SUM = 13
     * }
     */
    public static int GGML_OP_SUM() {
        return GGML_OP_SUM;
    }
    private static final int GGML_OP_SUM_ROWS = (int)14L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SUM_ROWS = 14
     * }
     */
    public static int GGML_OP_SUM_ROWS() {
        return GGML_OP_SUM_ROWS;
    }
    private static final int GGML_OP_MEAN = (int)15L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MEAN = 15
     * }
     */
    public static int GGML_OP_MEAN() {
        return GGML_OP_MEAN;
    }
    private static final int GGML_OP_ARGMAX = (int)16L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ARGMAX = 16
     * }
     */
    public static int GGML_OP_ARGMAX() {
        return GGML_OP_ARGMAX;
    }
    private static final int GGML_OP_COUNT_EQUAL = (int)17L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_COUNT_EQUAL = 17
     * }
     */
    public static int GGML_OP_COUNT_EQUAL() {
        return GGML_OP_COUNT_EQUAL;
    }
    private static final int GGML_OP_REPEAT = (int)18L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_REPEAT = 18
     * }
     */
    public static int GGML_OP_REPEAT() {
        return GGML_OP_REPEAT;
    }
    private static final int GGML_OP_REPEAT_BACK = (int)19L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_REPEAT_BACK = 19
     * }
     */
    public static int GGML_OP_REPEAT_BACK() {
        return GGML_OP_REPEAT_BACK;
    }
    private static final int GGML_OP_CONCAT = (int)20L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONCAT = 20
     * }
     */
    public static int GGML_OP_CONCAT() {
        return GGML_OP_CONCAT;
    }
    private static final int GGML_OP_SILU_BACK = (int)21L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SILU_BACK = 21
     * }
     */
    public static int GGML_OP_SILU_BACK() {
        return GGML_OP_SILU_BACK;
    }
    private static final int GGML_OP_NORM = (int)22L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_NORM = 22
     * }
     */
    public static int GGML_OP_NORM() {
        return GGML_OP_NORM;
    }
    private static final int GGML_OP_RMS_NORM = (int)23L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RMS_NORM = 23
     * }
     */
    public static int GGML_OP_RMS_NORM() {
        return GGML_OP_RMS_NORM;
    }
    private static final int GGML_OP_RMS_NORM_BACK = (int)24L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RMS_NORM_BACK = 24
     * }
     */
    public static int GGML_OP_RMS_NORM_BACK() {
        return GGML_OP_RMS_NORM_BACK;
    }
    private static final int GGML_OP_GROUP_NORM = (int)25L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GROUP_NORM = 25
     * }
     */
    public static int GGML_OP_GROUP_NORM() {
        return GGML_OP_GROUP_NORM;
    }
    private static final int GGML_OP_L2_NORM = (int)26L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_L2_NORM = 26
     * }
     */
    public static int GGML_OP_L2_NORM() {
        return GGML_OP_L2_NORM;
    }
    private static final int GGML_OP_MUL_MAT = (int)27L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MUL_MAT = 27
     * }
     */
    public static int GGML_OP_MUL_MAT() {
        return GGML_OP_MUL_MAT;
    }
    private static final int GGML_OP_MUL_MAT_ID = (int)28L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MUL_MAT_ID = 28
     * }
     */
    public static int GGML_OP_MUL_MAT_ID() {
        return GGML_OP_MUL_MAT_ID;
    }
    private static final int GGML_OP_OUT_PROD = (int)29L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_OUT_PROD = 29
     * }
     */
    public static int GGML_OP_OUT_PROD() {
        return GGML_OP_OUT_PROD;
    }
    private static final int GGML_OP_SCALE = (int)30L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SCALE = 30
     * }
     */
    public static int GGML_OP_SCALE() {
        return GGML_OP_SCALE;
    }
    private static final int GGML_OP_SET = (int)31L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SET = 31
     * }
     */
    public static int GGML_OP_SET() {
        return GGML_OP_SET;
    }
    private static final int GGML_OP_CPY = (int)32L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CPY = 32
     * }
     */
    public static int GGML_OP_CPY() {
        return GGML_OP_CPY;
    }
    private static final int GGML_OP_CONT = (int)33L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONT = 33
     * }
     */
    public static int GGML_OP_CONT() {
        return GGML_OP_CONT;
    }
    private static final int GGML_OP_RESHAPE = (int)34L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RESHAPE = 34
     * }
     */
    public static int GGML_OP_RESHAPE() {
        return GGML_OP_RESHAPE;
    }
    private static final int GGML_OP_VIEW = (int)35L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_VIEW = 35
     * }
     */
    public static int GGML_OP_VIEW() {
        return GGML_OP_VIEW;
    }
    private static final int GGML_OP_PERMUTE = (int)36L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_PERMUTE = 36
     * }
     */
    public static int GGML_OP_PERMUTE() {
        return GGML_OP_PERMUTE;
    }
    private static final int GGML_OP_TRANSPOSE = (int)37L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_TRANSPOSE = 37
     * }
     */
    public static int GGML_OP_TRANSPOSE() {
        return GGML_OP_TRANSPOSE;
    }
    private static final int GGML_OP_GET_ROWS = (int)38L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GET_ROWS = 38
     * }
     */
    public static int GGML_OP_GET_ROWS() {
        return GGML_OP_GET_ROWS;
    }
    private static final int GGML_OP_GET_ROWS_BACK = (int)39L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GET_ROWS_BACK = 39
     * }
     */
    public static int GGML_OP_GET_ROWS_BACK() {
        return GGML_OP_GET_ROWS_BACK;
    }
    private static final int GGML_OP_DIAG = (int)40L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIAG = 40
     * }
     */
    public static int GGML_OP_DIAG() {
        return GGML_OP_DIAG;
    }
    private static final int GGML_OP_DIAG_MASK_INF = (int)41L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIAG_MASK_INF = 41
     * }
     */
    public static int GGML_OP_DIAG_MASK_INF() {
        return GGML_OP_DIAG_MASK_INF;
    }
    private static final int GGML_OP_DIAG_MASK_ZERO = (int)42L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_DIAG_MASK_ZERO = 42
     * }
     */
    public static int GGML_OP_DIAG_MASK_ZERO() {
        return GGML_OP_DIAG_MASK_ZERO;
    }
    private static final int GGML_OP_SOFT_MAX = (int)43L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SOFT_MAX = 43
     * }
     */
    public static int GGML_OP_SOFT_MAX() {
        return GGML_OP_SOFT_MAX;
    }
    private static final int GGML_OP_SOFT_MAX_BACK = (int)44L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SOFT_MAX_BACK = 44
     * }
     */
    public static int GGML_OP_SOFT_MAX_BACK() {
        return GGML_OP_SOFT_MAX_BACK;
    }
    private static final int GGML_OP_ROPE = (int)45L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ROPE = 45
     * }
     */
    public static int GGML_OP_ROPE() {
        return GGML_OP_ROPE;
    }
    private static final int GGML_OP_ROPE_BACK = (int)46L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ROPE_BACK = 46
     * }
     */
    public static int GGML_OP_ROPE_BACK() {
        return GGML_OP_ROPE_BACK;
    }
    private static final int GGML_OP_CLAMP = (int)47L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CLAMP = 47
     * }
     */
    public static int GGML_OP_CLAMP() {
        return GGML_OP_CLAMP;
    }
    private static final int GGML_OP_CONV_TRANSPOSE_1D = (int)48L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONV_TRANSPOSE_1D = 48
     * }
     */
    public static int GGML_OP_CONV_TRANSPOSE_1D() {
        return GGML_OP_CONV_TRANSPOSE_1D;
    }
    private static final int GGML_OP_IM2COL = (int)49L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_IM2COL = 49
     * }
     */
    public static int GGML_OP_IM2COL() {
        return GGML_OP_IM2COL;
    }
    private static final int GGML_OP_IM2COL_BACK = (int)50L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_IM2COL_BACK = 50
     * }
     */
    public static int GGML_OP_IM2COL_BACK() {
        return GGML_OP_IM2COL_BACK;
    }
    private static final int GGML_OP_CONV_2D_DW = (int)51L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONV_2D_DW = 51
     * }
     */
    public static int GGML_OP_CONV_2D_DW() {
        return GGML_OP_CONV_2D_DW;
    }
    private static final int GGML_OP_CONV_TRANSPOSE_2D = (int)52L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CONV_TRANSPOSE_2D = 52
     * }
     */
    public static int GGML_OP_CONV_TRANSPOSE_2D() {
        return GGML_OP_CONV_TRANSPOSE_2D;
    }
    private static final int GGML_OP_POOL_1D = (int)53L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_POOL_1D = 53
     * }
     */
    public static int GGML_OP_POOL_1D() {
        return GGML_OP_POOL_1D;
    }
    private static final int GGML_OP_POOL_2D = (int)54L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_POOL_2D = 54
     * }
     */
    public static int GGML_OP_POOL_2D() {
        return GGML_OP_POOL_2D;
    }
    private static final int GGML_OP_POOL_2D_BACK = (int)55L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_POOL_2D_BACK = 55
     * }
     */
    public static int GGML_OP_POOL_2D_BACK() {
        return GGML_OP_POOL_2D_BACK;
    }
    private static final int GGML_OP_UPSCALE = (int)56L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_UPSCALE = 56
     * }
     */
    public static int GGML_OP_UPSCALE() {
        return GGML_OP_UPSCALE;
    }
    private static final int GGML_OP_PAD = (int)57L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_PAD = 57
     * }
     */
    public static int GGML_OP_PAD() {
        return GGML_OP_PAD;
    }
    private static final int GGML_OP_PAD_REFLECT_1D = (int)58L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_PAD_REFLECT_1D = 58
     * }
     */
    public static int GGML_OP_PAD_REFLECT_1D() {
        return GGML_OP_PAD_REFLECT_1D;
    }
    private static final int GGML_OP_ARANGE = (int)59L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ARANGE = 59
     * }
     */
    public static int GGML_OP_ARANGE() {
        return GGML_OP_ARANGE;
    }
    private static final int GGML_OP_TIMESTEP_EMBEDDING = (int)60L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_TIMESTEP_EMBEDDING = 60
     * }
     */
    public static int GGML_OP_TIMESTEP_EMBEDDING() {
        return GGML_OP_TIMESTEP_EMBEDDING;
    }
    private static final int GGML_OP_ARGSORT = (int)61L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ARGSORT = 61
     * }
     */
    public static int GGML_OP_ARGSORT() {
        return GGML_OP_ARGSORT;
    }
    private static final int GGML_OP_LEAKY_RELU = (int)62L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_LEAKY_RELU = 62
     * }
     */
    public static int GGML_OP_LEAKY_RELU() {
        return GGML_OP_LEAKY_RELU;
    }
    private static final int GGML_OP_FLASH_ATTN_EXT = (int)63L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_FLASH_ATTN_EXT = 63
     * }
     */
    public static int GGML_OP_FLASH_ATTN_EXT() {
        return GGML_OP_FLASH_ATTN_EXT;
    }
    private static final int GGML_OP_FLASH_ATTN_BACK = (int)64L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_FLASH_ATTN_BACK = 64
     * }
     */
    public static int GGML_OP_FLASH_ATTN_BACK() {
        return GGML_OP_FLASH_ATTN_BACK;
    }
    private static final int GGML_OP_SSM_CONV = (int)65L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SSM_CONV = 65
     * }
     */
    public static int GGML_OP_SSM_CONV() {
        return GGML_OP_SSM_CONV;
    }
    private static final int GGML_OP_SSM_SCAN = (int)66L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_SSM_SCAN = 66
     * }
     */
    public static int GGML_OP_SSM_SCAN() {
        return GGML_OP_SSM_SCAN;
    }
    private static final int GGML_OP_WIN_PART = (int)67L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_WIN_PART = 67
     * }
     */
    public static int GGML_OP_WIN_PART() {
        return GGML_OP_WIN_PART;
    }
    private static final int GGML_OP_WIN_UNPART = (int)68L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_WIN_UNPART = 68
     * }
     */
    public static int GGML_OP_WIN_UNPART() {
        return GGML_OP_WIN_UNPART;
    }
    private static final int GGML_OP_GET_REL_POS = (int)69L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GET_REL_POS = 69
     * }
     */
    public static int GGML_OP_GET_REL_POS() {
        return GGML_OP_GET_REL_POS;
    }
    private static final int GGML_OP_ADD_REL_POS = (int)70L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_ADD_REL_POS = 70
     * }
     */
    public static int GGML_OP_ADD_REL_POS() {
        return GGML_OP_ADD_REL_POS;
    }
    private static final int GGML_OP_RWKV_WKV6 = (int)71L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RWKV_WKV6 = 71
     * }
     */
    public static int GGML_OP_RWKV_WKV6() {
        return GGML_OP_RWKV_WKV6;
    }
    private static final int GGML_OP_GATED_LINEAR_ATTN = (int)72L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_GATED_LINEAR_ATTN = 72
     * }
     */
    public static int GGML_OP_GATED_LINEAR_ATTN() {
        return GGML_OP_GATED_LINEAR_ATTN;
    }
    private static final int GGML_OP_RWKV_WKV7 = (int)73L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_RWKV_WKV7 = 73
     * }
     */
    public static int GGML_OP_RWKV_WKV7() {
        return GGML_OP_RWKV_WKV7;
    }
    private static final int GGML_OP_UNARY = (int)74L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_UNARY = 74
     * }
     */
    public static int GGML_OP_UNARY() {
        return GGML_OP_UNARY;
    }
    private static final int GGML_OP_MAP_CUSTOM1 = (int)75L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM1 = 75
     * }
     */
    public static int GGML_OP_MAP_CUSTOM1() {
        return GGML_OP_MAP_CUSTOM1;
    }
    private static final int GGML_OP_MAP_CUSTOM2 = (int)76L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM2 = 76
     * }
     */
    public static int GGML_OP_MAP_CUSTOM2() {
        return GGML_OP_MAP_CUSTOM2;
    }
    private static final int GGML_OP_MAP_CUSTOM3 = (int)77L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_MAP_CUSTOM3 = 77
     * }
     */
    public static int GGML_OP_MAP_CUSTOM3() {
        return GGML_OP_MAP_CUSTOM3;
    }
    private static final int GGML_OP_CUSTOM = (int)78L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CUSTOM = 78
     * }
     */
    public static int GGML_OP_CUSTOM() {
        return GGML_OP_CUSTOM;
    }
    private static final int GGML_OP_CROSS_ENTROPY_LOSS = (int)79L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CROSS_ENTROPY_LOSS = 79
     * }
     */
    public static int GGML_OP_CROSS_ENTROPY_LOSS() {
        return GGML_OP_CROSS_ENTROPY_LOSS;
    }
    private static final int GGML_OP_CROSS_ENTROPY_LOSS_BACK = (int)80L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_CROSS_ENTROPY_LOSS_BACK = 80
     * }
     */
    public static int GGML_OP_CROSS_ENTROPY_LOSS_BACK() {
        return GGML_OP_CROSS_ENTROPY_LOSS_BACK;
    }
    private static final int GGML_OP_OPT_STEP_ADAMW = (int)81L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_OPT_STEP_ADAMW = 81
     * }
     */
    public static int GGML_OP_OPT_STEP_ADAMW() {
        return GGML_OP_OPT_STEP_ADAMW;
    }
    private static final int GGML_OP_COUNT = (int)82L;
    /**
     * {@snippet lang=c :
     * enum ggml_op.GGML_OP_COUNT = 82
     * }
     */
    public static int GGML_OP_COUNT() {
        return GGML_OP_COUNT;
    }
    private static final int GGML_UNARY_OP_ABS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_ABS = 0
     * }
     */
    public static int GGML_UNARY_OP_ABS() {
        return GGML_UNARY_OP_ABS;
    }
    private static final int GGML_UNARY_OP_SGN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_SGN = 1
     * }
     */
    public static int GGML_UNARY_OP_SGN() {
        return GGML_UNARY_OP_SGN;
    }
    private static final int GGML_UNARY_OP_NEG = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_NEG = 2
     * }
     */
    public static int GGML_UNARY_OP_NEG() {
        return GGML_UNARY_OP_NEG;
    }
    private static final int GGML_UNARY_OP_STEP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_STEP = 3
     * }
     */
    public static int GGML_UNARY_OP_STEP() {
        return GGML_UNARY_OP_STEP;
    }
    private static final int GGML_UNARY_OP_TANH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_TANH = 4
     * }
     */
    public static int GGML_UNARY_OP_TANH() {
        return GGML_UNARY_OP_TANH;
    }
    private static final int GGML_UNARY_OP_ELU = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_ELU = 5
     * }
     */
    public static int GGML_UNARY_OP_ELU() {
        return GGML_UNARY_OP_ELU;
    }
    private static final int GGML_UNARY_OP_RELU = (int)6L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_RELU = 6
     * }
     */
    public static int GGML_UNARY_OP_RELU() {
        return GGML_UNARY_OP_RELU;
    }
    private static final int GGML_UNARY_OP_SIGMOID = (int)7L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_SIGMOID = 7
     * }
     */
    public static int GGML_UNARY_OP_SIGMOID() {
        return GGML_UNARY_OP_SIGMOID;
    }
    private static final int GGML_UNARY_OP_GELU = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU = 8
     * }
     */
    public static int GGML_UNARY_OP_GELU() {
        return GGML_UNARY_OP_GELU;
    }
    private static final int GGML_UNARY_OP_GELU_QUICK = (int)9L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU_QUICK = 9
     * }
     */
    public static int GGML_UNARY_OP_GELU_QUICK() {
        return GGML_UNARY_OP_GELU_QUICK;
    }
    private static final int GGML_UNARY_OP_SILU = (int)10L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_SILU = 10
     * }
     */
    public static int GGML_UNARY_OP_SILU() {
        return GGML_UNARY_OP_SILU;
    }
    private static final int GGML_UNARY_OP_HARDSWISH = (int)11L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_HARDSWISH = 11
     * }
     */
    public static int GGML_UNARY_OP_HARDSWISH() {
        return GGML_UNARY_OP_HARDSWISH;
    }
    private static final int GGML_UNARY_OP_HARDSIGMOID = (int)12L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_HARDSIGMOID = 12
     * }
     */
    public static int GGML_UNARY_OP_HARDSIGMOID() {
        return GGML_UNARY_OP_HARDSIGMOID;
    }
    private static final int GGML_UNARY_OP_EXP = (int)13L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_EXP = 13
     * }
     */
    public static int GGML_UNARY_OP_EXP() {
        return GGML_UNARY_OP_EXP;
    }
    private static final int GGML_UNARY_OP_GELU_ERF = (int)14L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_GELU_ERF = 14
     * }
     */
    public static int GGML_UNARY_OP_GELU_ERF() {
        return GGML_UNARY_OP_GELU_ERF;
    }
    private static final int GGML_UNARY_OP_COUNT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum ggml_unary_op.GGML_UNARY_OP_COUNT = 15
     * }
     */
    public static int GGML_UNARY_OP_COUNT() {
        return GGML_UNARY_OP_COUNT;
    }
    private static final int GGML_OBJECT_TYPE_TENSOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_object_type.GGML_OBJECT_TYPE_TENSOR = 0
     * }
     */
    public static int GGML_OBJECT_TYPE_TENSOR() {
        return GGML_OBJECT_TYPE_TENSOR;
    }
    private static final int GGML_OBJECT_TYPE_GRAPH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_object_type.GGML_OBJECT_TYPE_GRAPH = 1
     * }
     */
    public static int GGML_OBJECT_TYPE_GRAPH() {
        return GGML_OBJECT_TYPE_GRAPH;
    }
    private static final int GGML_OBJECT_TYPE_WORK_BUFFER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_object_type.GGML_OBJECT_TYPE_WORK_BUFFER = 2
     * }
     */
    public static int GGML_OBJECT_TYPE_WORK_BUFFER() {
        return GGML_OBJECT_TYPE_WORK_BUFFER;
    }
    private static final int GGML_LOG_LEVEL_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_NONE = 0
     * }
     */
    public static int GGML_LOG_LEVEL_NONE() {
        return GGML_LOG_LEVEL_NONE;
    }
    private static final int GGML_LOG_LEVEL_DEBUG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_DEBUG = 1
     * }
     */
    public static int GGML_LOG_LEVEL_DEBUG() {
        return GGML_LOG_LEVEL_DEBUG;
    }
    private static final int GGML_LOG_LEVEL_INFO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_INFO = 2
     * }
     */
    public static int GGML_LOG_LEVEL_INFO() {
        return GGML_LOG_LEVEL_INFO;
    }
    private static final int GGML_LOG_LEVEL_WARN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_WARN = 3
     * }
     */
    public static int GGML_LOG_LEVEL_WARN() {
        return GGML_LOG_LEVEL_WARN;
    }
    private static final int GGML_LOG_LEVEL_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_ERROR = 4
     * }
     */
    public static int GGML_LOG_LEVEL_ERROR() {
        return GGML_LOG_LEVEL_ERROR;
    }
    private static final int GGML_LOG_LEVEL_CONT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum ggml_log_level.GGML_LOG_LEVEL_CONT = 5
     * }
     */
    public static int GGML_LOG_LEVEL_CONT() {
        return GGML_LOG_LEVEL_CONT;
    }
    private static final int GGML_TENSOR_FLAG_INPUT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_INPUT = 1
     * }
     */
    public static int GGML_TENSOR_FLAG_INPUT() {
        return GGML_TENSOR_FLAG_INPUT;
    }
    private static final int GGML_TENSOR_FLAG_OUTPUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_OUTPUT = 2
     * }
     */
    public static int GGML_TENSOR_FLAG_OUTPUT() {
        return GGML_TENSOR_FLAG_OUTPUT;
    }
    private static final int GGML_TENSOR_FLAG_PARAM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_PARAM = 4
     * }
     */
    public static int GGML_TENSOR_FLAG_PARAM() {
        return GGML_TENSOR_FLAG_PARAM;
    }
    private static final int GGML_TENSOR_FLAG_LOSS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum ggml_tensor_flag.GGML_TENSOR_FLAG_LOSS = 8
     * }
     */
    public static int GGML_TENSOR_FLAG_LOSS() {
        return GGML_TENSOR_FLAG_LOSS;
    }
    /**
     * {@snippet lang=c :
     * typedef ggml_guid *ggml_guid_t
     * }
     */
    public static final AddressLayout ggml_guid_t = llama_h.C_POINTER;

    private static class ggml_guid_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_guid_matches");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_guid_matches(ggml_guid_t guid_a, ggml_guid_t guid_b)
     * }
     */
    public static FunctionDescriptor ggml_guid_matches$descriptor() {
        return ggml_guid_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_guid_matches(ggml_guid_t guid_a, ggml_guid_t guid_b)
     * }
     */
    public static MethodHandle ggml_guid_matches$handle() {
        return ggml_guid_matches.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_guid_matches(ggml_guid_t guid_a, ggml_guid_t guid_b)
     * }
     */
    public static MemorySegment ggml_guid_matches$address() {
        return ggml_guid_matches.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_guid_matches(ggml_guid_t guid_a, ggml_guid_t guid_b)
     * }
     */
    public static boolean ggml_guid_matches(MemorySegment guid_a, MemorySegment guid_b) {
        var mh$ = ggml_guid_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_guid_matches", guid_a, guid_b);
            }
            return (boolean)mh$.invokeExact(guid_a, guid_b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_time_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_time_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_time_init(void)
     * }
     */
    public static FunctionDescriptor ggml_time_init$descriptor() {
        return ggml_time_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_time_init(void)
     * }
     */
    public static MethodHandle ggml_time_init$handle() {
        return ggml_time_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_time_init(void)
     * }
     */
    public static MemorySegment ggml_time_init$address() {
        return ggml_time_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_time_init(void)
     * }
     */
    public static void ggml_time_init() {
        var mh$ = ggml_time_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_time_init");
            }
            mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_time_ms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_time_ms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_time_ms(void)
     * }
     */
    public static FunctionDescriptor ggml_time_ms$descriptor() {
        return ggml_time_ms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_time_ms(void)
     * }
     */
    public static MethodHandle ggml_time_ms$handle() {
        return ggml_time_ms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_time_ms(void)
     * }
     */
    public static MemorySegment ggml_time_ms$address() {
        return ggml_time_ms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_time_ms(void)
     * }
     */
    public static long ggml_time_ms() {
        var mh$ = ggml_time_ms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_time_ms");
            }
            return (long)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_time_us {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_time_us");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_time_us(void)
     * }
     */
    public static FunctionDescriptor ggml_time_us$descriptor() {
        return ggml_time_us.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_time_us(void)
     * }
     */
    public static MethodHandle ggml_time_us$handle() {
        return ggml_time_us.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_time_us(void)
     * }
     */
    public static MemorySegment ggml_time_us$address() {
        return ggml_time_us.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_time_us(void)
     * }
     */
    public static long ggml_time_us() {
        var mh$ = ggml_time_us.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_time_us");
            }
            return (long)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cycles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cycles");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_cycles(void)
     * }
     */
    public static FunctionDescriptor ggml_cycles$descriptor() {
        return ggml_cycles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_cycles(void)
     * }
     */
    public static MethodHandle ggml_cycles$handle() {
        return ggml_cycles.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_cycles(void)
     * }
     */
    public static MemorySegment ggml_cycles$address() {
        return ggml_cycles.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_cycles(void)
     * }
     */
    public static long ggml_cycles() {
        var mh$ = ggml_cycles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cycles");
            }
            return (long)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cycles_per_ms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cycles_per_ms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_cycles_per_ms(void)
     * }
     */
    public static FunctionDescriptor ggml_cycles_per_ms$descriptor() {
        return ggml_cycles_per_ms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_cycles_per_ms(void)
     * }
     */
    public static MethodHandle ggml_cycles_per_ms$handle() {
        return ggml_cycles_per_ms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_cycles_per_ms(void)
     * }
     */
    public static MemorySegment ggml_cycles_per_ms$address() {
        return ggml_cycles_per_ms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_cycles_per_ms(void)
     * }
     */
    public static long ggml_cycles_per_ms() {
        var mh$ = ggml_cycles_per_ms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cycles_per_ms");
            }
            return (long)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_fopen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_fopen");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern FILE *ggml_fopen(const char *fname, const char *mode)
     * }
     */
    public static FunctionDescriptor ggml_fopen$descriptor() {
        return ggml_fopen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern FILE *ggml_fopen(const char *fname, const char *mode)
     * }
     */
    public static MethodHandle ggml_fopen$handle() {
        return ggml_fopen.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern FILE *ggml_fopen(const char *fname, const char *mode)
     * }
     */
    public static MemorySegment ggml_fopen$address() {
        return ggml_fopen.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern FILE *ggml_fopen(const char *fname, const char *mode)
     * }
     */
    public static MemorySegment ggml_fopen(MemorySegment fname, MemorySegment mode) {
        var mh$ = ggml_fopen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_fopen", fname, mode);
            }
            return (MemorySegment)mh$.invokeExact(fname, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_print_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_print_object");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_print_object(const struct ggml_object *obj)
     * }
     */
    public static FunctionDescriptor ggml_print_object$descriptor() {
        return ggml_print_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_print_object(const struct ggml_object *obj)
     * }
     */
    public static MethodHandle ggml_print_object$handle() {
        return ggml_print_object.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_print_object(const struct ggml_object *obj)
     * }
     */
    public static MemorySegment ggml_print_object$address() {
        return ggml_print_object.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_print_object(const struct ggml_object *obj)
     * }
     */
    public static void ggml_print_object(MemorySegment obj) {
        var mh$ = ggml_print_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_print_object", obj);
            }
            mh$.invokeExact(obj);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_print_objects {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_print_objects");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_print_objects(const struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_print_objects$descriptor() {
        return ggml_print_objects.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_print_objects(const struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_print_objects$handle() {
        return ggml_print_objects.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_print_objects(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_print_objects$address() {
        return ggml_print_objects.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_print_objects(const struct ggml_context *ctx)
     * }
     */
    public static void ggml_print_objects(MemorySegment ctx) {
        var mh$ = ggml_print_objects.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_print_objects", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_nelements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_nelements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_nelements(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_nelements$descriptor() {
        return ggml_nelements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_nelements(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_nelements$handle() {
        return ggml_nelements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_nelements(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_nelements$address() {
        return ggml_nelements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_nelements(const struct ggml_tensor *tensor)
     * }
     */
    public static long ggml_nelements(MemorySegment tensor) {
        var mh$ = ggml_nelements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_nelements", tensor);
            }
            return (long)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_nrows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_nrows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_nrows(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_nrows$descriptor() {
        return ggml_nrows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_nrows(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_nrows$handle() {
        return ggml_nrows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_nrows(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_nrows$address() {
        return ggml_nrows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_nrows(const struct ggml_tensor *tensor)
     * }
     */
    public static long ggml_nrows(MemorySegment tensor) {
        var mh$ = ggml_nrows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_nrows", tensor);
            }
            return (long)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_nbytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_nbytes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_nbytes(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_nbytes$descriptor() {
        return ggml_nbytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_nbytes(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_nbytes$handle() {
        return ggml_nbytes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_nbytes(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_nbytes$address() {
        return ggml_nbytes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_nbytes(const struct ggml_tensor *tensor)
     * }
     */
    public static long ggml_nbytes(MemorySegment tensor) {
        var mh$ = ggml_nbytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_nbytes", tensor);
            }
            return (long)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_nbytes_pad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_nbytes_pad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_nbytes_pad(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_nbytes_pad$descriptor() {
        return ggml_nbytes_pad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_nbytes_pad(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_nbytes_pad$handle() {
        return ggml_nbytes_pad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_nbytes_pad(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_nbytes_pad$address() {
        return ggml_nbytes_pad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_nbytes_pad(const struct ggml_tensor *tensor)
     * }
     */
    public static long ggml_nbytes_pad(MemorySegment tensor) {
        var mh$ = ggml_nbytes_pad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_nbytes_pad", tensor);
            }
            return (long)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_blck_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG_LONG,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_blck_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int64_t ggml_blck_size(enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_blck_size$descriptor() {
        return ggml_blck_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int64_t ggml_blck_size(enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_blck_size$handle() {
        return ggml_blck_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int64_t ggml_blck_size(enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_blck_size$address() {
        return ggml_blck_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int64_t ggml_blck_size(enum ggml_type type)
     * }
     */
    public static long ggml_blck_size(int type) {
        var mh$ = ggml_blck_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_blck_size", type);
            }
            return (long)mh$.invokeExact(type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_type_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_type_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_type_size(enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_type_size$descriptor() {
        return ggml_type_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_type_size(enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_type_size$handle() {
        return ggml_type_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_type_size(enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_type_size$address() {
        return ggml_type_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_type_size(enum ggml_type type)
     * }
     */
    public static long ggml_type_size(int type) {
        var mh$ = ggml_type_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_type_size", type);
            }
            return (long)mh$.invokeExact(type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_row_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_INT,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_row_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_row_size(enum ggml_type type, int64_t ne)
     * }
     */
    public static FunctionDescriptor ggml_row_size$descriptor() {
        return ggml_row_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_row_size(enum ggml_type type, int64_t ne)
     * }
     */
    public static MethodHandle ggml_row_size$handle() {
        return ggml_row_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_row_size(enum ggml_type type, int64_t ne)
     * }
     */
    public static MemorySegment ggml_row_size$address() {
        return ggml_row_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_row_size(enum ggml_type type, int64_t ne)
     * }
     */
    public static long ggml_row_size(int type, long ne) {
        var mh$ = ggml_row_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_row_size", type, ne);
            }
            return (long)mh$.invokeExact(type, ne);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_type_sizef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_DOUBLE,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_type_sizef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double ggml_type_sizef(enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_type_sizef$descriptor() {
        return ggml_type_sizef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double ggml_type_sizef(enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_type_sizef$handle() {
        return ggml_type_sizef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern double ggml_type_sizef(enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_type_sizef$address() {
        return ggml_type_sizef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern double ggml_type_sizef(enum ggml_type type)
     * }
     */
    public static double ggml_type_sizef(int type) {
        var mh$ = ggml_type_sizef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_type_sizef", type);
            }
            return (double)mh$.invokeExact(type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_type_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_type_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_type_name(enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_type_name$descriptor() {
        return ggml_type_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_type_name(enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_type_name$handle() {
        return ggml_type_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_type_name(enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_type_name$address() {
        return ggml_type_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_type_name(enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_type_name(int type) {
        var mh$ = ggml_type_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_type_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_op_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_op_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_op_name(enum ggml_op op)
     * }
     */
    public static FunctionDescriptor ggml_op_name$descriptor() {
        return ggml_op_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_op_name(enum ggml_op op)
     * }
     */
    public static MethodHandle ggml_op_name$handle() {
        return ggml_op_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_op_name(enum ggml_op op)
     * }
     */
    public static MemorySegment ggml_op_name$address() {
        return ggml_op_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_op_name(enum ggml_op op)
     * }
     */
    public static MemorySegment ggml_op_name(int op) {
        var mh$ = ggml_op_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_op_name", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_op_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_op_symbol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_op_symbol(enum ggml_op op)
     * }
     */
    public static FunctionDescriptor ggml_op_symbol$descriptor() {
        return ggml_op_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_op_symbol(enum ggml_op op)
     * }
     */
    public static MethodHandle ggml_op_symbol$handle() {
        return ggml_op_symbol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_op_symbol(enum ggml_op op)
     * }
     */
    public static MemorySegment ggml_op_symbol$address() {
        return ggml_op_symbol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_op_symbol(enum ggml_op op)
     * }
     */
    public static MemorySegment ggml_op_symbol(int op) {
        var mh$ = ggml_op_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_op_symbol", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_unary_op_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_unary_op_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_unary_op_name(enum ggml_unary_op op)
     * }
     */
    public static FunctionDescriptor ggml_unary_op_name$descriptor() {
        return ggml_unary_op_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_unary_op_name(enum ggml_unary_op op)
     * }
     */
    public static MethodHandle ggml_unary_op_name$handle() {
        return ggml_unary_op_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_unary_op_name(enum ggml_unary_op op)
     * }
     */
    public static MemorySegment ggml_unary_op_name$address() {
        return ggml_unary_op_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_unary_op_name(enum ggml_unary_op op)
     * }
     */
    public static MemorySegment ggml_unary_op_name(int op) {
        var mh$ = ggml_unary_op_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_unary_op_name", op);
            }
            return (MemorySegment)mh$.invokeExact(op);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_op_desc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_op_desc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_op_desc(const struct ggml_tensor *t)
     * }
     */
    public static FunctionDescriptor ggml_op_desc$descriptor() {
        return ggml_op_desc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_op_desc(const struct ggml_tensor *t)
     * }
     */
    public static MethodHandle ggml_op_desc$handle() {
        return ggml_op_desc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_op_desc(const struct ggml_tensor *t)
     * }
     */
    public static MemorySegment ggml_op_desc$address() {
        return ggml_op_desc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_op_desc(const struct ggml_tensor *t)
     * }
     */
    public static MemorySegment ggml_op_desc(MemorySegment t) {
        var mh$ = ggml_op_desc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_op_desc", t);
            }
            return (MemorySegment)mh$.invokeExact(t);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_element_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_element_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_element_size(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_element_size$descriptor() {
        return ggml_element_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_element_size(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_element_size$handle() {
        return ggml_element_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_element_size(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_element_size$address() {
        return ggml_element_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_element_size(const struct ggml_tensor *tensor)
     * }
     */
    public static long ggml_element_size(MemorySegment tensor) {
        var mh$ = ggml_element_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_element_size", tensor);
            }
            return (long)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_quantized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_quantized");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_quantized(enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_is_quantized$descriptor() {
        return ggml_is_quantized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_quantized(enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_is_quantized$handle() {
        return ggml_is_quantized.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_quantized(enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_is_quantized$address() {
        return ggml_is_quantized.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_quantized(enum ggml_type type)
     * }
     */
    public static boolean ggml_is_quantized(int type) {
        var mh$ = ggml_is_quantized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_quantized", type);
            }
            return (boolean)mh$.invokeExact(type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_ftype_to_ggml_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_ftype_to_ggml_type");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern enum ggml_type ggml_ftype_to_ggml_type(enum ggml_ftype ftype)
     * }
     */
    public static FunctionDescriptor ggml_ftype_to_ggml_type$descriptor() {
        return ggml_ftype_to_ggml_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern enum ggml_type ggml_ftype_to_ggml_type(enum ggml_ftype ftype)
     * }
     */
    public static MethodHandle ggml_ftype_to_ggml_type$handle() {
        return ggml_ftype_to_ggml_type.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern enum ggml_type ggml_ftype_to_ggml_type(enum ggml_ftype ftype)
     * }
     */
    public static MemorySegment ggml_ftype_to_ggml_type$address() {
        return ggml_ftype_to_ggml_type.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern enum ggml_type ggml_ftype_to_ggml_type(enum ggml_ftype ftype)
     * }
     */
    public static int ggml_ftype_to_ggml_type(int ftype) {
        var mh$ = ggml_ftype_to_ggml_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_ftype_to_ggml_type", ftype);
            }
            return (int)mh$.invokeExact(ftype);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_transposed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_transposed");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_transposed(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_transposed$descriptor() {
        return ggml_is_transposed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_transposed(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_transposed$handle() {
        return ggml_is_transposed.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_transposed(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_transposed$address() {
        return ggml_is_transposed.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_transposed(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_transposed(MemorySegment tensor) {
        var mh$ = ggml_is_transposed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_transposed", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_permuted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_permuted");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_permuted(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_permuted$descriptor() {
        return ggml_is_permuted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_permuted(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_permuted$handle() {
        return ggml_is_permuted.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_permuted(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_permuted$address() {
        return ggml_is_permuted.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_permuted(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_permuted(MemorySegment tensor) {
        var mh$ = ggml_is_permuted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_permuted", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_empty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_empty(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_empty$descriptor() {
        return ggml_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_empty(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_empty$handle() {
        return ggml_is_empty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_empty(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_empty$address() {
        return ggml_is_empty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_empty(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_empty(MemorySegment tensor) {
        var mh$ = ggml_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_empty", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_scalar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_scalar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_scalar(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_scalar$descriptor() {
        return ggml_is_scalar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_scalar(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_scalar$handle() {
        return ggml_is_scalar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_scalar(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_scalar$address() {
        return ggml_is_scalar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_scalar(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_scalar(MemorySegment tensor) {
        var mh$ = ggml_is_scalar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_scalar", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_vector {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_vector");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_vector(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_vector$descriptor() {
        return ggml_is_vector.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_vector(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_vector$handle() {
        return ggml_is_vector.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_vector(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_vector$address() {
        return ggml_is_vector.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_vector(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_vector(MemorySegment tensor) {
        var mh$ = ggml_is_vector.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_vector", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_matrix");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_matrix(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_matrix$descriptor() {
        return ggml_is_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_matrix(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_matrix$handle() {
        return ggml_is_matrix.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_matrix(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_matrix$address() {
        return ggml_is_matrix.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_matrix(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_matrix(MemorySegment tensor) {
        var mh$ = ggml_is_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_matrix", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_3d(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_3d$descriptor() {
        return ggml_is_3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_3d(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_3d$handle() {
        return ggml_is_3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_3d(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_3d$address() {
        return ggml_is_3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_3d(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_3d(MemorySegment tensor) {
        var mh$ = ggml_is_3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_3d", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_n_dims {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_n_dims");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ggml_n_dims(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_n_dims$descriptor() {
        return ggml_n_dims.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ggml_n_dims(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_n_dims$handle() {
        return ggml_n_dims.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern int ggml_n_dims(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_n_dims$address() {
        return ggml_n_dims.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern int ggml_n_dims(const struct ggml_tensor *tensor)
     * }
     */
    public static int ggml_n_dims(MemorySegment tensor) {
        var mh$ = ggml_n_dims.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_n_dims", tensor);
            }
            return (int)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_contiguous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_contiguous");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_contiguous$descriptor() {
        return ggml_is_contiguous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_contiguous$handle() {
        return ggml_is_contiguous.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_contiguous$address() {
        return ggml_is_contiguous.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_contiguous(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_contiguous", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_contiguous_0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_contiguous_0");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_0(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_contiguous_0$descriptor() {
        return ggml_is_contiguous_0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_0(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_contiguous_0$handle() {
        return ggml_is_contiguous_0.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_0(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_contiguous_0$address() {
        return ggml_is_contiguous_0.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_0(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_contiguous_0(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_contiguous_0", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_contiguous_1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_contiguous_1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_1(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_contiguous_1$descriptor() {
        return ggml_is_contiguous_1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_1(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_contiguous_1$handle() {
        return ggml_is_contiguous_1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_1(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_contiguous_1$address() {
        return ggml_is_contiguous_1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_1(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_contiguous_1(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_contiguous_1", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_contiguous_2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_contiguous_2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_2(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_contiguous_2$descriptor() {
        return ggml_is_contiguous_2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_2(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_contiguous_2$handle() {
        return ggml_is_contiguous_2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_2(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_contiguous_2$address() {
        return ggml_is_contiguous_2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_2(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_contiguous_2(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_contiguous_2", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_contiguously_allocated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_contiguously_allocated");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguously_allocated(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_contiguously_allocated$descriptor() {
        return ggml_is_contiguously_allocated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguously_allocated(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_contiguously_allocated$handle() {
        return ggml_is_contiguously_allocated.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguously_allocated(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_contiguously_allocated$address() {
        return ggml_is_contiguously_allocated.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_contiguously_allocated(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_contiguously_allocated(MemorySegment tensor) {
        var mh$ = ggml_is_contiguously_allocated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_contiguously_allocated", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_is_contiguous_channels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_is_contiguous_channels");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_channels(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_is_contiguous_channels$descriptor() {
        return ggml_is_contiguous_channels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_channels(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_is_contiguous_channels$handle() {
        return ggml_is_contiguous_channels.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_channels(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_is_contiguous_channels$address() {
        return ggml_is_contiguous_channels.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_is_contiguous_channels(const struct ggml_tensor *tensor)
     * }
     */
    public static boolean ggml_is_contiguous_channels(MemorySegment tensor) {
        var mh$ = ggml_is_contiguous_channels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_is_contiguous_channels", tensor);
            }
            return (boolean)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_are_same_shape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_are_same_shape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_are_same_shape(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static FunctionDescriptor ggml_are_same_shape$descriptor() {
        return ggml_are_same_shape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_are_same_shape(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static MethodHandle ggml_are_same_shape$handle() {
        return ggml_are_same_shape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_are_same_shape(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static MemorySegment ggml_are_same_shape$address() {
        return ggml_are_same_shape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_are_same_shape(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static boolean ggml_are_same_shape(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_are_same_shape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_are_same_shape", t0, t1);
            }
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_are_same_stride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_are_same_stride");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_are_same_stride(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static FunctionDescriptor ggml_are_same_stride$descriptor() {
        return ggml_are_same_stride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_are_same_stride(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static MethodHandle ggml_are_same_stride$handle() {
        return ggml_are_same_stride.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_are_same_stride(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static MemorySegment ggml_are_same_stride$address() {
        return ggml_are_same_stride.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_are_same_stride(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static boolean ggml_are_same_stride(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_are_same_stride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_are_same_stride", t0, t1);
            }
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_can_repeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_can_repeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_can_repeat(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static FunctionDescriptor ggml_can_repeat$descriptor() {
        return ggml_can_repeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_can_repeat(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static MethodHandle ggml_can_repeat$handle() {
        return ggml_can_repeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_can_repeat(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static MemorySegment ggml_can_repeat$address() {
        return ggml_can_repeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_can_repeat(const struct ggml_tensor *t0, const struct ggml_tensor *t1)
     * }
     */
    public static boolean ggml_can_repeat(MemorySegment t0, MemorySegment t1) {
        var mh$ = ggml_can_repeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_can_repeat", t0, t1);
            }
            return (boolean)mh$.invokeExact(t0, t1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_tensor_overhead {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG    );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_tensor_overhead");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_tensor_overhead(void)
     * }
     */
    public static FunctionDescriptor ggml_tensor_overhead$descriptor() {
        return ggml_tensor_overhead.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_tensor_overhead(void)
     * }
     */
    public static MethodHandle ggml_tensor_overhead$handle() {
        return ggml_tensor_overhead.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_tensor_overhead(void)
     * }
     */
    public static MemorySegment ggml_tensor_overhead$address() {
        return ggml_tensor_overhead.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_tensor_overhead(void)
     * }
     */
    public static long ggml_tensor_overhead() {
        var mh$ = ggml_tensor_overhead.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_tensor_overhead");
            }
            return (long)mh$.invokeExact();
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_validate_row_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_validate_row_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_validate_row_data(enum ggml_type type, const void *data, size_t nbytes)
     * }
     */
    public static FunctionDescriptor ggml_validate_row_data$descriptor() {
        return ggml_validate_row_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_validate_row_data(enum ggml_type type, const void *data, size_t nbytes)
     * }
     */
    public static MethodHandle ggml_validate_row_data$handle() {
        return ggml_validate_row_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_validate_row_data(enum ggml_type type, const void *data, size_t nbytes)
     * }
     */
    public static MemorySegment ggml_validate_row_data$address() {
        return ggml_validate_row_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_validate_row_data(enum ggml_type type, const void *data, size_t nbytes)
     * }
     */
    public static boolean ggml_validate_row_data(int type, MemorySegment data, long nbytes) {
        var mh$ = ggml_validate_row_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_validate_row_data", type, data, nbytes);
            }
            return (boolean)mh$.invokeExact(type, data, nbytes);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            ggml_init_params.layout()
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_context *ggml_init(struct ggml_init_params params)
     * }
     */
    public static FunctionDescriptor ggml_init$descriptor() {
        return ggml_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_context *ggml_init(struct ggml_init_params params)
     * }
     */
    public static MethodHandle ggml_init$handle() {
        return ggml_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_context *ggml_init(struct ggml_init_params params)
     * }
     */
    public static MemorySegment ggml_init$address() {
        return ggml_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_context *ggml_init(struct ggml_init_params params)
     * }
     */
    public static MemorySegment ggml_init(MemorySegment params) {
        var mh$ = ggml_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_init", params);
            }
            return (MemorySegment)mh$.invokeExact(params);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_reset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_reset(struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_reset$descriptor() {
        return ggml_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_reset(struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_reset$handle() {
        return ggml_reset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_reset(struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_reset$address() {
        return ggml_reset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_reset(struct ggml_context *ctx)
     * }
     */
    public static void ggml_reset(MemorySegment ctx) {
        var mh$ = ggml_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_reset", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_free");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_free(struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_free$descriptor() {
        return ggml_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_free(struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_free$handle() {
        return ggml_free.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_free(struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_free$address() {
        return ggml_free.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_free(struct ggml_context *ctx)
     * }
     */
    public static void ggml_free(MemorySegment ctx) {
        var mh$ = ggml_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_free", ctx);
            }
            mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_used_mem {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_used_mem");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_used_mem(const struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_used_mem$descriptor() {
        return ggml_used_mem.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_used_mem(const struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_used_mem$handle() {
        return ggml_used_mem.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_used_mem(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_used_mem$address() {
        return ggml_used_mem.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_used_mem(const struct ggml_context *ctx)
     * }
     */
    public static long ggml_used_mem(MemorySegment ctx) {
        var mh$ = ggml_used_mem.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_used_mem", ctx);
            }
            return (long)mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_no_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_no_alloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern bool ggml_get_no_alloc(struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_get_no_alloc$descriptor() {
        return ggml_get_no_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern bool ggml_get_no_alloc(struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_get_no_alloc$handle() {
        return ggml_get_no_alloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern bool ggml_get_no_alloc(struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_no_alloc$address() {
        return ggml_get_no_alloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern bool ggml_get_no_alloc(struct ggml_context *ctx)
     * }
     */
    public static boolean ggml_get_no_alloc(MemorySegment ctx) {
        var mh$ = ggml_get_no_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_no_alloc", ctx);
            }
            return (boolean)mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_no_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_BOOL
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_no_alloc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_set_no_alloc(struct ggml_context *ctx, bool no_alloc)
     * }
     */
    public static FunctionDescriptor ggml_set_no_alloc$descriptor() {
        return ggml_set_no_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_set_no_alloc(struct ggml_context *ctx, bool no_alloc)
     * }
     */
    public static MethodHandle ggml_set_no_alloc$handle() {
        return ggml_set_no_alloc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_set_no_alloc(struct ggml_context *ctx, bool no_alloc)
     * }
     */
    public static MemorySegment ggml_set_no_alloc$address() {
        return ggml_set_no_alloc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_set_no_alloc(struct ggml_context *ctx, bool no_alloc)
     * }
     */
    public static void ggml_set_no_alloc(MemorySegment ctx, boolean no_alloc) {
        var mh$ = ggml_set_no_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_no_alloc", ctx, no_alloc);
            }
            mh$.invokeExact(ctx, no_alloc);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_mem_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_mem_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *ggml_get_mem_buffer(const struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_get_mem_buffer$descriptor() {
        return ggml_get_mem_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *ggml_get_mem_buffer(const struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_get_mem_buffer$handle() {
        return ggml_get_mem_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *ggml_get_mem_buffer(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_mem_buffer$address() {
        return ggml_get_mem_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *ggml_get_mem_buffer(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_mem_buffer(MemorySegment ctx) {
        var mh$ = ggml_get_mem_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_mem_buffer", ctx);
            }
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_mem_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_mem_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_get_mem_size(const struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_get_mem_size$descriptor() {
        return ggml_get_mem_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_get_mem_size(const struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_get_mem_size$handle() {
        return ggml_get_mem_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_get_mem_size(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_mem_size$address() {
        return ggml_get_mem_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_get_mem_size(const struct ggml_context *ctx)
     * }
     */
    public static long ggml_get_mem_size(MemorySegment ctx) {
        var mh$ = ggml_get_mem_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_mem_size", ctx);
            }
            return (long)mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_max_tensor_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_LONG,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_max_tensor_size");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t ggml_get_max_tensor_size(const struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_get_max_tensor_size$descriptor() {
        return ggml_get_max_tensor_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t ggml_get_max_tensor_size(const struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_get_max_tensor_size$handle() {
        return ggml_get_max_tensor_size.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern size_t ggml_get_max_tensor_size(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_max_tensor_size$address() {
        return ggml_get_max_tensor_size.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern size_t ggml_get_max_tensor_size(const struct ggml_context *ctx)
     * }
     */
    public static long ggml_get_max_tensor_size(MemorySegment ctx) {
        var mh$ = ggml_get_max_tensor_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_max_tensor_size", ctx);
            }
            return (long)mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_new_tensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_new_tensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor(struct ggml_context *ctx, enum ggml_type type, int n_dims, const int64_t *ne)
     * }
     */
    public static FunctionDescriptor ggml_new_tensor$descriptor() {
        return ggml_new_tensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor(struct ggml_context *ctx, enum ggml_type type, int n_dims, const int64_t *ne)
     * }
     */
    public static MethodHandle ggml_new_tensor$handle() {
        return ggml_new_tensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor(struct ggml_context *ctx, enum ggml_type type, int n_dims, const int64_t *ne)
     * }
     */
    public static MemorySegment ggml_new_tensor$address() {
        return ggml_new_tensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor(struct ggml_context *ctx, enum ggml_type type, int n_dims, const int64_t *ne)
     * }
     */
    public static MemorySegment ggml_new_tensor(MemorySegment ctx, int type, int n_dims, MemorySegment ne) {
        var mh$ = ggml_new_tensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_new_tensor", ctx, type, n_dims, ne);
            }
            return (MemorySegment)mh$.invokeExact(ctx, type, n_dims, ne);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_new_tensor_1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_new_tensor_1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_1d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0)
     * }
     */
    public static FunctionDescriptor ggml_new_tensor_1d$descriptor() {
        return ggml_new_tensor_1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_1d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0)
     * }
     */
    public static MethodHandle ggml_new_tensor_1d$handle() {
        return ggml_new_tensor_1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_1d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0)
     * }
     */
    public static MemorySegment ggml_new_tensor_1d$address() {
        return ggml_new_tensor_1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_1d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0)
     * }
     */
    public static MemorySegment ggml_new_tensor_1d(MemorySegment ctx, int type, long ne0) {
        var mh$ = ggml_new_tensor_1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_new_tensor_1d", ctx, type, ne0);
            }
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_new_tensor_2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_new_tensor_2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_2d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1)
     * }
     */
    public static FunctionDescriptor ggml_new_tensor_2d$descriptor() {
        return ggml_new_tensor_2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_2d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1)
     * }
     */
    public static MethodHandle ggml_new_tensor_2d$handle() {
        return ggml_new_tensor_2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_2d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1)
     * }
     */
    public static MemorySegment ggml_new_tensor_2d$address() {
        return ggml_new_tensor_2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_2d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1)
     * }
     */
    public static MemorySegment ggml_new_tensor_2d(MemorySegment ctx, int type, long ne0, long ne1) {
        var mh$ = ggml_new_tensor_2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_new_tensor_2d", ctx, type, ne0, ne1);
            }
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_new_tensor_3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_new_tensor_3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_3d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static FunctionDescriptor ggml_new_tensor_3d$descriptor() {
        return ggml_new_tensor_3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_3d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MethodHandle ggml_new_tensor_3d$handle() {
        return ggml_new_tensor_3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_3d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MemorySegment ggml_new_tensor_3d$address() {
        return ggml_new_tensor_3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_3d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MemorySegment ggml_new_tensor_3d(MemorySegment ctx, int type, long ne0, long ne1, long ne2) {
        var mh$ = ggml_new_tensor_3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_new_tensor_3d", ctx, type, ne0, ne1, ne2);
            }
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1, ne2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_new_tensor_4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_new_tensor_4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_4d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static FunctionDescriptor ggml_new_tensor_4d$descriptor() {
        return ggml_new_tensor_4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_4d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MethodHandle ggml_new_tensor_4d$handle() {
        return ggml_new_tensor_4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_4d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_new_tensor_4d$address() {
        return ggml_new_tensor_4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_new_tensor_4d(struct ggml_context *ctx, enum ggml_type type, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_new_tensor_4d(MemorySegment ctx, int type, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_new_tensor_4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_new_tensor_4d", ctx, type, ne0, ne1, ne2, ne3);
            }
            return (MemorySegment)mh$.invokeExact(ctx, type, ne0, ne1, ne2, ne3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_new_buffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_new_buffer");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *ggml_new_buffer(struct ggml_context *ctx, size_t nbytes)
     * }
     */
    public static FunctionDescriptor ggml_new_buffer$descriptor() {
        return ggml_new_buffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *ggml_new_buffer(struct ggml_context *ctx, size_t nbytes)
     * }
     */
    public static MethodHandle ggml_new_buffer$handle() {
        return ggml_new_buffer.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *ggml_new_buffer(struct ggml_context *ctx, size_t nbytes)
     * }
     */
    public static MemorySegment ggml_new_buffer$address() {
        return ggml_new_buffer.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *ggml_new_buffer(struct ggml_context *ctx, size_t nbytes)
     * }
     */
    public static MemorySegment ggml_new_buffer(MemorySegment ctx, long nbytes) {
        var mh$ = ggml_new_buffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_new_buffer", ctx, nbytes);
            }
            return (MemorySegment)mh$.invokeExact(ctx, nbytes);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_dup_tensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_dup_tensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_tensor(struct ggml_context *ctx, const struct ggml_tensor *src)
     * }
     */
    public static FunctionDescriptor ggml_dup_tensor$descriptor() {
        return ggml_dup_tensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_tensor(struct ggml_context *ctx, const struct ggml_tensor *src)
     * }
     */
    public static MethodHandle ggml_dup_tensor$handle() {
        return ggml_dup_tensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_tensor(struct ggml_context *ctx, const struct ggml_tensor *src)
     * }
     */
    public static MemorySegment ggml_dup_tensor$address() {
        return ggml_dup_tensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_tensor(struct ggml_context *ctx, const struct ggml_tensor *src)
     * }
     */
    public static MemorySegment ggml_dup_tensor(MemorySegment ctx, MemorySegment src) {
        var mh$ = ggml_dup_tensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_dup_tensor", ctx, src);
            }
            return (MemorySegment)mh$.invokeExact(ctx, src);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_view_tensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_view_tensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_tensor(struct ggml_context *ctx, struct ggml_tensor *src)
     * }
     */
    public static FunctionDescriptor ggml_view_tensor$descriptor() {
        return ggml_view_tensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_tensor(struct ggml_context *ctx, struct ggml_tensor *src)
     * }
     */
    public static MethodHandle ggml_view_tensor$handle() {
        return ggml_view_tensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_tensor(struct ggml_context *ctx, struct ggml_tensor *src)
     * }
     */
    public static MemorySegment ggml_view_tensor$address() {
        return ggml_view_tensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_tensor(struct ggml_context *ctx, struct ggml_tensor *src)
     * }
     */
    public static MemorySegment ggml_view_tensor(MemorySegment ctx, MemorySegment src) {
        var mh$ = ggml_view_tensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_view_tensor", ctx, src);
            }
            return (MemorySegment)mh$.invokeExact(ctx, src);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_first_tensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_first_tensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_first_tensor(const struct ggml_context *ctx)
     * }
     */
    public static FunctionDescriptor ggml_get_first_tensor$descriptor() {
        return ggml_get_first_tensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_first_tensor(const struct ggml_context *ctx)
     * }
     */
    public static MethodHandle ggml_get_first_tensor$handle() {
        return ggml_get_first_tensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_first_tensor(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_first_tensor$address() {
        return ggml_get_first_tensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_first_tensor(const struct ggml_context *ctx)
     * }
     */
    public static MemorySegment ggml_get_first_tensor(MemorySegment ctx) {
        var mh$ = ggml_get_first_tensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_first_tensor", ctx);
            }
            return (MemorySegment)mh$.invokeExact(ctx);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_next_tensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_next_tensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_next_tensor(const struct ggml_context *ctx, struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_get_next_tensor$descriptor() {
        return ggml_get_next_tensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_next_tensor(const struct ggml_context *ctx, struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_get_next_tensor$handle() {
        return ggml_get_next_tensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_next_tensor(const struct ggml_context *ctx, struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_next_tensor$address() {
        return ggml_get_next_tensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_next_tensor(const struct ggml_context *ctx, struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_next_tensor(MemorySegment ctx, MemorySegment tensor) {
        var mh$ = ggml_get_next_tensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_next_tensor", ctx, tensor);
            }
            return (MemorySegment)mh$.invokeExact(ctx, tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_tensor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_tensor");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_tensor(struct ggml_context *ctx, const char *name)
     * }
     */
    public static FunctionDescriptor ggml_get_tensor$descriptor() {
        return ggml_get_tensor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_tensor(struct ggml_context *ctx, const char *name)
     * }
     */
    public static MethodHandle ggml_get_tensor$handle() {
        return ggml_get_tensor.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_tensor(struct ggml_context *ctx, const char *name)
     * }
     */
    public static MemorySegment ggml_get_tensor$address() {
        return ggml_get_tensor.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_tensor(struct ggml_context *ctx, const char *name)
     * }
     */
    public static MemorySegment ggml_get_tensor(MemorySegment ctx, MemorySegment name) {
        var mh$ = ggml_get_tensor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_tensor", ctx, name);
            }
            return (MemorySegment)mh$.invokeExact(ctx, name);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_unravel_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_unravel_index");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_unravel_index(const struct ggml_tensor *tensor, int64_t i, int64_t *i0, int64_t *i1, int64_t *i2, int64_t *i3)
     * }
     */
    public static FunctionDescriptor ggml_unravel_index$descriptor() {
        return ggml_unravel_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_unravel_index(const struct ggml_tensor *tensor, int64_t i, int64_t *i0, int64_t *i1, int64_t *i2, int64_t *i3)
     * }
     */
    public static MethodHandle ggml_unravel_index$handle() {
        return ggml_unravel_index.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_unravel_index(const struct ggml_tensor *tensor, int64_t i, int64_t *i0, int64_t *i1, int64_t *i2, int64_t *i3)
     * }
     */
    public static MemorySegment ggml_unravel_index$address() {
        return ggml_unravel_index.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_unravel_index(const struct ggml_tensor *tensor, int64_t i, int64_t *i0, int64_t *i1, int64_t *i2, int64_t *i3)
     * }
     */
    public static void ggml_unravel_index(MemorySegment tensor, long i, MemorySegment i0, MemorySegment i1, MemorySegment i2, MemorySegment i3) {
        var mh$ = ggml_unravel_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_unravel_index", tensor, i, i0, i1, i2, i3);
            }
            mh$.invokeExact(tensor, i, i0, i1, i2, i3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_unary_op {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_INT,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_unary_op");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern enum ggml_unary_op ggml_get_unary_op(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_get_unary_op$descriptor() {
        return ggml_get_unary_op.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern enum ggml_unary_op ggml_get_unary_op(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_get_unary_op$handle() {
        return ggml_get_unary_op.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern enum ggml_unary_op ggml_get_unary_op(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_unary_op$address() {
        return ggml_get_unary_op.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern enum ggml_unary_op ggml_get_unary_op(const struct ggml_tensor *tensor)
     * }
     */
    public static int ggml_get_unary_op(MemorySegment tensor) {
        var mh$ = ggml_get_unary_op.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_unary_op", tensor);
            }
            return (int)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *ggml_get_data(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_get_data$descriptor() {
        return ggml_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *ggml_get_data(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_get_data$handle() {
        return ggml_get_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void *ggml_get_data(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_data$address() {
        return ggml_get_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void *ggml_get_data(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_data(MemorySegment tensor) {
        var mh$ = ggml_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_data", tensor);
            }
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_data_f32 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_data_f32");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float *ggml_get_data_f32(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_get_data_f32$descriptor() {
        return ggml_get_data_f32.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float *ggml_get_data_f32(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_get_data_f32$handle() {
        return ggml_get_data_f32.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern float *ggml_get_data_f32(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_data_f32$address() {
        return ggml_get_data_f32.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern float *ggml_get_data_f32(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_data_f32(MemorySegment tensor) {
        var mh$ = ggml_get_data_f32.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_data_f32", tensor);
            }
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *ggml_get_name(const struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_get_name$descriptor() {
        return ggml_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *ggml_get_name(const struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_get_name$handle() {
        return ggml_get_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern const char *ggml_get_name(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_name$address() {
        return ggml_get_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern const char *ggml_get_name(const struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_get_name(MemorySegment tensor) {
        var mh$ = ggml_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_name", tensor);
            }
            return (MemorySegment)mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_name");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_name(struct ggml_tensor *tensor, const char *name)
     * }
     */
    public static FunctionDescriptor ggml_set_name$descriptor() {
        return ggml_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_name(struct ggml_tensor *tensor, const char *name)
     * }
     */
    public static MethodHandle ggml_set_name$handle() {
        return ggml_set_name.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_name(struct ggml_tensor *tensor, const char *name)
     * }
     */
    public static MemorySegment ggml_set_name$address() {
        return ggml_set_name.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_name(struct ggml_tensor *tensor, const char *name)
     * }
     */
    public static MemorySegment ggml_set_name(MemorySegment tensor, MemorySegment name) {
        var mh$ = ggml_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_name", tensor, name);
            }
            return (MemorySegment)mh$.invokeExact(tensor, name);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_format_name(struct ggml_tensor *tensor, const char *fmt, ...)
     * }
     */
    public static class ggml_format_name {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                llama_h.C_POINTER,
                llama_h.C_POINTER,
                llama_h.C_POINTER
            );
        private static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_format_name");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private ggml_format_name(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern struct ggml_tensor *ggml_format_name(struct ggml_tensor *tensor, const char *fmt, ...)
         * }
         */
        public static ggml_format_name makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new ggml_format_name(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment tensor, MemorySegment fmt, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("ggml_format_name", tensor, fmt, x2);
                }
                return (MemorySegment) spreader.invokeExact(tensor, fmt, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class ggml_set_input {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_input");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_set_input(struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_set_input$descriptor() {
        return ggml_set_input.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_set_input(struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_set_input$handle() {
        return ggml_set_input.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_set_input(struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_set_input$address() {
        return ggml_set_input.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_set_input(struct ggml_tensor *tensor)
     * }
     */
    public static void ggml_set_input(MemorySegment tensor) {
        var mh$ = ggml_set_input.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_input", tensor);
            }
            mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_output {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_output");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_set_output(struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_set_output$descriptor() {
        return ggml_set_output.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_set_output(struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_set_output$handle() {
        return ggml_set_output.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_set_output(struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_set_output$address() {
        return ggml_set_output.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_set_output(struct ggml_tensor *tensor)
     * }
     */
    public static void ggml_set_output(MemorySegment tensor) {
        var mh$ = ggml_set_output.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_output", tensor);
            }
            mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_param");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_set_param(struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_set_param$descriptor() {
        return ggml_set_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_set_param(struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_set_param$handle() {
        return ggml_set_param.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_set_param(struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_set_param$address() {
        return ggml_set_param.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_set_param(struct ggml_tensor *tensor)
     * }
     */
    public static void ggml_set_param(MemorySegment tensor) {
        var mh$ = ggml_set_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_param", tensor);
            }
            mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_loss {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_loss");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_set_loss(struct ggml_tensor *tensor)
     * }
     */
    public static FunctionDescriptor ggml_set_loss$descriptor() {
        return ggml_set_loss.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_set_loss(struct ggml_tensor *tensor)
     * }
     */
    public static MethodHandle ggml_set_loss$handle() {
        return ggml_set_loss.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_set_loss(struct ggml_tensor *tensor)
     * }
     */
    public static MemorySegment ggml_set_loss$address() {
        return ggml_set_loss.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_set_loss(struct ggml_tensor *tensor)
     * }
     */
    public static void ggml_set_loss(MemorySegment tensor) {
        var mh$ = ggml_set_loss.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_loss", tensor);
            }
            mh$.invokeExact(tensor);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_dup");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_dup$descriptor() {
        return ggml_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_dup$handle() {
        return ggml_dup.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_dup$address() {
        return ggml_dup.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_dup(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_dup", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_dup_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_dup_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_dup_inplace$descriptor() {
        return ggml_dup_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_dup_inplace$handle() {
        return ggml_dup_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_dup_inplace$address() {
        return ggml_dup_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_dup_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_dup_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_dup_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_dup_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_add");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_add$descriptor() {
        return ggml_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_add$handle() {
        return ggml_add.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add$address() {
        return ggml_add.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_add", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_add_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_add_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_add_inplace$descriptor() {
        return ggml_add_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_add_inplace$handle() {
        return ggml_add_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add_inplace$address() {
        return ggml_add_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_add_inplace", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_add_cast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_add_cast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_cast(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_add_cast$descriptor() {
        return ggml_add_cast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_cast(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_add_cast$handle() {
        return ggml_add_cast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_cast(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_add_cast$address() {
        return ggml_add_cast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add_cast(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_add_cast(MemorySegment ctx, MemorySegment a, MemorySegment b, int type) {
        var mh$ = ggml_add_cast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_add_cast", ctx, a, b, type);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_add1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_add1");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_add1$descriptor() {
        return ggml_add1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_add1$handle() {
        return ggml_add1.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add1$address() {
        return ggml_add1.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add1(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_add1", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_add1_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_add1_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_add1_inplace$descriptor() {
        return ggml_add1_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_add1_inplace$handle() {
        return ggml_add1_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add1_inplace$address() {
        return ggml_add1_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_add1_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_add1_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_add1_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_add1_inplace", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_acc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_acc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_acc$descriptor() {
        return ggml_acc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MethodHandle ggml_acc$handle() {
        return ggml_acc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_acc$address() {
        return ggml_acc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_acc(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_acc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_acc", ctx, a, b, nb1, nb2, nb3, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_acc_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_acc_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_acc_inplace$descriptor() {
        return ggml_acc_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MethodHandle ggml_acc_inplace$handle() {
        return ggml_acc_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_acc_inplace$address() {
        return ggml_acc_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_acc_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_acc_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_acc_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_acc_inplace", ctx, a, b, nb1, nb2, nb3, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sub {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sub");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_sub$descriptor() {
        return ggml_sub.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_sub$handle() {
        return ggml_sub.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_sub$address() {
        return ggml_sub.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_sub(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_sub.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sub", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sub_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sub_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_sub_inplace$descriptor() {
        return ggml_sub_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_sub_inplace$handle() {
        return ggml_sub_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_sub_inplace$address() {
        return ggml_sub_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sub_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_sub_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_sub_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sub_inplace", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_mul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_mul");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_mul$descriptor() {
        return ggml_mul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_mul$handle() {
        return ggml_mul.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_mul$address() {
        return ggml_mul.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_mul(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_mul", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_mul_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_mul_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_mul_inplace$descriptor() {
        return ggml_mul_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_mul_inplace$handle() {
        return ggml_mul_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_mul_inplace$address() {
        return ggml_mul_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_mul_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_mul_inplace", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_div");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_div$descriptor() {
        return ggml_div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_div$handle() {
        return ggml_div.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_div$address() {
        return ggml_div.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_div(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_div", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_div_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_div_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_div_inplace$descriptor() {
        return ggml_div_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_div_inplace$handle() {
        return ggml_div_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_div_inplace$address() {
        return ggml_div_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_div_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_div_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_div_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_div_inplace", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sqr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sqr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sqr$descriptor() {
        return ggml_sqr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sqr$handle() {
        return ggml_sqr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqr$address() {
        return ggml_sqr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqr(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sqr", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sqr_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sqr_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sqr_inplace$descriptor() {
        return ggml_sqr_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sqr_inplace$handle() {
        return ggml_sqr_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqr_inplace$address() {
        return ggml_sqr_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqr_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqr_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqr_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sqr_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sqrt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sqrt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sqrt$descriptor() {
        return ggml_sqrt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sqrt$handle() {
        return ggml_sqrt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqrt$address() {
        return ggml_sqrt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqrt(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqrt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sqrt", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sqrt_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sqrt_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sqrt_inplace$descriptor() {
        return ggml_sqrt_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sqrt_inplace$handle() {
        return ggml_sqrt_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqrt_inplace$address() {
        return ggml_sqrt_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sqrt_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sqrt_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sqrt_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sqrt_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_log {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_log");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_log$descriptor() {
        return ggml_log.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_log$handle() {
        return ggml_log.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_log$address() {
        return ggml_log.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_log(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_log.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_log", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_log_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_log_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_log_inplace$descriptor() {
        return ggml_log_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_log_inplace$handle() {
        return ggml_log_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_log_inplace$address() {
        return ggml_log_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_log_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_log_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_log_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_log_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sin$descriptor() {
        return ggml_sin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sin$handle() {
        return ggml_sin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sin$address() {
        return ggml_sin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sin(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sin", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sin_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sin_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sin_inplace$descriptor() {
        return ggml_sin_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sin_inplace$handle() {
        return ggml_sin_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sin_inplace$address() {
        return ggml_sin_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sin_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sin_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sin_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sin_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_cos$descriptor() {
        return ggml_cos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_cos$handle() {
        return ggml_cos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_cos$address() {
        return ggml_cos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_cos(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cos", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cos_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cos_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_cos_inplace$descriptor() {
        return ggml_cos_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_cos_inplace$handle() {
        return ggml_cos_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_cos_inplace$address() {
        return ggml_cos_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cos_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_cos_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cos_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cos_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sum$descriptor() {
        return ggml_sum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sum$handle() {
        return ggml_sum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sum$address() {
        return ggml_sum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sum(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sum", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sum_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sum_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum_rows(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sum_rows$descriptor() {
        return ggml_sum_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum_rows(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sum_rows$handle() {
        return ggml_sum_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum_rows(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sum_rows$address() {
        return ggml_sum_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sum_rows(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sum_rows(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sum_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sum_rows", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_mean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_mean");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mean(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_mean$descriptor() {
        return ggml_mean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mean(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_mean$handle() {
        return ggml_mean.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mean(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_mean$address() {
        return ggml_mean.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mean(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_mean(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_mean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_mean", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_argmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_argmax");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_argmax(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_argmax$descriptor() {
        return ggml_argmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_argmax(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_argmax$handle() {
        return ggml_argmax.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_argmax(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_argmax$address() {
        return ggml_argmax.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_argmax(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_argmax(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_argmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_argmax", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_count_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_count_equal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_count_equal(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_count_equal$descriptor() {
        return ggml_count_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_count_equal(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_count_equal$handle() {
        return ggml_count_equal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_count_equal(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_count_equal$address() {
        return ggml_count_equal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_count_equal(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_count_equal(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_count_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_count_equal", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_repeat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_repeat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_repeat$descriptor() {
        return ggml_repeat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_repeat$handle() {
        return ggml_repeat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_repeat$address() {
        return ggml_repeat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_repeat(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_repeat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_repeat", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_repeat_4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_repeat_4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static FunctionDescriptor ggml_repeat_4d$descriptor() {
        return ggml_repeat_4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MethodHandle ggml_repeat_4d$handle() {
        return ggml_repeat_4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_repeat_4d$address() {
        return ggml_repeat_4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_repeat_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_repeat_4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_repeat_4d", ctx, a, ne0, ne1, ne2, ne3);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_repeat_back {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_repeat_back");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_repeat_back$descriptor() {
        return ggml_repeat_back.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_repeat_back$handle() {
        return ggml_repeat_back.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_repeat_back$address() {
        return ggml_repeat_back.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_repeat_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_repeat_back(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_repeat_back.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_repeat_back", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_concat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_concat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_concat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int dim)
     * }
     */
    public static FunctionDescriptor ggml_concat$descriptor() {
        return ggml_concat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_concat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int dim)
     * }
     */
    public static MethodHandle ggml_concat$handle() {
        return ggml_concat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_concat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int dim)
     * }
     */
    public static MemorySegment ggml_concat$address() {
        return ggml_concat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_concat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int dim)
     * }
     */
    public static MemorySegment ggml_concat(MemorySegment ctx, MemorySegment a, MemorySegment b, int dim) {
        var mh$ = ggml_concat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_concat", ctx, a, b, dim);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, dim);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_abs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_abs$descriptor() {
        return ggml_abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_abs$handle() {
        return ggml_abs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_abs$address() {
        return ggml_abs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_abs(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_abs", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_abs_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_abs_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_abs_inplace$descriptor() {
        return ggml_abs_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_abs_inplace$handle() {
        return ggml_abs_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_abs_inplace$address() {
        return ggml_abs_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_abs_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_abs_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_abs_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_abs_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sgn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sgn");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sgn$descriptor() {
        return ggml_sgn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sgn$handle() {
        return ggml_sgn.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sgn$address() {
        return ggml_sgn.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sgn(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sgn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sgn", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sgn_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sgn_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sgn_inplace$descriptor() {
        return ggml_sgn_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sgn_inplace$handle() {
        return ggml_sgn_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sgn_inplace$address() {
        return ggml_sgn_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sgn_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sgn_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sgn_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sgn_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_neg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_neg");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_neg$descriptor() {
        return ggml_neg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_neg$handle() {
        return ggml_neg.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_neg$address() {
        return ggml_neg.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_neg(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_neg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_neg", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_neg_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_neg_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_neg_inplace$descriptor() {
        return ggml_neg_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_neg_inplace$handle() {
        return ggml_neg_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_neg_inplace$address() {
        return ggml_neg_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_neg_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_neg_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_neg_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_neg_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_step");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_step$descriptor() {
        return ggml_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_step$handle() {
        return ggml_step.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_step$address() {
        return ggml_step.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_step(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_step", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_step_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_step_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_step_inplace$descriptor() {
        return ggml_step_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_step_inplace$handle() {
        return ggml_step_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_step_inplace$address() {
        return ggml_step_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_step_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_step_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_step_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_step_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_tanh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_tanh");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_tanh$descriptor() {
        return ggml_tanh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_tanh$handle() {
        return ggml_tanh.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_tanh$address() {
        return ggml_tanh.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_tanh(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_tanh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_tanh", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_tanh_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_tanh_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_tanh_inplace$descriptor() {
        return ggml_tanh_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_tanh_inplace$handle() {
        return ggml_tanh_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_tanh_inplace$address() {
        return ggml_tanh_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_tanh_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_tanh_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_tanh_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_tanh_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_elu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_elu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_elu$descriptor() {
        return ggml_elu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_elu$handle() {
        return ggml_elu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_elu$address() {
        return ggml_elu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_elu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_elu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_elu", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_elu_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_elu_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_elu_inplace$descriptor() {
        return ggml_elu_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_elu_inplace$handle() {
        return ggml_elu_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_elu_inplace$address() {
        return ggml_elu_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_elu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_elu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_elu_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_elu_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_relu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_relu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_relu$descriptor() {
        return ggml_relu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_relu$handle() {
        return ggml_relu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_relu$address() {
        return ggml_relu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_relu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_relu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_relu", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_leaky_relu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT,
            llama_h.C_BOOL
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_leaky_relu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_leaky_relu(struct ggml_context *ctx, struct ggml_tensor *a, float negative_slope, bool inplace)
     * }
     */
    public static FunctionDescriptor ggml_leaky_relu$descriptor() {
        return ggml_leaky_relu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_leaky_relu(struct ggml_context *ctx, struct ggml_tensor *a, float negative_slope, bool inplace)
     * }
     */
    public static MethodHandle ggml_leaky_relu$handle() {
        return ggml_leaky_relu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_leaky_relu(struct ggml_context *ctx, struct ggml_tensor *a, float negative_slope, bool inplace)
     * }
     */
    public static MemorySegment ggml_leaky_relu$address() {
        return ggml_leaky_relu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_leaky_relu(struct ggml_context *ctx, struct ggml_tensor *a, float negative_slope, bool inplace)
     * }
     */
    public static MemorySegment ggml_leaky_relu(MemorySegment ctx, MemorySegment a, float negative_slope, boolean inplace) {
        var mh$ = ggml_leaky_relu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_leaky_relu", ctx, a, negative_slope, inplace);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, negative_slope, inplace);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_relu_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_relu_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_relu_inplace$descriptor() {
        return ggml_relu_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_relu_inplace$handle() {
        return ggml_relu_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_relu_inplace$address() {
        return ggml_relu_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_relu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_relu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_relu_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_relu_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sigmoid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sigmoid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sigmoid$descriptor() {
        return ggml_sigmoid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sigmoid$handle() {
        return ggml_sigmoid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sigmoid$address() {
        return ggml_sigmoid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sigmoid(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sigmoid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sigmoid", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_sigmoid_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_sigmoid_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_sigmoid_inplace$descriptor() {
        return ggml_sigmoid_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_sigmoid_inplace$handle() {
        return ggml_sigmoid_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sigmoid_inplace$address() {
        return ggml_sigmoid_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_sigmoid_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_sigmoid_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_sigmoid_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_sigmoid_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_gelu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_gelu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_gelu$descriptor() {
        return ggml_gelu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_gelu$handle() {
        return ggml_gelu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu$address() {
        return ggml_gelu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_gelu", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_gelu_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_gelu_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_gelu_inplace$descriptor() {
        return ggml_gelu_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_gelu_inplace$handle() {
        return ggml_gelu_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_inplace$address() {
        return ggml_gelu_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_gelu_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_gelu_erf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_gelu_erf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_gelu_erf$descriptor() {
        return ggml_gelu_erf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_gelu_erf$handle() {
        return ggml_gelu_erf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_erf$address() {
        return ggml_gelu_erf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_erf(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_erf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_gelu_erf", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_gelu_erf_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_gelu_erf_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_gelu_erf_inplace$descriptor() {
        return ggml_gelu_erf_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_gelu_erf_inplace$handle() {
        return ggml_gelu_erf_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_erf_inplace$address() {
        return ggml_gelu_erf_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_erf_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_erf_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_erf_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_gelu_erf_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_gelu_quick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_gelu_quick");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_gelu_quick$descriptor() {
        return ggml_gelu_quick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_gelu_quick$handle() {
        return ggml_gelu_quick.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_quick$address() {
        return ggml_gelu_quick.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_quick(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_quick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_gelu_quick", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_gelu_quick_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_gelu_quick_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_gelu_quick_inplace$descriptor() {
        return ggml_gelu_quick_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_gelu_quick_inplace$handle() {
        return ggml_gelu_quick_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_quick_inplace$address() {
        return ggml_gelu_quick_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_gelu_quick_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_gelu_quick_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_gelu_quick_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_gelu_quick_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_silu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_silu");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_silu$descriptor() {
        return ggml_silu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_silu$handle() {
        return ggml_silu.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_silu$address() {
        return ggml_silu.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_silu(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_silu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_silu", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_silu_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_silu_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_silu_inplace$descriptor() {
        return ggml_silu_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_silu_inplace$handle() {
        return ggml_silu_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_silu_inplace$address() {
        return ggml_silu_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_silu_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_silu_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_silu_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_silu_back {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_silu_back");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_silu_back$descriptor() {
        return ggml_silu_back.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_silu_back$handle() {
        return ggml_silu_back.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_silu_back$address() {
        return ggml_silu_back.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_silu_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_silu_back(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_silu_back.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_silu_back", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_hardswish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_hardswish");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardswish(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_hardswish$descriptor() {
        return ggml_hardswish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardswish(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_hardswish$handle() {
        return ggml_hardswish.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardswish(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_hardswish$address() {
        return ggml_hardswish.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardswish(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_hardswish(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_hardswish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_hardswish", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_hardsigmoid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_hardsigmoid");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardsigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_hardsigmoid$descriptor() {
        return ggml_hardsigmoid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardsigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_hardsigmoid$handle() {
        return ggml_hardsigmoid.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardsigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_hardsigmoid$address() {
        return ggml_hardsigmoid.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_hardsigmoid(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_hardsigmoid(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_hardsigmoid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_hardsigmoid", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_exp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_exp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_exp$descriptor() {
        return ggml_exp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_exp$handle() {
        return ggml_exp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_exp$address() {
        return ggml_exp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_exp(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_exp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_exp", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_exp_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_exp_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_exp_inplace$descriptor() {
        return ggml_exp_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_exp_inplace$handle() {
        return ggml_exp_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_exp_inplace$address() {
        return ggml_exp_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_exp_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_exp_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_exp_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_exp_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static FunctionDescriptor ggml_norm$descriptor() {
        return ggml_norm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MethodHandle ggml_norm$handle() {
        return ggml_norm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_norm$address() {
        return ggml_norm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_norm", ctx, a, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_norm_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_norm_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static FunctionDescriptor ggml_norm_inplace$descriptor() {
        return ggml_norm_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MethodHandle ggml_norm_inplace$handle() {
        return ggml_norm_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_norm_inplace$address() {
        return ggml_norm_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_norm_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_norm_inplace", ctx, a, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rms_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rms_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static FunctionDescriptor ggml_rms_norm$descriptor() {
        return ggml_rms_norm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MethodHandle ggml_rms_norm$handle() {
        return ggml_rms_norm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_rms_norm$address() {
        return ggml_rms_norm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_rms_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_rms_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rms_norm", ctx, a, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rms_norm_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rms_norm_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static FunctionDescriptor ggml_rms_norm_inplace$descriptor() {
        return ggml_rms_norm_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MethodHandle ggml_rms_norm_inplace$handle() {
        return ggml_rms_norm_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_rms_norm_inplace$address() {
        return ggml_rms_norm_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_rms_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_rms_norm_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rms_norm_inplace", ctx, a, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_group_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_group_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static FunctionDescriptor ggml_group_norm$descriptor() {
        return ggml_group_norm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static MethodHandle ggml_group_norm$handle() {
        return ggml_group_norm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static MemorySegment ggml_group_norm$address() {
        return ggml_group_norm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static MemorySegment ggml_group_norm(MemorySegment ctx, MemorySegment a, int n_groups, float eps) {
        var mh$ = ggml_group_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_group_norm", ctx, a, n_groups, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, n_groups, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_group_norm_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_group_norm_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static FunctionDescriptor ggml_group_norm_inplace$descriptor() {
        return ggml_group_norm_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static MethodHandle ggml_group_norm_inplace$handle() {
        return ggml_group_norm_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static MemorySegment ggml_group_norm_inplace$address() {
        return ggml_group_norm_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_group_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_groups, float eps)
     * }
     */
    public static MemorySegment ggml_group_norm_inplace(MemorySegment ctx, MemorySegment a, int n_groups, float eps) {
        var mh$ = ggml_group_norm_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_group_norm_inplace", ctx, a, n_groups, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, n_groups, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_l2_norm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_l2_norm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static FunctionDescriptor ggml_l2_norm$descriptor() {
        return ggml_l2_norm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MethodHandle ggml_l2_norm$handle() {
        return ggml_l2_norm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_l2_norm$address() {
        return ggml_l2_norm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_l2_norm(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_l2_norm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_l2_norm", ctx, a, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_l2_norm_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_l2_norm_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static FunctionDescriptor ggml_l2_norm_inplace$descriptor() {
        return ggml_l2_norm_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MethodHandle ggml_l2_norm_inplace$handle() {
        return ggml_l2_norm_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_l2_norm_inplace$address() {
        return ggml_l2_norm_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_l2_norm_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float eps)
     * }
     */
    public static MemorySegment ggml_l2_norm_inplace(MemorySegment ctx, MemorySegment a, float eps) {
        var mh$ = ggml_l2_norm_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_l2_norm_inplace", ctx, a, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rms_norm_back {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rms_norm_back");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float eps)
     * }
     */
    public static FunctionDescriptor ggml_rms_norm_back$descriptor() {
        return ggml_rms_norm_back.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float eps)
     * }
     */
    public static MethodHandle ggml_rms_norm_back$handle() {
        return ggml_rms_norm_back.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float eps)
     * }
     */
    public static MemorySegment ggml_rms_norm_back$address() {
        return ggml_rms_norm_back.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rms_norm_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float eps)
     * }
     */
    public static MemorySegment ggml_rms_norm_back(MemorySegment ctx, MemorySegment a, MemorySegment b, float eps) {
        var mh$ = ggml_rms_norm_back.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rms_norm_back", ctx, a, b, eps);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, eps);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_mul_mat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_mul_mat");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_mul_mat$descriptor() {
        return ggml_mul_mat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_mul_mat$handle() {
        return ggml_mul_mat.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_mul_mat$address() {
        return ggml_mul_mat.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_mul_mat(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_mul_mat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_mul_mat", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_mul_mat_set_prec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_mul_mat_set_prec");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void ggml_mul_mat_set_prec(struct ggml_tensor *a, enum ggml_prec prec)
     * }
     */
    public static FunctionDescriptor ggml_mul_mat_set_prec$descriptor() {
        return ggml_mul_mat_set_prec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void ggml_mul_mat_set_prec(struct ggml_tensor *a, enum ggml_prec prec)
     * }
     */
    public static MethodHandle ggml_mul_mat_set_prec$handle() {
        return ggml_mul_mat_set_prec.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern void ggml_mul_mat_set_prec(struct ggml_tensor *a, enum ggml_prec prec)
     * }
     */
    public static MemorySegment ggml_mul_mat_set_prec$address() {
        return ggml_mul_mat_set_prec.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern void ggml_mul_mat_set_prec(struct ggml_tensor *a, enum ggml_prec prec)
     * }
     */
    public static void ggml_mul_mat_set_prec(MemorySegment a, int prec) {
        var mh$ = ggml_mul_mat_set_prec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_mul_mat_set_prec", a, prec);
            }
            mh$.invokeExact(a, prec);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_mul_mat_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_mul_mat_id");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat_id(struct ggml_context *ctx, struct ggml_tensor *as, struct ggml_tensor *b, struct ggml_tensor *ids)
     * }
     */
    public static FunctionDescriptor ggml_mul_mat_id$descriptor() {
        return ggml_mul_mat_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat_id(struct ggml_context *ctx, struct ggml_tensor *as, struct ggml_tensor *b, struct ggml_tensor *ids)
     * }
     */
    public static MethodHandle ggml_mul_mat_id$handle() {
        return ggml_mul_mat_id.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat_id(struct ggml_context *ctx, struct ggml_tensor *as, struct ggml_tensor *b, struct ggml_tensor *ids)
     * }
     */
    public static MemorySegment ggml_mul_mat_id$address() {
        return ggml_mul_mat_id.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_mul_mat_id(struct ggml_context *ctx, struct ggml_tensor *as, struct ggml_tensor *b, struct ggml_tensor *ids)
     * }
     */
    public static MemorySegment ggml_mul_mat_id(MemorySegment ctx, MemorySegment as, MemorySegment b, MemorySegment ids) {
        var mh$ = ggml_mul_mat_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_mul_mat_id", ctx, as, b, ids);
            }
            return (MemorySegment)mh$.invokeExact(ctx, as, b, ids);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_out_prod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_out_prod");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_out_prod(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_out_prod$descriptor() {
        return ggml_out_prod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_out_prod(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_out_prod$handle() {
        return ggml_out_prod.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_out_prod(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_out_prod$address() {
        return ggml_out_prod.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_out_prod(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_out_prod(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_out_prod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_out_prod", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_scale");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static FunctionDescriptor ggml_scale$descriptor() {
        return ggml_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static MethodHandle ggml_scale$handle() {
        return ggml_scale.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static MemorySegment ggml_scale$address() {
        return ggml_scale.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static MemorySegment ggml_scale(MemorySegment ctx, MemorySegment a, float s) {
        var mh$ = ggml_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_scale", ctx, a, s);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, s);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_scale_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_scale_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static FunctionDescriptor ggml_scale_inplace$descriptor() {
        return ggml_scale_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static MethodHandle ggml_scale_inplace$handle() {
        return ggml_scale_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static MemorySegment ggml_scale_inplace$address() {
        return ggml_scale_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_scale_inplace(struct ggml_context *ctx, struct ggml_tensor *a, float s)
     * }
     */
    public static MemorySegment ggml_scale_inplace(MemorySegment ctx, MemorySegment a, float s) {
        var mh$ = ggml_scale_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_scale_inplace", ctx, a, s);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, s);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_set$descriptor() {
        return ggml_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MethodHandle ggml_set$handle() {
        return ggml_set.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_set$address() {
        return ggml_set.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_set(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set", ctx, a, b, nb1, nb2, nb3, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_set_inplace$descriptor() {
        return ggml_set_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MethodHandle ggml_set_inplace$handle() {
        return ggml_set_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_inplace$address() {
        return ggml_set_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_set_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_inplace", ctx, a, b, nb1, nb2, nb3, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, nb2, nb3, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_set_1d$descriptor() {
        return ggml_set_1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static MethodHandle ggml_set_1d$handle() {
        return ggml_set_1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_1d$address() {
        return ggml_set_1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_1d(MemorySegment ctx, MemorySegment a, MemorySegment b, long offset) {
        var mh$ = ggml_set_1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_1d", ctx, a, b, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_1d_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_1d_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_set_1d_inplace$descriptor() {
        return ggml_set_1d_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static MethodHandle ggml_set_1d_inplace$handle() {
        return ggml_set_1d_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_1d_inplace$address() {
        return ggml_set_1d_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_1d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_1d_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long offset) {
        var mh$ = ggml_set_1d_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_1d_inplace", ctx, a, b, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_set_2d$descriptor() {
        return ggml_set_2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static MethodHandle ggml_set_2d$handle() {
        return ggml_set_2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_2d$address() {
        return ggml_set_2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_2d(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long offset) {
        var mh$ = ggml_set_2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_2d", ctx, a, b, nb1, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_set_2d_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_set_2d_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_set_2d_inplace$descriptor() {
        return ggml_set_2d_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static MethodHandle ggml_set_2d_inplace$handle() {
        return ggml_set_2d_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_2d_inplace$address() {
        return ggml_set_2d_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_set_2d_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, size_t nb1, size_t offset)
     * }
     */
    public static MemorySegment ggml_set_2d_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, long nb1, long offset) {
        var mh$ = ggml_set_2d_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_set_2d_inplace", ctx, a, b, nb1, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, nb1, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cpy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cpy(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_cpy$descriptor() {
        return ggml_cpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cpy(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_cpy$handle() {
        return ggml_cpy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cpy(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_cpy$address() {
        return ggml_cpy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cpy(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_cpy(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_cpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cpy", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cast");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cast(struct ggml_context *ctx, struct ggml_tensor *a, enum ggml_type type)
     * }
     */
    public static FunctionDescriptor ggml_cast$descriptor() {
        return ggml_cast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cast(struct ggml_context *ctx, struct ggml_tensor *a, enum ggml_type type)
     * }
     */
    public static MethodHandle ggml_cast$handle() {
        return ggml_cast.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cast(struct ggml_context *ctx, struct ggml_tensor *a, enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_cast$address() {
        return ggml_cast.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cast(struct ggml_context *ctx, struct ggml_tensor *a, enum ggml_type type)
     * }
     */
    public static MemorySegment ggml_cast(MemorySegment ctx, MemorySegment a, int type) {
        var mh$ = ggml_cast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cast", ctx, a, type);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, type);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cont {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cont");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_cont$descriptor() {
        return ggml_cont.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_cont$handle() {
        return ggml_cont.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_cont$address() {
        return ggml_cont.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_cont(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_cont.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cont", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cont_1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cont_1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static FunctionDescriptor ggml_cont_1d$descriptor() {
        return ggml_cont_1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static MethodHandle ggml_cont_1d$handle() {
        return ggml_cont_1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static MemorySegment ggml_cont_1d$address() {
        return ggml_cont_1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static MemorySegment ggml_cont_1d(MemorySegment ctx, MemorySegment a, long ne0) {
        var mh$ = ggml_cont_1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cont_1d", ctx, a, ne0);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cont_2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cont_2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static FunctionDescriptor ggml_cont_2d$descriptor() {
        return ggml_cont_2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static MethodHandle ggml_cont_2d$handle() {
        return ggml_cont_2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static MemorySegment ggml_cont_2d$address() {
        return ggml_cont_2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static MemorySegment ggml_cont_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1) {
        var mh$ = ggml_cont_2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cont_2d", ctx, a, ne0, ne1);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cont_3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cont_3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static FunctionDescriptor ggml_cont_3d$descriptor() {
        return ggml_cont_3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MethodHandle ggml_cont_3d$handle() {
        return ggml_cont_3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MemorySegment ggml_cont_3d$address() {
        return ggml_cont_3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MemorySegment ggml_cont_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2) {
        var mh$ = ggml_cont_3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cont_3d", ctx, a, ne0, ne1, ne2);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_cont_4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_cont_4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static FunctionDescriptor ggml_cont_4d$descriptor() {
        return ggml_cont_4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MethodHandle ggml_cont_4d$handle() {
        return ggml_cont_4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_cont_4d$address() {
        return ggml_cont_4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_cont_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_cont_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_cont_4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_cont_4d", ctx, a, ne0, ne1, ne2, ne3);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_reshape {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_reshape");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_reshape$descriptor() {
        return ggml_reshape.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_reshape$handle() {
        return ggml_reshape.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_reshape$address() {
        return ggml_reshape.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_reshape(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_reshape.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_reshape", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_reshape_1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_reshape_1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static FunctionDescriptor ggml_reshape_1d$descriptor() {
        return ggml_reshape_1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static MethodHandle ggml_reshape_1d$handle() {
        return ggml_reshape_1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static MemorySegment ggml_reshape_1d$address() {
        return ggml_reshape_1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0)
     * }
     */
    public static MemorySegment ggml_reshape_1d(MemorySegment ctx, MemorySegment a, long ne0) {
        var mh$ = ggml_reshape_1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_reshape_1d", ctx, a, ne0);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_reshape_2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_reshape_2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static FunctionDescriptor ggml_reshape_2d$descriptor() {
        return ggml_reshape_2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static MethodHandle ggml_reshape_2d$handle() {
        return ggml_reshape_2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static MemorySegment ggml_reshape_2d$address() {
        return ggml_reshape_2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1)
     * }
     */
    public static MemorySegment ggml_reshape_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1) {
        var mh$ = ggml_reshape_2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_reshape_2d", ctx, a, ne0, ne1);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_reshape_3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_reshape_3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static FunctionDescriptor ggml_reshape_3d$descriptor() {
        return ggml_reshape_3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MethodHandle ggml_reshape_3d$handle() {
        return ggml_reshape_3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MemorySegment ggml_reshape_3d$address() {
        return ggml_reshape_3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2)
     * }
     */
    public static MemorySegment ggml_reshape_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2) {
        var mh$ = ggml_reshape_3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_reshape_3d", ctx, a, ne0, ne1, ne2);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_reshape_4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_reshape_4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static FunctionDescriptor ggml_reshape_4d$descriptor() {
        return ggml_reshape_4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MethodHandle ggml_reshape_4d$handle() {
        return ggml_reshape_4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_reshape_4d$address() {
        return ggml_reshape_4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_reshape_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3)
     * }
     */
    public static MemorySegment ggml_reshape_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3) {
        var mh$ = ggml_reshape_4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_reshape_4d", ctx, a, ne0, ne1, ne2, ne3);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_view_1d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_view_1d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_view_1d$descriptor() {
        return ggml_view_1d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, size_t offset)
     * }
     */
    public static MethodHandle ggml_view_1d$handle() {
        return ggml_view_1d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_1d$address() {
        return ggml_view_1d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_1d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_1d(MemorySegment ctx, MemorySegment a, long ne0, long offset) {
        var mh$ = ggml_view_1d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_view_1d", ctx, a, ne0, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_view_2d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_view_2d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, size_t nb1, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_view_2d$descriptor() {
        return ggml_view_2d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, size_t nb1, size_t offset)
     * }
     */
    public static MethodHandle ggml_view_2d$handle() {
        return ggml_view_2d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, size_t nb1, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_2d$address() {
        return ggml_view_2d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_2d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, size_t nb1, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_2d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long nb1, long offset) {
        var mh$ = ggml_view_2d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_view_2d", ctx, a, ne0, ne1, nb1, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, nb1, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_view_3d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_view_3d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, size_t nb1, size_t nb2, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_view_3d$descriptor() {
        return ggml_view_3d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, size_t nb1, size_t nb2, size_t offset)
     * }
     */
    public static MethodHandle ggml_view_3d$handle() {
        return ggml_view_3d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, size_t nb1, size_t nb2, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_3d$address() {
        return ggml_view_3d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_3d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, size_t nb1, size_t nb2, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_3d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long nb1, long nb2, long offset) {
        var mh$ = ggml_view_3d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_view_3d", ctx, a, ne0, ne1, ne2, nb1, nb2, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, nb1, nb2, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_view_4d {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG,
            llama_h.C_LONG
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_view_4d");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static FunctionDescriptor ggml_view_4d$descriptor() {
        return ggml_view_4d.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MethodHandle ggml_view_4d$handle() {
        return ggml_view_4d.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_4d$address() {
        return ggml_view_4d.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_view_4d(struct ggml_context *ctx, struct ggml_tensor *a, int64_t ne0, int64_t ne1, int64_t ne2, int64_t ne3, size_t nb1, size_t nb2, size_t nb3, size_t offset)
     * }
     */
    public static MemorySegment ggml_view_4d(MemorySegment ctx, MemorySegment a, long ne0, long ne1, long ne2, long ne3, long nb1, long nb2, long nb3, long offset) {
        var mh$ = ggml_view_4d.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_view_4d", ctx, a, ne0, ne1, ne2, ne3, nb1, nb2, nb3, offset);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, ne0, ne1, ne2, ne3, nb1, nb2, nb3, offset);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_permute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_permute");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_permute(struct ggml_context *ctx, struct ggml_tensor *a, int axis0, int axis1, int axis2, int axis3)
     * }
     */
    public static FunctionDescriptor ggml_permute$descriptor() {
        return ggml_permute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_permute(struct ggml_context *ctx, struct ggml_tensor *a, int axis0, int axis1, int axis2, int axis3)
     * }
     */
    public static MethodHandle ggml_permute$handle() {
        return ggml_permute.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_permute(struct ggml_context *ctx, struct ggml_tensor *a, int axis0, int axis1, int axis2, int axis3)
     * }
     */
    public static MemorySegment ggml_permute$address() {
        return ggml_permute.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_permute(struct ggml_context *ctx, struct ggml_tensor *a, int axis0, int axis1, int axis2, int axis3)
     * }
     */
    public static MemorySegment ggml_permute(MemorySegment ctx, MemorySegment a, int axis0, int axis1, int axis2, int axis3) {
        var mh$ = ggml_permute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_permute", ctx, a, axis0, axis1, axis2, axis3);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, axis0, axis1, axis2, axis3);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_transpose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_transpose");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_transpose(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_transpose$descriptor() {
        return ggml_transpose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_transpose(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_transpose$handle() {
        return ggml_transpose.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_transpose(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_transpose$address() {
        return ggml_transpose.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_transpose(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_transpose(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_transpose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_transpose", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_rows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static FunctionDescriptor ggml_get_rows$descriptor() {
        return ggml_get_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MethodHandle ggml_get_rows$handle() {
        return ggml_get_rows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_get_rows$address() {
        return ggml_get_rows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b)
     * }
     */
    public static MemorySegment ggml_get_rows(MemorySegment ctx, MemorySegment a, MemorySegment b) {
        var mh$ = ggml_get_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_rows", ctx, a, b);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_get_rows_back {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_get_rows_back");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c)
     * }
     */
    public static FunctionDescriptor ggml_get_rows_back$descriptor() {
        return ggml_get_rows_back.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c)
     * }
     */
    public static MethodHandle ggml_get_rows_back$handle() {
        return ggml_get_rows_back.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c)
     * }
     */
    public static MemorySegment ggml_get_rows_back$address() {
        return ggml_get_rows_back.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_get_rows_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c)
     * }
     */
    public static MemorySegment ggml_get_rows_back(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c) {
        var mh$ = ggml_get_rows_back.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_get_rows_back", ctx, a, b, c);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_diag {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_diag");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_diag$descriptor() {
        return ggml_diag.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_diag$handle() {
        return ggml_diag.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_diag$address() {
        return ggml_diag.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_diag(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_diag.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_diag", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_diag_mask_inf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_diag_mask_inf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static FunctionDescriptor ggml_diag_mask_inf$descriptor() {
        return ggml_diag_mask_inf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MethodHandle ggml_diag_mask_inf$handle() {
        return ggml_diag_mask_inf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_inf$address() {
        return ggml_diag_mask_inf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_inf(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_inf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_diag_mask_inf", ctx, a, n_past);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_diag_mask_inf_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_diag_mask_inf_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static FunctionDescriptor ggml_diag_mask_inf_inplace$descriptor() {
        return ggml_diag_mask_inf_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MethodHandle ggml_diag_mask_inf_inplace$handle() {
        return ggml_diag_mask_inf_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_inf_inplace$address() {
        return ggml_diag_mask_inf_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_inf_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_inf_inplace(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_inf_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_diag_mask_inf_inplace", ctx, a, n_past);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_diag_mask_zero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_diag_mask_zero");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static FunctionDescriptor ggml_diag_mask_zero$descriptor() {
        return ggml_diag_mask_zero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MethodHandle ggml_diag_mask_zero$handle() {
        return ggml_diag_mask_zero.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_zero$address() {
        return ggml_diag_mask_zero.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_zero(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_zero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_diag_mask_zero", ctx, a, n_past);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_diag_mask_zero_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_diag_mask_zero_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static FunctionDescriptor ggml_diag_mask_zero_inplace$descriptor() {
        return ggml_diag_mask_zero_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MethodHandle ggml_diag_mask_zero_inplace$handle() {
        return ggml_diag_mask_zero_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_zero_inplace$address() {
        return ggml_diag_mask_zero_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_diag_mask_zero_inplace(struct ggml_context *ctx, struct ggml_tensor *a, int n_past)
     * }
     */
    public static MemorySegment ggml_diag_mask_zero_inplace(MemorySegment ctx, MemorySegment a, int n_past) {
        var mh$ = ggml_diag_mask_zero_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_diag_mask_zero_inplace", ctx, a, n_past);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, n_past);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_soft_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_soft_max");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_soft_max$descriptor() {
        return ggml_soft_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_soft_max$handle() {
        return ggml_soft_max.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_soft_max$address() {
        return ggml_soft_max.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_soft_max(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_soft_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_soft_max", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_soft_max_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_soft_max_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static FunctionDescriptor ggml_soft_max_inplace$descriptor() {
        return ggml_soft_max_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MethodHandle ggml_soft_max_inplace$handle() {
        return ggml_soft_max_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_soft_max_inplace$address() {
        return ggml_soft_max_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_inplace(struct ggml_context *ctx, struct ggml_tensor *a)
     * }
     */
    public static MemorySegment ggml_soft_max_inplace(MemorySegment ctx, MemorySegment a) {
        var mh$ = ggml_soft_max_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_soft_max_inplace", ctx, a);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_soft_max_ext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_soft_max_ext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *mask, float scale, float max_bias)
     * }
     */
    public static FunctionDescriptor ggml_soft_max_ext$descriptor() {
        return ggml_soft_max_ext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *mask, float scale, float max_bias)
     * }
     */
    public static MethodHandle ggml_soft_max_ext$handle() {
        return ggml_soft_max_ext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *mask, float scale, float max_bias)
     * }
     */
    public static MemorySegment ggml_soft_max_ext$address() {
        return ggml_soft_max_ext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *mask, float scale, float max_bias)
     * }
     */
    public static MemorySegment ggml_soft_max_ext(MemorySegment ctx, MemorySegment a, MemorySegment mask, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_soft_max_ext", ctx, a, mask, scale, max_bias);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, mask, scale, max_bias);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_soft_max_ext_back {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_soft_max_ext_back");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static FunctionDescriptor ggml_soft_max_ext_back$descriptor() {
        return ggml_soft_max_ext_back.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static MethodHandle ggml_soft_max_ext_back$handle() {
        return ggml_soft_max_ext_back.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back$address() {
        return ggml_soft_max_ext_back.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back(MemorySegment ctx, MemorySegment a, MemorySegment b, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext_back.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_soft_max_ext_back", ctx, a, b, scale, max_bias);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, scale, max_bias);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_soft_max_ext_back_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_soft_max_ext_back_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static FunctionDescriptor ggml_soft_max_ext_back_inplace$descriptor() {
        return ggml_soft_max_ext_back_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static MethodHandle ggml_soft_max_ext_back_inplace$handle() {
        return ggml_soft_max_ext_back_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back_inplace$address() {
        return ggml_soft_max_ext_back_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_soft_max_ext_back_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, float scale, float max_bias)
     * }
     */
    public static MemorySegment ggml_soft_max_ext_back_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, float scale, float max_bias) {
        var mh$ = ggml_soft_max_ext_back_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_soft_max_ext_back_inplace", ctx, a, b, scale, max_bias);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, scale, max_bias);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static FunctionDescriptor ggml_rope$descriptor() {
        return ggml_rope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static MethodHandle ggml_rope$handle() {
        return ggml_rope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static MemorySegment ggml_rope$address() {
        return ggml_rope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static MemorySegment ggml_rope(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode) {
        var mh$ = ggml_rope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rope", ctx, a, b, n_dims, mode);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rope_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_INT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rope_inplace");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static FunctionDescriptor ggml_rope_inplace$descriptor() {
        return ggml_rope_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static MethodHandle ggml_rope_inplace$handle() {
        return ggml_rope_inplace.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static MemorySegment ggml_rope_inplace$address() {
        return ggml_rope_inplace.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_inplace(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, int n_dims, int mode)
     * }
     */
    public static MemorySegment ggml_rope_inplace(MemorySegment ctx, MemorySegment a, MemorySegment b, int n_dims, int mode) {
        var mh$ = ggml_rope_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rope_inplace", ctx, a, b, n_dims, mode);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, n_dims, mode);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rope_ext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rope_ext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static FunctionDescriptor ggml_rope_ext$descriptor() {
        return ggml_rope_ext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static MethodHandle ggml_rope_ext$handle() {
        return ggml_rope_ext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static MemorySegment ggml_rope_ext$address() {
        return ggml_rope_ext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_ext(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static MemorySegment ggml_rope_ext(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_ext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rope_ext", ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ggml_rope_multi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_POINTER,
            llama_h.C_INT,
            llama_h.C_INT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT,
            llama_h.C_FLOAT
        );

        public static final MemorySegment ADDR = SYMBOL_LOOKUP.findOrThrow("ggml_rope_multi");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_multi(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static FunctionDescriptor ggml_rope_multi$descriptor() {
        return ggml_rope_multi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_multi(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static MethodHandle ggml_rope_multi$handle() {
        return ggml_rope_multi.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_multi(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static MemorySegment ggml_rope_multi$address() {
        return ggml_rope_multi.ADDR;
    }

    /**
     * {@snippet lang=c :
     * extern struct ggml_tensor *ggml_rope_multi(struct ggml_context *ctx, struct ggml_tensor *a, struct ggml_tensor *b, struct ggml_tensor *c, int n_dims, int sections[4], int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow)
     * }
     */
    public static MemorySegment ggml_rope_multi(MemorySegment ctx, MemorySegment a, MemorySegment b, MemorySegment c, int n_dims, MemorySegment sections, int mode, int n_ctx_orig, float freq_base, float freq_scale, float ext_factor, float attn_factor, float beta_fast, float beta_slow) {
        var mh$ = ggml_rope_multi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ggml_rope_multi", ctx, a, b, c, n_dims, sections, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
            }
            return (MemorySegment)mh$.invokeExact(ctx, a, b, c, n_dims, sections, mode, n_ctx_orig, freq_base, freq_scale, ext_factor, attn_factor, beta_fast, beta_slow);
        } catch (Error | RuntimeException ex) {
           throw ex;
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

