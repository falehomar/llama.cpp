// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_type_traits {
 *     const char *type_name;
 *     int64_t blck_size;
 *     int64_t blck_size_interleave;
 *     size_t type_size;
 *     bool is_quantized;
 *     ggml_to_float_t to_float;
 *     ggml_from_float_t from_float_ref;
 * }
 * }
 */
public class ggml_type_traits {

    ggml_type_traits() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_POINTER.withName("type_name"),
        llama_h.C_LONG_LONG.withName("blck_size"),
        llama_h.C_LONG_LONG.withName("blck_size_interleave"),
        llama_h.C_LONG.withName("type_size"),
        llama_h.C_BOOL.withName("is_quantized"),
        MemoryLayout.paddingLayout(7),
        llama_h.C_POINTER.withName("to_float"),
        llama_h.C_POINTER.withName("from_float_ref")
    ).withName("ggml_type_traits");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout type_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("type_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *type_name
     * }
     */
    public static final AddressLayout type_name$layout() {
        return type_name$LAYOUT;
    }

    private static final long type_name$OFFSET = $LAYOUT.byteOffset(groupElement("type_name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *type_name
     * }
     */
    public static final long type_name$offset() {
        return type_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *type_name
     * }
     */
    public static MemorySegment type_name(MemorySegment struct) {
        return struct.get(type_name$LAYOUT, type_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *type_name
     * }
     */
    public static void type_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(type_name$LAYOUT, type_name$OFFSET, fieldValue);
    }

    private static final OfLong blck_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("blck_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t blck_size
     * }
     */
    public static final OfLong blck_size$layout() {
        return blck_size$LAYOUT;
    }

    private static final long blck_size$OFFSET = $LAYOUT.byteOffset(groupElement("blck_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t blck_size
     * }
     */
    public static final long blck_size$offset() {
        return blck_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t blck_size
     * }
     */
    public static long blck_size(MemorySegment struct) {
        return struct.get(blck_size$LAYOUT, blck_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t blck_size
     * }
     */
    public static void blck_size(MemorySegment struct, long fieldValue) {
        struct.set(blck_size$LAYOUT, blck_size$OFFSET, fieldValue);
    }

    private static final OfLong blck_size_interleave$LAYOUT = (OfLong)$LAYOUT.select(groupElement("blck_size_interleave"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t blck_size_interleave
     * }
     */
    public static final OfLong blck_size_interleave$layout() {
        return blck_size_interleave$LAYOUT;
    }

    private static final long blck_size_interleave$OFFSET = $LAYOUT.byteOffset(groupElement("blck_size_interleave"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t blck_size_interleave
     * }
     */
    public static final long blck_size_interleave$offset() {
        return blck_size_interleave$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t blck_size_interleave
     * }
     */
    public static long blck_size_interleave(MemorySegment struct) {
        return struct.get(blck_size_interleave$LAYOUT, blck_size_interleave$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t blck_size_interleave
     * }
     */
    public static void blck_size_interleave(MemorySegment struct, long fieldValue) {
        struct.set(blck_size_interleave$LAYOUT, blck_size_interleave$OFFSET, fieldValue);
    }

    private static final OfLong type_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("type_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t type_size
     * }
     */
    public static final OfLong type_size$layout() {
        return type_size$LAYOUT;
    }

    private static final long type_size$OFFSET = $LAYOUT.byteOffset(groupElement("type_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t type_size
     * }
     */
    public static final long type_size$offset() {
        return type_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t type_size
     * }
     */
    public static long type_size(MemorySegment struct) {
        return struct.get(type_size$LAYOUT, type_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t type_size
     * }
     */
    public static void type_size(MemorySegment struct, long fieldValue) {
        struct.set(type_size$LAYOUT, type_size$OFFSET, fieldValue);
    }

    private static final OfBoolean is_quantized$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("is_quantized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool is_quantized
     * }
     */
    public static final OfBoolean is_quantized$layout() {
        return is_quantized$LAYOUT;
    }

    private static final long is_quantized$OFFSET = $LAYOUT.byteOffset(groupElement("is_quantized"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool is_quantized
     * }
     */
    public static final long is_quantized$offset() {
        return is_quantized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool is_quantized
     * }
     */
    public static boolean is_quantized(MemorySegment struct) {
        return struct.get(is_quantized$LAYOUT, is_quantized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool is_quantized
     * }
     */
    public static void is_quantized(MemorySegment struct, boolean fieldValue) {
        struct.set(is_quantized$LAYOUT, is_quantized$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ggml_to_float_t to_float
     * }
     */
    public final static class to_float {

        private to_float() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(to_float.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(to_float.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout to_float$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("to_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_to_float_t to_float
     * }
     */
    public static final AddressLayout to_float$layout() {
        return to_float$LAYOUT;
    }

    private static final long to_float$OFFSET = $LAYOUT.byteOffset(groupElement("to_float"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_to_float_t to_float
     * }
     */
    public static final long to_float$offset() {
        return to_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_to_float_t to_float
     * }
     */
    public static MemorySegment to_float(MemorySegment struct) {
        return struct.get(to_float$LAYOUT, to_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_to_float_t to_float
     * }
     */
    public static void to_float(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(to_float$LAYOUT, to_float$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ggml_from_float_t from_float_ref
     * }
     */
    public final static class from_float_ref {

        private from_float_ref() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER,
            llama_h.C_LONG_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(from_float_ref.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(from_float_ref.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout from_float_ref$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("from_float_ref"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float_ref
     * }
     */
    public static final AddressLayout from_float_ref$layout() {
        return from_float_ref$LAYOUT;
    }

    private static final long from_float_ref$OFFSET = $LAYOUT.byteOffset(groupElement("from_float_ref"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float_ref
     * }
     */
    public static final long from_float_ref$offset() {
        return from_float_ref$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float_ref
     * }
     */
    public static MemorySegment from_float_ref(MemorySegment struct) {
        return struct.get(from_float_ref$LAYOUT, from_float_ref$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_from_float_t from_float_ref
     * }
     */
    public static void from_float_ref(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(from_float_ref$LAYOUT, from_float_ref$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

