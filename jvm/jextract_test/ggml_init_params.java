// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_init_params {
 *     size_t mem_size;
 *     void *mem_buffer;
 *     bool no_alloc;
 * }
 * }
 */
public class ggml_init_params {

    ggml_init_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_LONG.withName("mem_size"),
        llama_h.C_POINTER.withName("mem_buffer"),
        llama_h.C_BOOL.withName("no_alloc"),
        MemoryLayout.paddingLayout(7)
    ).withName("ggml_init_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong mem_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("mem_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t mem_size
     * }
     */
    public static final OfLong mem_size$layout() {
        return mem_size$LAYOUT;
    }

    private static final long mem_size$OFFSET = $LAYOUT.byteOffset(groupElement("mem_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t mem_size
     * }
     */
    public static final long mem_size$offset() {
        return mem_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t mem_size
     * }
     */
    public static long mem_size(MemorySegment struct) {
        return struct.get(mem_size$LAYOUT, mem_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t mem_size
     * }
     */
    public static void mem_size(MemorySegment struct, long fieldValue) {
        struct.set(mem_size$LAYOUT, mem_size$OFFSET, fieldValue);
    }

    private static final AddressLayout mem_buffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mem_buffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *mem_buffer
     * }
     */
    public static final AddressLayout mem_buffer$layout() {
        return mem_buffer$LAYOUT;
    }

    private static final long mem_buffer$OFFSET = $LAYOUT.byteOffset(groupElement("mem_buffer"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *mem_buffer
     * }
     */
    public static final long mem_buffer$offset() {
        return mem_buffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *mem_buffer
     * }
     */
    public static MemorySegment mem_buffer(MemorySegment struct) {
        return struct.get(mem_buffer$LAYOUT, mem_buffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *mem_buffer
     * }
     */
    public static void mem_buffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mem_buffer$LAYOUT, mem_buffer$OFFSET, fieldValue);
    }

    private static final OfBoolean no_alloc$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("no_alloc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool no_alloc
     * }
     */
    public static final OfBoolean no_alloc$layout() {
        return no_alloc$LAYOUT;
    }

    private static final long no_alloc$OFFSET = $LAYOUT.byteOffset(groupElement("no_alloc"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool no_alloc
     * }
     */
    public static final long no_alloc$offset() {
        return no_alloc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool no_alloc
     * }
     */
    public static boolean no_alloc(MemorySegment struct) {
        return struct.get(no_alloc$LAYOUT, no_alloc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool no_alloc
     * }
     */
    public static void no_alloc(MemorySegment struct, boolean fieldValue) {
        struct.set(no_alloc$LAYOUT, no_alloc$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

