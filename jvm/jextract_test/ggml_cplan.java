// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_cplan {
 *     size_t work_size;
 *     uint8_t *work_data;
 *     int n_threads;
 *     struct ggml_threadpool *threadpool;
 *     ggml_abort_callback abort_callback;
 *     void *abort_callback_data;
 * }
 * }
 */
public class ggml_cplan {

    ggml_cplan() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_LONG.withName("work_size"),
        llama_h.C_POINTER.withName("work_data"),
        llama_h.C_INT.withName("n_threads"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_POINTER.withName("threadpool"),
        llama_h.C_POINTER.withName("abort_callback"),
        llama_h.C_POINTER.withName("abort_callback_data")
    ).withName("ggml_cplan");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong work_size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("work_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t work_size
     * }
     */
    public static final OfLong work_size$layout() {
        return work_size$LAYOUT;
    }

    private static final long work_size$OFFSET = $LAYOUT.byteOffset(groupElement("work_size"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t work_size
     * }
     */
    public static final long work_size$offset() {
        return work_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t work_size
     * }
     */
    public static long work_size(MemorySegment struct) {
        return struct.get(work_size$LAYOUT, work_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t work_size
     * }
     */
    public static void work_size(MemorySegment struct, long fieldValue) {
        struct.set(work_size$LAYOUT, work_size$OFFSET, fieldValue);
    }

    private static final AddressLayout work_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("work_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t *work_data
     * }
     */
    public static final AddressLayout work_data$layout() {
        return work_data$LAYOUT;
    }

    private static final long work_data$OFFSET = $LAYOUT.byteOffset(groupElement("work_data"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t *work_data
     * }
     */
    public static final long work_data$offset() {
        return work_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t *work_data
     * }
     */
    public static MemorySegment work_data(MemorySegment struct) {
        return struct.get(work_data$LAYOUT, work_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t *work_data
     * }
     */
    public static void work_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(work_data$LAYOUT, work_data$OFFSET, fieldValue);
    }

    private static final OfInt n_threads$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_threads"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static final OfInt n_threads$layout() {
        return n_threads$LAYOUT;
    }

    private static final long n_threads$OFFSET = $LAYOUT.byteOffset(groupElement("n_threads"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static final long n_threads$offset() {
        return n_threads$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static int n_threads(MemorySegment struct) {
        return struct.get(n_threads$LAYOUT, n_threads$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int n_threads
     * }
     */
    public static void n_threads(MemorySegment struct, int fieldValue) {
        struct.set(n_threads$LAYOUT, n_threads$OFFSET, fieldValue);
    }

    private static final AddressLayout threadpool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("threadpool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct ggml_threadpool *threadpool
     * }
     */
    public static final AddressLayout threadpool$layout() {
        return threadpool$LAYOUT;
    }

    private static final long threadpool$OFFSET = $LAYOUT.byteOffset(groupElement("threadpool"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct ggml_threadpool *threadpool
     * }
     */
    public static final long threadpool$offset() {
        return threadpool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct ggml_threadpool *threadpool
     * }
     */
    public static MemorySegment threadpool(MemorySegment struct) {
        return struct.get(threadpool$LAYOUT, threadpool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct ggml_threadpool *threadpool
     * }
     */
    public static void threadpool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(threadpool$LAYOUT, threadpool$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * ggml_abort_callback abort_callback
     * }
     */
    public final static class abort_callback {

        private abort_callback() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(abort_callback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(abort_callback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout abort_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("abort_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_abort_callback abort_callback
     * }
     */
    public static final AddressLayout abort_callback$layout() {
        return abort_callback$LAYOUT;
    }

    private static final long abort_callback$OFFSET = $LAYOUT.byteOffset(groupElement("abort_callback"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_abort_callback abort_callback
     * }
     */
    public static final long abort_callback$offset() {
        return abort_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_abort_callback abort_callback
     * }
     */
    public static MemorySegment abort_callback(MemorySegment struct) {
        return struct.get(abort_callback$LAYOUT, abort_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_abort_callback abort_callback
     * }
     */
    public static void abort_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(abort_callback$LAYOUT, abort_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout abort_callback_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("abort_callback_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *abort_callback_data
     * }
     */
    public static final AddressLayout abort_callback_data$layout() {
        return abort_callback_data$LAYOUT;
    }

    private static final long abort_callback_data$OFFSET = $LAYOUT.byteOffset(groupElement("abort_callback_data"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *abort_callback_data
     * }
     */
    public static final long abort_callback_data$offset() {
        return abort_callback_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *abort_callback_data
     * }
     */
    public static MemorySegment abort_callback_data(MemorySegment struct) {
        return struct.get(abort_callback_data$LAYOUT, abort_callback_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *abort_callback_data
     * }
     */
    public static void abort_callback_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(abort_callback_data$LAYOUT, abort_callback_data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

