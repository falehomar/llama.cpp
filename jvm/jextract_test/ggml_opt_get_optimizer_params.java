// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef struct ggml_opt_optimizer_params {
 *     struct {
 *         float alpha;
 *         float beta1;
 *         float beta2;
 *         float eps;
 *         float wd;
 *     } adamw;
 * } (*ggml_opt_get_optimizer_params)(void *)
 * }
 */
public final class ggml_opt_get_optimizer_params {

    private ggml_opt_get_optimizer_params() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        MemorySegment apply(MemorySegment userdata);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        ggml_opt_optimizer_params.layout(),
        llama_h.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = llama_h.upcallHandle(ggml_opt_get_optimizer_params.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(ggml_opt_get_optimizer_params.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static MemorySegment invoke(MemorySegment funcPtr, SegmentAllocator alloc, MemorySegment userdata) {
        try {
            return (MemorySegment) DOWN$MH.invokeExact(funcPtr, alloc, userdata);
        } catch (Error | RuntimeException ex) {
            throw ex;
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

