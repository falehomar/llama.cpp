// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_token_data {
 *     llama_token id;
 *     float logit;
 *     float p;
 * }
 * }
 */
public class llama_token_data {

    llama_token_data() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_INT.withName("id"),
        llama_h.C_FLOAT.withName("logit"),
        llama_h.C_FLOAT.withName("p")
    ).withName("llama_token_data");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * llama_token id
     * }
     */
    public static final OfInt id$layout() {
        return id$LAYOUT;
    }

    private static final long id$OFFSET = $LAYOUT.byteOffset(groupElement("id"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * llama_token id
     * }
     */
    public static final long id$offset() {
        return id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * llama_token id
     * }
     */
    public static int id(MemorySegment struct) {
        return struct.get(id$LAYOUT, id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * llama_token id
     * }
     */
    public static void id(MemorySegment struct, int fieldValue) {
        struct.set(id$LAYOUT, id$OFFSET, fieldValue);
    }

    private static final OfFloat logit$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("logit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float logit
     * }
     */
    public static final OfFloat logit$layout() {
        return logit$LAYOUT;
    }

    private static final long logit$OFFSET = $LAYOUT.byteOffset(groupElement("logit"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float logit
     * }
     */
    public static final long logit$offset() {
        return logit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float logit
     * }
     */
    public static float logit(MemorySegment struct) {
        return struct.get(logit$LAYOUT, logit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float logit
     * }
     */
    public static void logit(MemorySegment struct, float fieldValue) {
        struct.set(logit$LAYOUT, logit$OFFSET, fieldValue);
    }

    private static final OfFloat p$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("p"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float p
     * }
     */
    public static final OfFloat p$layout() {
        return p$LAYOUT;
    }

    private static final long p$OFFSET = $LAYOUT.byteOffset(groupElement("p"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float p
     * }
     */
    public static final long p$offset() {
        return p$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float p
     * }
     */
    public static float p(MemorySegment struct) {
        return struct.get(p$LAYOUT, p$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float p
     * }
     */
    public static void p(MemorySegment struct, float fieldValue) {
        struct.set(p$LAYOUT, p$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

