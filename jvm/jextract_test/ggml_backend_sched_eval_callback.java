// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef bool (*ggml_backend_sched_eval_callback)(struct ggml_tensor {
 *     enum ggml_type type;
 *     struct ggml_backend_buffer *buffer;
 *     int64_t ne[4];
 *     size_t nb[4];
 *     enum ggml_op op;
 *     int32_t op_params[16];
 *     int32_t flags;
 *     struct ggml_tensor *src[10];
 *     struct ggml_tensor *view_src;
 *     size_t view_offs;
 *     void *data;
 *     char name[64];
 *     void *extra;
 *     char padding[8];
 * } *, bool, void *)
 * }
 */
public final class ggml_backend_sched_eval_callback {

    private ggml_backend_sched_eval_callback() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        boolean apply(MemorySegment t, boolean ask, MemorySegment user_data);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        llama_h.C_BOOL,
        llama_h.C_POINTER,
        llama_h.C_BOOL,
        llama_h.C_POINTER
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = llama_h.upcallHandle(ggml_backend_sched_eval_callback.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(ggml_backend_sched_eval_callback.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static boolean invoke(MemorySegment funcPtr, MemorySegment t, boolean ask, MemorySegment user_data) {
        try {
            return (boolean) DOWN$MH.invokeExact(funcPtr, t, ask, user_data);
        } catch (Error | RuntimeException ex) {
            throw ex;
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

