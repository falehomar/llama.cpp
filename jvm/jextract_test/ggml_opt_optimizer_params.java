// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ggml_opt_optimizer_params {
 *     struct {
 *         float alpha;
 *         float beta1;
 *         float beta2;
 *         float eps;
 *         float wd;
 *     } adamw;
 * }
 * }
 */
public class ggml_opt_optimizer_params {

    ggml_opt_optimizer_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ggml_opt_optimizer_params.struct (unnamed at ../../../llama.cpp/ggml/include/ggml-opt.h:80:9).layout().withName("adamw")
    ).withName("ggml_opt_optimizer_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * struct {
     *     float alpha;
     *     float beta1;
     *     float beta2;
     *     float eps;
     *     float wd;
     * }
     * }
     */
    public static class struct (unnamed at ../../../llama.cpp/ggml/include/ggml-opt.h:80:9) {

        struct (unnamed at ../../../llama.cpp/ggml/include/ggml-opt.h:80:9)() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
            llama_h.C_FLOAT.withName("alpha"),
            llama_h.C_FLOAT.withName("beta1"),
            llama_h.C_FLOAT.withName("beta2"),
            llama_h.C_FLOAT.withName("eps"),
            llama_h.C_FLOAT.withName("wd")
        ).withName("struct (unnamed at ../../../llama.cpp/ggml/include/ggml-opt.h:80:9)");

        /**
         * The layout of this struct
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final OfFloat alpha$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("alpha"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * float alpha
         * }
         */
        public static final OfFloat alpha$layout() {
            return alpha$LAYOUT;
        }

        private static final long alpha$OFFSET = $LAYOUT.byteOffset(groupElement("alpha"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * float alpha
         * }
         */
        public static final long alpha$offset() {
            return alpha$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * float alpha
         * }
         */
        public static float alpha(MemorySegment struct) {
            return struct.get(alpha$LAYOUT, alpha$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * float alpha
         * }
         */
        public static void alpha(MemorySegment struct, float fieldValue) {
            struct.set(alpha$LAYOUT, alpha$OFFSET, fieldValue);
        }

        private static final OfFloat beta1$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("beta1"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * float beta1
         * }
         */
        public static final OfFloat beta1$layout() {
            return beta1$LAYOUT;
        }

        private static final long beta1$OFFSET = $LAYOUT.byteOffset(groupElement("beta1"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * float beta1
         * }
         */
        public static final long beta1$offset() {
            return beta1$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * float beta1
         * }
         */
        public static float beta1(MemorySegment struct) {
            return struct.get(beta1$LAYOUT, beta1$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * float beta1
         * }
         */
        public static void beta1(MemorySegment struct, float fieldValue) {
            struct.set(beta1$LAYOUT, beta1$OFFSET, fieldValue);
        }

        private static final OfFloat beta2$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("beta2"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * float beta2
         * }
         */
        public static final OfFloat beta2$layout() {
            return beta2$LAYOUT;
        }

        private static final long beta2$OFFSET = $LAYOUT.byteOffset(groupElement("beta2"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * float beta2
         * }
         */
        public static final long beta2$offset() {
            return beta2$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * float beta2
         * }
         */
        public static float beta2(MemorySegment struct) {
            return struct.get(beta2$LAYOUT, beta2$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * float beta2
         * }
         */
        public static void beta2(MemorySegment struct, float fieldValue) {
            struct.set(beta2$LAYOUT, beta2$OFFSET, fieldValue);
        }

        private static final OfFloat eps$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("eps"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * float eps
         * }
         */
        public static final OfFloat eps$layout() {
            return eps$LAYOUT;
        }

        private static final long eps$OFFSET = $LAYOUT.byteOffset(groupElement("eps"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * float eps
         * }
         */
        public static final long eps$offset() {
            return eps$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * float eps
         * }
         */
        public static float eps(MemorySegment struct) {
            return struct.get(eps$LAYOUT, eps$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * float eps
         * }
         */
        public static void eps(MemorySegment struct, float fieldValue) {
            struct.set(eps$LAYOUT, eps$OFFSET, fieldValue);
        }

        private static final OfFloat wd$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("wd"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * float wd
         * }
         */
        public static final OfFloat wd$layout() {
            return wd$LAYOUT;
        }

        private static final long wd$OFFSET = $LAYOUT.byteOffset(groupElement("wd"));

        /**
         * Offset for field:
         * {@snippet lang=c :
         * float wd
         * }
         */
        public static final long wd$offset() {
            return wd$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * float wd
         * }
         */
        public static float wd(MemorySegment struct) {
            return struct.get(wd$LAYOUT, wd$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * float wd
         * }
         */
        public static void wd(MemorySegment struct, float fieldValue) {
            struct.set(wd$LAYOUT, wd$OFFSET, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this struct
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout adamw$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("adamw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct {
     *     float alpha;
     *     float beta1;
     *     float beta2;
     *     float eps;
     *     float wd;
     * } adamw
     * }
     */
    public static final GroupLayout adamw$layout() {
        return adamw$LAYOUT;
    }

    private static final long adamw$OFFSET = $LAYOUT.byteOffset(groupElement("adamw"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct {
     *     float alpha;
     *     float beta1;
     *     float beta2;
     *     float eps;
     *     float wd;
     * } adamw
     * }
     */
    public static final long adamw$offset() {
        return adamw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct {
     *     float alpha;
     *     float beta1;
     *     float beta2;
     *     float eps;
     *     float wd;
     * } adamw
     * }
     */
    public static MemorySegment adamw(MemorySegment struct) {
        return struct.asSlice(adamw$OFFSET, adamw$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct {
     *     float alpha;
     *     float beta1;
     *     float beta2;
     *     float eps;
     *     float wd;
     * } adamw
     * }
     */
    public static void adamw(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, adamw$OFFSET, adamw$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

