// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_model_params {
 *     ggml_backend_dev_t *devices;
 *     const struct llama_model_tensor_buft_override *tensor_buft_overrides;
 *     int32_t n_gpu_layers;
 *     enum llama_split_mode split_mode;
 *     int32_t main_gpu;
 *     const float *tensor_split;
 *     llama_progress_callback progress_callback;
 *     void *progress_callback_user_data;
 *     const struct llama_model_kv_override *kv_overrides;
 *     bool vocab_only;
 *     bool use_mmap;
 *     bool use_mlock;
 *     bool check_tensors;
 * }
 * }
 */
public class llama_model_params {

    llama_model_params() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_POINTER.withName("devices"),
        llama_h.C_POINTER.withName("tensor_buft_overrides"),
        llama_h.C_INT.withName("n_gpu_layers"),
        llama_h.C_INT.withName("split_mode"),
        llama_h.C_INT.withName("main_gpu"),
        MemoryLayout.paddingLayout(4),
        llama_h.C_POINTER.withName("tensor_split"),
        llama_h.C_POINTER.withName("progress_callback"),
        llama_h.C_POINTER.withName("progress_callback_user_data"),
        llama_h.C_POINTER.withName("kv_overrides"),
        llama_h.C_BOOL.withName("vocab_only"),
        llama_h.C_BOOL.withName("use_mmap"),
        llama_h.C_BOOL.withName("use_mlock"),
        llama_h.C_BOOL.withName("check_tensors"),
        MemoryLayout.paddingLayout(4)
    ).withName("llama_model_params");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout devices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("devices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * ggml_backend_dev_t *devices
     * }
     */
    public static final AddressLayout devices$layout() {
        return devices$LAYOUT;
    }

    private static final long devices$OFFSET = $LAYOUT.byteOffset(groupElement("devices"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * ggml_backend_dev_t *devices
     * }
     */
    public static final long devices$offset() {
        return devices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * ggml_backend_dev_t *devices
     * }
     */
    public static MemorySegment devices(MemorySegment struct) {
        return struct.get(devices$LAYOUT, devices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * ggml_backend_dev_t *devices
     * }
     */
    public static void devices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(devices$LAYOUT, devices$OFFSET, fieldValue);
    }

    private static final AddressLayout tensor_buft_overrides$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tensor_buft_overrides"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct llama_model_tensor_buft_override *tensor_buft_overrides
     * }
     */
    public static final AddressLayout tensor_buft_overrides$layout() {
        return tensor_buft_overrides$LAYOUT;
    }

    private static final long tensor_buft_overrides$OFFSET = $LAYOUT.byteOffset(groupElement("tensor_buft_overrides"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct llama_model_tensor_buft_override *tensor_buft_overrides
     * }
     */
    public static final long tensor_buft_overrides$offset() {
        return tensor_buft_overrides$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct llama_model_tensor_buft_override *tensor_buft_overrides
     * }
     */
    public static MemorySegment tensor_buft_overrides(MemorySegment struct) {
        return struct.get(tensor_buft_overrides$LAYOUT, tensor_buft_overrides$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct llama_model_tensor_buft_override *tensor_buft_overrides
     * }
     */
    public static void tensor_buft_overrides(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tensor_buft_overrides$LAYOUT, tensor_buft_overrides$OFFSET, fieldValue);
    }

    private static final OfInt n_gpu_layers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("n_gpu_layers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t n_gpu_layers
     * }
     */
    public static final OfInt n_gpu_layers$layout() {
        return n_gpu_layers$LAYOUT;
    }

    private static final long n_gpu_layers$OFFSET = $LAYOUT.byteOffset(groupElement("n_gpu_layers"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t n_gpu_layers
     * }
     */
    public static final long n_gpu_layers$offset() {
        return n_gpu_layers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t n_gpu_layers
     * }
     */
    public static int n_gpu_layers(MemorySegment struct) {
        return struct.get(n_gpu_layers$LAYOUT, n_gpu_layers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t n_gpu_layers
     * }
     */
    public static void n_gpu_layers(MemorySegment struct, int fieldValue) {
        struct.set(n_gpu_layers$LAYOUT, n_gpu_layers$OFFSET, fieldValue);
    }

    private static final OfInt split_mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("split_mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum llama_split_mode split_mode
     * }
     */
    public static final OfInt split_mode$layout() {
        return split_mode$LAYOUT;
    }

    private static final long split_mode$OFFSET = $LAYOUT.byteOffset(groupElement("split_mode"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum llama_split_mode split_mode
     * }
     */
    public static final long split_mode$offset() {
        return split_mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum llama_split_mode split_mode
     * }
     */
    public static int split_mode(MemorySegment struct) {
        return struct.get(split_mode$LAYOUT, split_mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum llama_split_mode split_mode
     * }
     */
    public static void split_mode(MemorySegment struct, int fieldValue) {
        struct.set(split_mode$LAYOUT, split_mode$OFFSET, fieldValue);
    }

    private static final OfInt main_gpu$LAYOUT = (OfInt)$LAYOUT.select(groupElement("main_gpu"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t main_gpu
     * }
     */
    public static final OfInt main_gpu$layout() {
        return main_gpu$LAYOUT;
    }

    private static final long main_gpu$OFFSET = $LAYOUT.byteOffset(groupElement("main_gpu"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t main_gpu
     * }
     */
    public static final long main_gpu$offset() {
        return main_gpu$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t main_gpu
     * }
     */
    public static int main_gpu(MemorySegment struct) {
        return struct.get(main_gpu$LAYOUT, main_gpu$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t main_gpu
     * }
     */
    public static void main_gpu(MemorySegment struct, int fieldValue) {
        struct.set(main_gpu$LAYOUT, main_gpu$OFFSET, fieldValue);
    }

    private static final AddressLayout tensor_split$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("tensor_split"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const float *tensor_split
     * }
     */
    public static final AddressLayout tensor_split$layout() {
        return tensor_split$LAYOUT;
    }

    private static final long tensor_split$OFFSET = $LAYOUT.byteOffset(groupElement("tensor_split"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const float *tensor_split
     * }
     */
    public static final long tensor_split$offset() {
        return tensor_split$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const float *tensor_split
     * }
     */
    public static MemorySegment tensor_split(MemorySegment struct) {
        return struct.get(tensor_split$LAYOUT, tensor_split$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const float *tensor_split
     * }
     */
    public static void tensor_split(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(tensor_split$LAYOUT, tensor_split$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * llama_progress_callback progress_callback
     * }
     */
    public final static class progress_callback {

        private progress_callback() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            boolean apply(float _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            llama_h.C_BOOL,
            llama_h.C_FLOAT,
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(progress_callback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(progress_callback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static boolean invoke(MemorySegment funcPtr, float _x0, MemorySegment _x1) {
            try {
                return (boolean) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout progress_callback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("progress_callback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * llama_progress_callback progress_callback
     * }
     */
    public static final AddressLayout progress_callback$layout() {
        return progress_callback$LAYOUT;
    }

    private static final long progress_callback$OFFSET = $LAYOUT.byteOffset(groupElement("progress_callback"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * llama_progress_callback progress_callback
     * }
     */
    public static final long progress_callback$offset() {
        return progress_callback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * llama_progress_callback progress_callback
     * }
     */
    public static MemorySegment progress_callback(MemorySegment struct) {
        return struct.get(progress_callback$LAYOUT, progress_callback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * llama_progress_callback progress_callback
     * }
     */
    public static void progress_callback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(progress_callback$LAYOUT, progress_callback$OFFSET, fieldValue);
    }

    private static final AddressLayout progress_callback_user_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("progress_callback_user_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *progress_callback_user_data
     * }
     */
    public static final AddressLayout progress_callback_user_data$layout() {
        return progress_callback_user_data$LAYOUT;
    }

    private static final long progress_callback_user_data$OFFSET = $LAYOUT.byteOffset(groupElement("progress_callback_user_data"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *progress_callback_user_data
     * }
     */
    public static final long progress_callback_user_data$offset() {
        return progress_callback_user_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *progress_callback_user_data
     * }
     */
    public static MemorySegment progress_callback_user_data(MemorySegment struct) {
        return struct.get(progress_callback_user_data$LAYOUT, progress_callback_user_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *progress_callback_user_data
     * }
     */
    public static void progress_callback_user_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(progress_callback_user_data$LAYOUT, progress_callback_user_data$OFFSET, fieldValue);
    }

    private static final AddressLayout kv_overrides$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("kv_overrides"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const struct llama_model_kv_override *kv_overrides
     * }
     */
    public static final AddressLayout kv_overrides$layout() {
        return kv_overrides$LAYOUT;
    }

    private static final long kv_overrides$OFFSET = $LAYOUT.byteOffset(groupElement("kv_overrides"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const struct llama_model_kv_override *kv_overrides
     * }
     */
    public static final long kv_overrides$offset() {
        return kv_overrides$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const struct llama_model_kv_override *kv_overrides
     * }
     */
    public static MemorySegment kv_overrides(MemorySegment struct) {
        return struct.get(kv_overrides$LAYOUT, kv_overrides$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const struct llama_model_kv_override *kv_overrides
     * }
     */
    public static void kv_overrides(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(kv_overrides$LAYOUT, kv_overrides$OFFSET, fieldValue);
    }

    private static final OfBoolean vocab_only$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("vocab_only"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool vocab_only
     * }
     */
    public static final OfBoolean vocab_only$layout() {
        return vocab_only$LAYOUT;
    }

    private static final long vocab_only$OFFSET = $LAYOUT.byteOffset(groupElement("vocab_only"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool vocab_only
     * }
     */
    public static final long vocab_only$offset() {
        return vocab_only$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool vocab_only
     * }
     */
    public static boolean vocab_only(MemorySegment struct) {
        return struct.get(vocab_only$LAYOUT, vocab_only$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool vocab_only
     * }
     */
    public static void vocab_only(MemorySegment struct, boolean fieldValue) {
        struct.set(vocab_only$LAYOUT, vocab_only$OFFSET, fieldValue);
    }

    private static final OfBoolean use_mmap$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("use_mmap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool use_mmap
     * }
     */
    public static final OfBoolean use_mmap$layout() {
        return use_mmap$LAYOUT;
    }

    private static final long use_mmap$OFFSET = $LAYOUT.byteOffset(groupElement("use_mmap"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool use_mmap
     * }
     */
    public static final long use_mmap$offset() {
        return use_mmap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool use_mmap
     * }
     */
    public static boolean use_mmap(MemorySegment struct) {
        return struct.get(use_mmap$LAYOUT, use_mmap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool use_mmap
     * }
     */
    public static void use_mmap(MemorySegment struct, boolean fieldValue) {
        struct.set(use_mmap$LAYOUT, use_mmap$OFFSET, fieldValue);
    }

    private static final OfBoolean use_mlock$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("use_mlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool use_mlock
     * }
     */
    public static final OfBoolean use_mlock$layout() {
        return use_mlock$LAYOUT;
    }

    private static final long use_mlock$OFFSET = $LAYOUT.byteOffset(groupElement("use_mlock"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool use_mlock
     * }
     */
    public static final long use_mlock$offset() {
        return use_mlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool use_mlock
     * }
     */
    public static boolean use_mlock(MemorySegment struct) {
        return struct.get(use_mlock$LAYOUT, use_mlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool use_mlock
     * }
     */
    public static void use_mlock(MemorySegment struct, boolean fieldValue) {
        struct.set(use_mlock$LAYOUT, use_mlock$OFFSET, fieldValue);
    }

    private static final OfBoolean check_tensors$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("check_tensors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool check_tensors
     * }
     */
    public static final OfBoolean check_tensors$layout() {
        return check_tensors$LAYOUT;
    }

    private static final long check_tensors$OFFSET = $LAYOUT.byteOffset(groupElement("check_tensors"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool check_tensors
     * }
     */
    public static final long check_tensors$offset() {
        return check_tensors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool check_tensors
     * }
     */
    public static boolean check_tensors(MemorySegment struct) {
        return struct.get(check_tensors$LAYOUT, check_tensors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool check_tensors
     * }
     */
    public static void check_tensors(MemorySegment struct, boolean fieldValue) {
        struct.set(check_tensors$LAYOUT, check_tensors$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

