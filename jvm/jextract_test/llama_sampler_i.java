// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_sampler_i {
 *     const char *(*name)(const struct llama_sampler *);
 *     void (*accept)(struct llama_sampler *, llama_token);
 *     void (*apply)(struct llama_sampler *, llama_token_data_array *);
 *     void (*reset)(struct llama_sampler *);
 *     struct llama_sampler *(*clone)(const struct llama_sampler *);
 *     void (*free)(struct llama_sampler *);
 * }
 * }
 */
public class llama_sampler_i {

    llama_sampler_i() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_POINTER.withName("name"),
        llama_h.C_POINTER.withName("accept"),
        llama_h.C_POINTER.withName("apply"),
        llama_h.C_POINTER.withName("reset"),
        llama_h.C_POINTER.withName("clone"),
        llama_h.C_POINTER.withName("free")
    ).withName("llama_sampler_i");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * const char *(*name)(const struct llama_sampler *)
     * }
     */
    public final static class name {

        private name() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(name.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(name.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *(*name)(const struct llama_sampler *)
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = $LAYOUT.byteOffset(groupElement("name"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *(*name)(const struct llama_sampler *)
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *(*name)(const struct llama_sampler *)
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *(*name)(const struct llama_sampler *)
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler *, llama_token)
     * }
     */
    public final static class accept {

        private accept() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(accept.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(accept.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout accept$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("accept"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler *, llama_token)
     * }
     */
    public static final AddressLayout accept$layout() {
        return accept$LAYOUT;
    }

    private static final long accept$OFFSET = $LAYOUT.byteOffset(groupElement("accept"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler *, llama_token)
     * }
     */
    public static final long accept$offset() {
        return accept$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler *, llama_token)
     * }
     */
    public static MemorySegment accept(MemorySegment struct) {
        return struct.get(accept$LAYOUT, accept$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*accept)(struct llama_sampler *, llama_token)
     * }
     */
    public static void accept(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(accept$LAYOUT, accept$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler *, llama_token_data_array *)
     * }
     */
    public final static class apply {

        private apply() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(apply.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(apply.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout apply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("apply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler *, llama_token_data_array *)
     * }
     */
    public static final AddressLayout apply$layout() {
        return apply$LAYOUT;
    }

    private static final long apply$OFFSET = $LAYOUT.byteOffset(groupElement("apply"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler *, llama_token_data_array *)
     * }
     */
    public static final long apply$offset() {
        return apply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler *, llama_token_data_array *)
     * }
     */
    public static MemorySegment apply(MemorySegment struct) {
        return struct.get(apply$LAYOUT, apply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*apply)(struct llama_sampler *, llama_token_data_array *)
     * }
     */
    public static void apply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(apply$LAYOUT, apply$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler *)
     * }
     */
    public final static class reset {

        private reset() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(reset.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(reset.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout reset$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("reset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler *)
     * }
     */
    public static final AddressLayout reset$layout() {
        return reset$LAYOUT;
    }

    private static final long reset$OFFSET = $LAYOUT.byteOffset(groupElement("reset"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler *)
     * }
     */
    public static final long reset$offset() {
        return reset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler *)
     * }
     */
    public static MemorySegment reset(MemorySegment struct) {
        return struct.get(reset$LAYOUT, reset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*reset)(struct llama_sampler *)
     * }
     */
    public static void reset(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(reset$LAYOUT, reset$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * struct llama_sampler *(*clone)(const struct llama_sampler *)
     * }
     */
    public final static class clone {

        private clone() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            llama_h.C_POINTER,
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(clone.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(clone.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout clone$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("clone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct llama_sampler *(*clone)(const struct llama_sampler *)
     * }
     */
    public static final AddressLayout clone$layout() {
        return clone$LAYOUT;
    }

    private static final long clone$OFFSET = $LAYOUT.byteOffset(groupElement("clone"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct llama_sampler *(*clone)(const struct llama_sampler *)
     * }
     */
    public static final long clone$offset() {
        return clone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct llama_sampler *(*clone)(const struct llama_sampler *)
     * }
     */
    public static MemorySegment clone(MemorySegment struct) {
        return struct.get(clone$LAYOUT, clone$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct llama_sampler *(*clone)(const struct llama_sampler *)
     * }
     */
    public static void clone(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(clone$LAYOUT, clone$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler *)
     * }
     */
    public final static class free {

        private free() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            llama_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = llama_h.upcallHandle(free.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(free.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr, MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Error | RuntimeException ex) {
                throw ex;
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout free$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("free"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler *)
     * }
     */
    public static final AddressLayout free$layout() {
        return free$LAYOUT;
    }

    private static final long free$OFFSET = $LAYOUT.byteOffset(groupElement("free"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler *)
     * }
     */
    public static final long free$offset() {
        return free$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler *)
     * }
     */
    public static MemorySegment free(MemorySegment struct) {
        return struct.get(free$LAYOUT, free$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*free)(struct llama_sampler *)
     * }
     */
    public static void free(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(free$LAYOUT, free$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

