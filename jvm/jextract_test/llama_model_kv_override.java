// Generated by jextract

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct llama_model_kv_override {
 *     enum llama_model_kv_override_type tag;
 *     char key[128];
 *     union {
 *         int64_t val_i64;
 *         double val_f64;
 *         bool val_bool;
 *         char val_str[128];
 *     };
 * }
 * }
 */
public class llama_model_kv_override {

    llama_model_kv_override() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        llama_h.C_INT.withName("tag"),
        MemoryLayout.sequenceLayout(128, llama_h.C_CHAR).withName("key"),
        MemoryLayout.paddingLayout(4),
        MemoryLayout.unionLayout(
            llama_h.C_LONG_LONG.withName("val_i64"),
            llama_h.C_DOUBLE.withName("val_f64"),
            llama_h.C_BOOL.withName("val_bool"),
            MemoryLayout.sequenceLayout(128, llama_h.C_CHAR).withName("val_str")
        ).withName("union (anonymous at /Users/e168693/TeamCompose/submodules/llama.cpp/include/llama.h:282:9)")
    ).withName("llama_model_kv_override");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt tag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * enum llama_model_kv_override_type tag
     * }
     */
    public static final OfInt tag$layout() {
        return tag$LAYOUT;
    }

    private static final long tag$OFFSET = $LAYOUT.byteOffset(groupElement("tag"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * enum llama_model_kv_override_type tag
     * }
     */
    public static final long tag$offset() {
        return tag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * enum llama_model_kv_override_type tag
     * }
     */
    public static int tag(MemorySegment struct) {
        return struct.get(tag$LAYOUT, tag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * enum llama_model_kv_override_type tag
     * }
     */
    public static void tag(MemorySegment struct, int fieldValue) {
        struct.set(tag$LAYOUT, tag$OFFSET, fieldValue);
    }

    private static final SequenceLayout key$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("key"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static final SequenceLayout key$layout() {
        return key$LAYOUT;
    }

    private static final long key$OFFSET = $LAYOUT.byteOffset(groupElement("key"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static final long key$offset() {
        return key$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static MemorySegment key(MemorySegment struct) {
        return struct.asSlice(key$OFFSET, key$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static void key(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, key$OFFSET, key$LAYOUT.byteSize());
    }

    private static long[] key$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static long[] key$dimensions() {
        return key$DIMS;
    }
    private static final VarHandle key$ELEM_HANDLE = key$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static byte key(MemorySegment struct, long index0) {
        return (byte)key$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char key[128]
     * }
     */
    public static void key(MemorySegment struct, long index0, byte fieldValue) {
        key$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong val_i64$LAYOUT = (OfLong)$LAYOUT.select(groupElement("$anon$282:9"), groupElement("val_i64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t val_i64
     * }
     */
    public static final OfLong val_i64$layout() {
        return val_i64$LAYOUT;
    }

    private static final long val_i64$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$282:9"), groupElement("val_i64"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t val_i64
     * }
     */
    public static final long val_i64$offset() {
        return val_i64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t val_i64
     * }
     */
    public static long val_i64(MemorySegment struct) {
        return struct.get(val_i64$LAYOUT, val_i64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t val_i64
     * }
     */
    public static void val_i64(MemorySegment struct, long fieldValue) {
        struct.set(val_i64$LAYOUT, val_i64$OFFSET, fieldValue);
    }

    private static final OfDouble val_f64$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("$anon$282:9"), groupElement("val_f64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double val_f64
     * }
     */
    public static final OfDouble val_f64$layout() {
        return val_f64$LAYOUT;
    }

    private static final long val_f64$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$282:9"), groupElement("val_f64"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double val_f64
     * }
     */
    public static final long val_f64$offset() {
        return val_f64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double val_f64
     * }
     */
    public static double val_f64(MemorySegment struct) {
        return struct.get(val_f64$LAYOUT, val_f64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double val_f64
     * }
     */
    public static void val_f64(MemorySegment struct, double fieldValue) {
        struct.set(val_f64$LAYOUT, val_f64$OFFSET, fieldValue);
    }

    private static final OfBoolean val_bool$LAYOUT = (OfBoolean)$LAYOUT.select(groupElement("$anon$282:9"), groupElement("val_bool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * bool val_bool
     * }
     */
    public static final OfBoolean val_bool$layout() {
        return val_bool$LAYOUT;
    }

    private static final long val_bool$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$282:9"), groupElement("val_bool"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * bool val_bool
     * }
     */
    public static final long val_bool$offset() {
        return val_bool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * bool val_bool
     * }
     */
    public static boolean val_bool(MemorySegment struct) {
        return struct.get(val_bool$LAYOUT, val_bool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * bool val_bool
     * }
     */
    public static void val_bool(MemorySegment struct, boolean fieldValue) {
        struct.set(val_bool$LAYOUT, val_bool$OFFSET, fieldValue);
    }

    private static final SequenceLayout val_str$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("$anon$282:9"), groupElement("val_str"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static final SequenceLayout val_str$layout() {
        return val_str$LAYOUT;
    }

    private static final long val_str$OFFSET = $LAYOUT.byteOffset(groupElement("$anon$282:9"), groupElement("val_str"));

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static final long val_str$offset() {
        return val_str$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static MemorySegment val_str(MemorySegment struct) {
        return struct.asSlice(val_str$OFFSET, val_str$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static void val_str(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, val_str$OFFSET, val_str$LAYOUT.byteSize());
    }

    private static long[] val_str$DIMS = { 128 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static long[] val_str$dimensions() {
        return val_str$DIMS;
    }
    private static final VarHandle val_str$ELEM_HANDLE = val_str$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static byte val_str(MemorySegment struct, long index0) {
        return (byte)val_str$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char val_str[128]
     * }
     */
    public static void val_str(MemorySegment struct, long index0, byte fieldValue) {
        val_str$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

